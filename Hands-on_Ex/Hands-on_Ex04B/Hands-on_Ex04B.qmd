---
title: "Hands-on Exercise 4B"
date: "28 January 2024"
date-modified: "last-modified" #allows for updating to the latest date
format: html
execute: 
  echo: true #shows the code
  eval: true #shows the outcomes of the code
  warning: false #does not show the warnings
editor: visual
background-color: lightgrey;
font-family:  Palatino Linotype;
---

# 10 Visual Statistical Analysis

## 10.1 Overview and Learning Outcomes

This hands-on exercise is based on [Chapter 10](https://r4va.netlify.app/chap10) of the **R for Visual Analytics** book.

The learning outcomes are:

-   Use the [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/) package to create visual graphics with rich statistical information;

    -   It is an extension of the [**ggplot2**](https://ggplot2.tidyverse.org/) package for creating graphics with details from statistical tests included in the information-rich plots themselves.

    -   This provides alternative statistical inference methods by default.

    -   It also follows the best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) standard for statistical reporting.

-   Use the [**performance**](https://easystats.github.io/performance/) package to visualise model diagnostics; and

-   Use the [**parameters**](https://easystats.github.io/parameters/) package to visualise model parameters.

## 10.2 Getting Started

### 10.2.1 Installing and Loading Required Libraries

In this hands-on exercise, the following R packages are used:

-   [**tidyverse**](https://www.tidyverse.org/) (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data; and

-   [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/) for plotting statistics;

-   [**performance**](https://easystats.github.io/performance/) for assessment of model performance; and

-   [**parameters**](https://easystats.github.io/parameters/)for processing of model parameters.

The code chunk below uses the `p_load()` function in the **pacman** package to check if the packages are installed. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.

```{r}
pacman::p_load(tidyverse, ggstatsplot,
               performance, parameters)
```

### 10.2.2 Importing Data

The dataset for this hands-on exercise is imported into the R environment using the `read_csv()` function in the **readr** package and stored as the R object, `exam_data`.

```{r}
exam = read_csv("data/Exam_data.csv")
```

The tibble data frame, `exam_data`, has 7 columns and 322 rows.

-   It consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.

-   The 7 variables/attributes are:

    -   Categorical: ID, CLASS, GENDER, and RACE.

    -   Continuous: MATHS, ENGLISH, and SCIENCE.

## 10.3 Using ggstatsplot Methods

### 10.3.1 One-sample Test: gghistostats()

The gghistostats() function is used to to build a plot of a one-sample test.

Default information:

-   Statistical details;

-   Bayes factor;

-   Sample sizes; and

-   Distribution summary.

::: panel-tabset
## Plot

```{r}
#| echo: false
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English Scores")
```

## Code

```{r}
#| eval: false
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English Scores")
```
:::

### 10.3.2 Unpacking the Bayes Factor

A Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favour of one theory among two competing theories.

The Bayes factor is a way to evaluate the data in favour of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favour of a given hypothesis.

When comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes factor is often written as B10.

The [Schwarz criterion](https://www.statisticshowto.com/bayesian-information-criterion/) is one of the easiest ways to calculate a rough approximation of the Bayes factor.

### 10.3.3 How to Interpret Bayes Factor

xxx

### 10.3.4 Two-sample Mean Test: ggbetweenstats()

xxx

### 10.3.5 One-way ANOVA Test: ggbetweenstats()

xxx

### 10.3.6 Significant Test of Correlation: ggscatterstats()

xxx

### 10.3.7 Significant Test of Association (Dependence): ggbarstats()

xxx

## 10.4 ???

xxx

### 10.4.1 Multiple Regression Model with lm()

xxx

### 10.4.2 Model Diagnostic: Checking for Multicollinearity

xxx

### 10.4.3 Model Diagnostic: Checking for Normality Assumption

xxx

### 10.4.4 Model Diagnostic: Checking for Homogeneity of Variances

xxx

### 10.4.5 Model Diagnostic: Complete Check

xxx

### 10.4.6 Visualising Regression Parameters: plot()

xxx

### 10.4.7 Visualising Regression Parameters: ggcoefstats()

xxx

[**\~\~\~ End of Hands-on Exercise 4B \~\~\~**]{.smallcaps}
