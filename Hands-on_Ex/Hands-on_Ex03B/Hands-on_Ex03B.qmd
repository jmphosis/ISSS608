---
title: "Hands-on Exercise 3"
date: "15 January 2024"
date-modified: "last-modified" #allows for updating to the latest date
format: html
execute: 
  echo: true #shows the code
  eval: true #shows the outcomes of the code
  warning: false #does not show the warnings
editor: visual
background-color: lightgrey;
font-family:  Palatino Linotype;
---

# 4 Programming Animated Statistical Graphics with R

## 4.1 Overview and Learning Outcomes

This hands-on exercise is based on [Chapter 4](https://r4va.netlify.app/chap04) of the **R for Visual Analytics** book.

The learning outcomes are:

-   Learn how to create animated data visualisation using the [**gganimate**](https://gganimate.com/) and [**plotly**](https://plotly.com/r/) packages; and

-   Learn how to reshape data using the [**tidyr**](https://tidyr.tidyverse.org/) package, and process, wrangle, and transform data using the [**dplyr**](https://dplyr.tidyverse.org/) package.

### 4.1.1 Basic Concepts of Animation

When creating animations, the plot does not actually move. Instead, many individual plots are built and stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data (e.g., subsets based on time variable). The subset drives the flow of the animation when stitched back together.

![](images/animate.jpg){fig-align="center"}

### 4.1.2 Terminology

The key concepts and terminology related to this type of animated data visualisation are:

1.  **Frame**: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.

2.  **Animation Attributes**: The animation attributes are the settings that control how the animation behaves. For example, one can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.

## 4.2 Getting Started

### 3.2.1 Installing and Loading Required Libraries

In this hands-on exercise, the following R packages are used:

-   [**tidyverse**](https://www.tidyverse.org/) (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;

-   [**plotly**](https://plotly.com/r/) for plotting interactive statistical graphs;

-   [**gganimate**](https://gganimate.com/) (ggplot extension) for creating animated statistical graphs.

-   [**gifski**](https://cran.r-project.org/web/packages/gifski/) for converting video frames to GIF animations using pngquantâ€™s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.

-   [**gapminder**](https://cran.r-project.org/web/packages/gapminder/) fpr providing data available at Gapminder.org. The `country_colors` scheme is relevant.

The code chunk below uses the `p_load()` function in the **pacman** package to check if the packages are installed. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.

```{r}
pacman::p_load(tidyverse, readxl,
               plotly, gganimate, 
               gifski, gapminder)
```

### 4.2.2 Importing Data

The dataset for this hands-on exercise is imported into the R environment using the [`read_xls()`](https://readxl.tidyverse.org/reference/read_excel.html) function in the [**readxl**](https://readxl.tidyverse.org/) package and stored as the R object, `globalPop`.

The `mutate_each_()` function in the **dplyr** package is used to convert all character data type into factor data type, and the `mutate()` function in the **dplyr** package is used to convert the data values for the Year field into integer data type.

```{r}
#| eval: false
col = c("Country", "Continent")

globalPop = read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_each_(funs(factor(.)), col) %>%
  mutate(Year = as.integer(Year))
```

However, the `mutate_each_()` function was deprecated in dplyr 0.7.0. and the `funs()` fgunction was deprecated in dplyr 0.8.0. In view of this, the code chunk is rewritten using the [`mutate_at()`](https://dplyr.tidyverse.org/reference/mutate_all.html) function in the **dplyr** package.

```{r}
col = c("Country", "Continent")

globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_at(col, as.factor) %>%
  mutate(Year = as.integer(Year))
```

Alternatively, the [`across()`](https://dplyr.tidyverse.org/reference/across.html) function in the **dplyr** package can be used with the `mutate()` function to obtain the same output.

```{r}
#| eval: false
col = c("Country", "Continent")

globalPop = read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate(across(col, as.factor)) %>%
  mutate(Year = as.integer(Year))
```

### 4.2.3 Explorting Data

The tibble data frame, `globalPop`, has 6 columns and 6,204 rows.

-   It consists of the populations of 222 countries, across 6 continents.

-   It also shows the percentages of the Old and Young subsets of the populations.

```{r}
n_distinct(globalPop$Country)
n_distinct(globalPop$Continent)
```

## 4.3 Animated Data Visualisation: gganimate Methods

The **gganimate** package extends the Grammar of Graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object to customise how it should change with time:

-   `transition_*()` defines how the data should be spread out and how it relates to itself across time.

-   `view_*()` defines how the positional scales should change along the animation.

-   `shadow_*()` defines how data from other points in time should be presented in the given point in time.

-   `enter_*()/exit_*()` defines how new data should appear and how old data should disappear during the course of the animation.

-   `ease_aes()` defines how different aesthetics should be eased during transitions.

### 4.3.1 Building A Static Bubble Plot

A static population bubble plot is created using basic ggplot2 functions.

::: panel-tabset
## Plot

```{r}
#| echo: false
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```

## Code

```{r}
#| eval: false
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```
:::

### 4.3.2 Building An Animated Bubble Plot

To create an animated population bubble plot, the [`transition_time()`](https://gganimate.com/reference/transition_time.html) function in the **gganimate** package is used to create transition through distinct states in time (i.e. Year), and the [`ease_aes()`](https://gganimate.com/reference/ease_aes.html) function in the **gganimate** package is used to control the easing of aesthetics. The default is 'linear'. Other easing methods are quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.

::: panel-tabset
## Plot

```{r}
#| echo: false 
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('linear')
```

## Code

```{r}
#| eval: false 
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('linear')
```
:::

## 4.4 Animated Data Visualisation: plotly

Both the `plot_ly()` and `ggplotly()` functions in the **plotly** package can be used to support key frame animations through the "frame" aesthetic argument. They also support the "ids" aesthetic argument to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).

### 4.4.1 Building An Animated Bubble Plot Using ggplotly() Method

An animated population bubble plot is created using the `ggplotly()` function to convert the static graphic object into an animated svg object.

::: panel-tabset
## Plot

```{r}
#| echo: false  
gg = ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young')

ggplotly(gg)
```

## Code

```{r}
#| eval: false
gg = ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young')

ggplotly(gg)
```
:::

Although the "show.legend" argument was set as FALSE, the legend still appeared on the plot. To overcome this problem, the `theme()` function with the "legend.position" argument set to none is used.

::: panel-tabset
## Plot

```{r}
#| echo: false   
gg = ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') + 
  theme(legend.position='none')

ggplotly(gg)
```

## Code

```{r}
#| eval: false
gg = ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') + 
  theme(legend.position='none')

ggplotly(gg)
```
:::

### 4.4.2 Building An Animated Bubble Plot Using plot_ly() Method

An animated population bubble plot is created using the `plot_ly()` function.

::: panel-tabset
## Plot

```{r}
#| echo: false 
bp = globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers') %>%
  layout(showlegend = FALSE)

bp
```

## Code

```{r}
#| eval: false
bp = globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers') %>%
  layout(showlegend = FALSE)

bp
```
:::

## 4.5 References

-   [gganimate](https://gganimate.com/articles/gganimate.html) and [example](https://rpubs.com/raymondteo/dataviz8).

-   [Building An Animation Step-by-Step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/).

-   [Creating A Composite gif with Multiple gganimate Panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/).

[**\~\~\~ End of Hands-on Exercise 3B \~\~\~**]{.smallcaps}
