---
title: "Hands-on Exercise 10"
date: "18 March 2024"
date-modified: "last-modified" #allows for updating to the latest date
format: html
execute: 
  echo: true #shows the code
  eval: true #shows the outcomes of the code
  warning: false #does not show the warnings
editor: visual
background-color: lightgrey;
font-family:  Palatino Linotype;
---

# 31 Information Dashboard Design

## 31.1 Overview and Learning Outcomes

This hands-on exercise is based on [Chapter 31](https://r4va.netlify.app/chap31) of the **R for Visual Analytics** book.

The learning outcomes are:

-   Create a bullet chart using the ggplot2 package.

-   Create sparklines using the ggplot2 package.

-   Build industry standard dashboard using R Shiny.

## 31.2 Getting Started

### 31.2.1 Installing and Loading Required Libraries

In this hands-on exercise, the following R packages are used:

-   [**tidyverse**](https://www.tidyverse.org/) (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;

-   [**lubridate**](https://lubridate.tidyverse.org/) for dealing with dates;

-   [**ggthemes**](https://ggplot2.tidyverse.org/reference/ggtheme.html) for extra themes, geoms, and scales for ggplot2;

-   [**gtExtras**](https://jthomasmock.github.io/gtExtras/) for additional helper functions to assist in creating beautiful tables with [**gt**](https://gt.rstudio.com/), a package specially designed for anyone to make wonderful-looking tables using the R programming language;

-   [**reactable**](https://glin.github.io/reactable/) for functions to create interactive data tables for R, based on the [React Table](https://github.com/tanstack/table/tree/v7) library and made with [reactR](https://github.com/react-R/reactR);

-   [**reactablefmtr**](https://kcuilla.github.io/reactablefmtr/) for various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes; and

-   [**RODBC**](https://cran.r-project.org/web/packages/RODBC/) for accessing databases.

The code chunk below uses the `p_load()` function in the **pacman** package to check if the packages are installed. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.

```{r}
pacman::p_load(tidyverse, lubridate,
               ggthemes, gtExtras,
               reactable, reactablefmtr,
               RODBC)
```

The **dataui** package for building interactive sparklines is also installed.

```{r}
remotes::install_github("timelyportfolio/dataui")
library(dataui)
```

### 31.2.2 Importing Data from Microsoft Access Database

The dataset for this hands-on exercise is imported into the R environment using the `odbcConnectAccess()` function in the [**RODBC**](https://cran.r-project.org/web/packages/RODBC/)package.

```{r}
#| eval: false
con = odbcConnectAccess2007('data/Coffee Chain.mdb')
coffeechain = sqlFetch(con, 'CoffeeChain Query')
write_rds(coffeechain, "data/CoffeeChain.rds")
odbcClose(con)
```

The data frame, `coffeechain`, has 19 columns and 4,248 rows. It is saved in the rds file format in imported into the R environment.

```{r}
coffeechain = read_rds("data/rds/CoffeeChain.rds")
```

### 31.2.3 Preparing Data

The Sales and Budgeted Sales are aggregated at the Product level using the `group_by()` and `summarise()` functions in the dplyr package.

```{r}
product = coffeechain %>%
  group_by(`Product`) %>%
  summarise(`target` = sum(`Budget Sales`),
            `current` = sum(`Sales`)) %>%
  ungroup()
```

## 31.3 Plotting Bullet Chart

A bullet chart is plotted using functions in the **ggplot2** package, i.e., `geom_col()` and `geom_errorbar()`.

```{r}
ggplot(product, aes(Product, current)) + 
  geom_col(aes(Product, max(target) * 1.01),
           fill="grey85", width=0.85) +
  geom_col(aes(Product, target * 0.75),
           fill="grey60", width=0.85) +
  geom_col(aes(Product, target * 0.5),
           fill="grey50", width=0.85) +
  geom_col(aes(Product, current), 
           width=0.35,
           fill = "black") + 
  geom_errorbar(aes(y = target,
                    x = Product, 
                    ymin = target,
                    ymax= target), 
                width = .4,
                colour = "red",
                size = 1) +
  coord_flip()
```

## 31.4 Plotting Sparklines Using ggplot2

To plot sparklines, the data is manipulated to generate a table containing the monthly sales values by product type.

```{r}
sales_report <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  mutate(Month = month(Date)) %>%
  group_by(Month, Product) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup() %>%
  select(Month, Product, Sales)
```

The minimum, maximum, end of month sales values as well as the 25th and 75th quantile values are then derived.

```{r}
mins = group_by(sales_report, Product) %>% 
  slice(which.min(Sales))

maxs = group_by(sales_report, Product) %>% 
  slice(which.max(Sales))

ends = group_by(sales_report, Product) %>% 
  filter(Month == max(Month))

quarts = sales_report %>%
  group_by(Product) %>%
  summarise(quart1 = quantile(Sales, 
                              0.25),
            quart2 = quantile(Sales, 
                              0.75)) %>%
  right_join(sales_report)
```

A sparklines graph is then plotted.

```{r}
ggplot(sales_report, aes(x=Month, y=Sales)) + 
  facet_grid(Product ~ ., scales = "free_y") + 
  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), 
              fill = 'grey90') +
  geom_line(size=0.3) +
  geom_point(data = mins, col = 'red') +
  geom_point(data = maxs, col = 'blue') +
  geom_text(data = mins, aes(label = Sales), vjust = -1) +
  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +
  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +
  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +
  expand_limits(x = max(sales_report$Month) + 
                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +
  scale_x_continuous(breaks = seq(1, 12, 1)) +
  scale_y_continuous(expand = c(0.1, 0)) +
  theme_tufte(base_size = 3, base_family = "Helvetica") +
  theme(axis.title=element_blank(), axis.text.y = element_blank(), 
        axis.ticks = element_blank(), strip.text = element_blank())
```

## 31.5 Static Information Dashboard Design: gt and gtExtras Packages

In this sub-section, a static information dashboard is created using the [**gt**](https://gt.rstudio.com/) and [**gtExtras**](https://jthomasmock.github.io/gtExtras/) packages.

### 31.5.1 Plotting A Simple Bullet Chart

A bullet chart using the `gt()` and `gt_plt_bullet()` functions in the **gt** and **gtExtras** packages respectively.

```{r}
product %>%
  gt::gt() %>%
  gt_plt_bullet(column = current, 
              target = target, 
              width = 60,
              palette = c("lightblue", 
                          "black")) %>%
  gt_theme_538()
```

### 31.5.2 Plotting Sparklines

The sales report of products by month for 2013 is extracted using the `mutate()`, `filter()`, `group_by()`, and `summarise()` functions in the dplyr package.

```{r}
report = coffeechain %>%
  mutate(Year = year(Date)) %>%
  filter(Year == "2013") %>%
  mutate (Month = month(Date, 
                        label = TRUE, 
                        abbr = TRUE)) %>%
  group_by(Product, Month) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup()
```

The `report` data frame is converted into list columns.

```{r}
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")
```

#### 31.5.2.1 Plotting Sales Report

The monthly sales is plotted as sparklines using the `gt()` and `gt_plt_sparkline()` functions in the **gt** and **gtExtras** packages respectively.

```{r}
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop") %>%
   gt() %>%
   gt_plt_sparkline('Monthly Sales',
                    same_limit = FALSE)
```

#### 31.5.2.2 Adding Statistics

The summary statistics are calculated using the `group_by()` and `summarise()` functions in the **dplyr** package, as well as the `gt()` and `fmt_number()` functions in the **gt** package.

```{r}
report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            ) %>%
  gt() %>%
  fmt_number(columns = 4,
    decimals = 2)
```

#### 31.5.2.3 Combining the data.frame

The derived statistics are then combined with the table using the `left_join()` function in the **dplyr** package.

```{r}
spark = report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")

sales = report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            )

sales_data = left_join(sales, spark)
```

#### 31.5.2.4 Plotting Updated data.table

The combined table is then plotted using the `gt()` and `gt_plt_sparkline()` functions in the **gt** and **gtExtras** packages respectively.

```{r}
sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales',
                   same_limit = FALSE)
```

#### 31.5.2.5 Combining Bullet Chart and Sparklines

The bullet chart and sparklines with summary statistics are then combined together using the `left_join()` function in the **dplyr** package.

```{r}
bullet = coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  group_by(`Product`) %>%
  summarise(`Target` = sum(`Budget Sales`),
            `Actual` = sum(`Sales`)) %>%
  ungroup() 

sales_data = sales_data %>%
  left_join(bullet)

sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales') %>%
  gt_plt_bullet(column = Actual, 
                target = Target, 
                width = 28,
                palette = c("lightblue", 
                          "black")) %>%
  gt_theme_538()
```

## 31.6 Interactive Information Dashboard Design: reactable and reactablefmtr Packages

In this sub-section, an interactive information dashboard is created using the **reactable** and **reactablefmtr** packages.

### 31.6.1 Plotting Interactive Sparklines

Similar to when using the **gtExtras** package, the list field is required when using the **reactablefmtr** package.

```{r}
report = report %>%
  group_by(Product) %>%
  summarize(`Monthly Sales` = list(Sales))
```

The `reactable()` function in the **reactable** package and the `react_sparkline()` function in the **reactablefmtr** package in the "cell" argument are then used to plot the sparklines.

```{r}
reactable(
  report,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report)
      )))
```

### 31.6.2 Changing Page Size

The default page size is 10. The default setting is changed to 13.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report)
    )
  )
)
```

### 31.6.3 Adding Points and Labels

The "highlight_points" argument is added to show the minimum and maximum value points, and the "label" argument is added to label the first and last values.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        labels = c("first", "last")
        )
    )
  )
)
```

### 31.6.4 Adding Reference Line

The "statline" argument is added to show the mean level.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        statline = "mean"
        )
    )
  )
)
```

### 31.6.5 Adding Bandline

The "bandline" argument can be added to show a band of range (instead of showing a single reference line).

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        line_width = 1,
        bandline = "innerquartiles",
        bandline_color = "green"
        )
    )
  )
)
```

### 31.6.6 Changing from Sparkline to Sparkbar

Instead of displaying the values as sparklines, they can also be displayed as sparkbars using the `react_sparkbar()` function in the **reactablefmtr** package in the "cell" argument.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkbar(
        report,
        highlight_bars = highlight_bars(
          min = "red", max = "blue"),
        bandline = "innerquartiles",
        statline = "mean")
    )
  )
)
```

[**\~\~\~ End of Hands-on Exercise 10 \~\~\~**]{.smallcaps}
