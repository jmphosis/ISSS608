[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "&lt;Placeholder&gt;"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "&lt;Placeholder&gt;"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 1 of the R for Visual Analytics book.\nThe learning outcomes are:\n\nLearn the basic principles and essential components of ggplot2;\nGain hands-on experience on using ggplot2 components to plot statistical graphics based on the principle of Layered Grammar of Graphics; and\nApply the essential graphical elements provided by ggplot2 to create elegant yet functional statistical graphics.\n\n\n\n\n\n\nThe code chunk below uses the p_load() function in the pacman package to check if the tidyverse packages are installed in the computer. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_csv() function in the readr package and stored as the R object, exam_data.\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nThe tibble data frame, exam_data, has 7 columns and 322 rows.\n\nIt consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.\nThe 7 variables/attributes are:\n\nCategorical: ID, CLASS, GENDER, and RACE.\nContinuous: MATHS, ENGLISH, and SCIENCE.\n\n\n\n\n\n\nThe ggplot2 package is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics.\nIt is part of the tidyverse family of packages, and is specially designed for visual exploration and communication.\n\n\nR Graphics is the core graphical functions in Base R. A comparison is made between R Graphics and ggplot by plotting a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nIn the above example, a relatively simple code chunk is used for R Graphics, while more details are added via ggplot2.\nSo why use ggplot2? According to the creator of tidyverse, Hadley Wickham:\n\n“The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.”\n\n\n\n\n\nIt is important to understand the principles of the Grammar of Graphics.\nThe Grammar of Graphics is a general scheme for data visualisation which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) through the book - The Grammar of Graphics, published by Springer. It is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, the Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in the Grammar of Graphics:\n\nGraphics is made up of distinct layers of grammatical elements.\nMeaningful plots is achieved through aesthetic mapping.\n\nSo why is it important to have a good grasp of the grammar of graphics?\n\nAllows us to gain insights into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox, 1978).\nProvides a strong foundation for understanding a diverse range of graphics.\nImpart better understanding of what well-formed or correct graphics could look like (although there will still be many grammatically correct but nonsensical graphics).\n\n\n\nThe seven grammars of ggplot2 are:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, e.g., position, colours, size, shape, transparency.\nGeometrics: The visual elements used for the data, e.g., point, bar, line.\nFacets split the data into subsets to create multiple variations of the same graph, e.g., paneling, multiple plots.\nStatistics refer to statistical transformations that summarise data e.g., mean, confidence intervals.\nCoordinates refer to coordinate systems that define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, e.g., main title, sub-title, y-aixs title, legend, background.\n\n\n\n\n\nThe ggplot() function in the ggplot2 package is used to initiate a ggplot object. The “data” argument defines the dataset to be used for plotting the graphic.\nIf the dataset is not already a data frame, it will be converted to one via the fortify() function in the ggplot2 package.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\nAesthetic mappings take attributes of the data and and use them to influence visual characteristics, e.g., position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function. Each geom layer can have its own aesthetic specification.\nThe code chunk below adds the aesthetic element into the plot. The x-axis and its label are added to the plot.\n\nggplot(data = exam_data, \n       aes(x = MATHS))\n\n\n\n\n\n\n\nThe geometric objects are the actual marks put on the plot. A plot must have at least one geom, but may have more.\nSome examples of geom:\n\ngeom_point() for drawing individual points (e.g., a scatter plot);\ngeom_line() for drawing lines (e.g., for a line chart);\ngeom_smooth() for drawing smoothed lines (e.g., for simple trends or approximations);\ngeom_bar() for drawing bars (e.g., for bar chart);\ngeom_histogram() for drawing binned values (e.g. a histogram);\ngeom_polygon() for drawing arbitrary shapes; and\ngeom_map() for drawing polygons in the shape of a map. Can use the map_data() function to access the data used for these maps.\n\n\n\nA bar chat is plotted using the geom_bar() function.\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\nObservation: From the bar chart, we can see that most of the students are Chinese, followed by Malay. A minority of students are Indian or other races.\n\n\n\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and the dots are stacked, with each dot representing one observation.\nA dot plot is plotted using the geom_dotplot() function.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\nThe y-axis for the plot above is misleading. Hence, the scale_y_continuous() function in the ggplot2 package is used to turn off the y-axis. Also, the “binwidth” argument is used to change the bin width to 2.5.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\n\n\nObservation: From the dot plot, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50.\n\n\n\n\nThe geom_histogram() function is used to create a simple histogram using the values in the “MATHS” attribute of the data set.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()    \n\n\n\n\n\nObservation: From the histogram, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50.\n\n\n\n\nSome customisations are done to the histogram:\n\nThe “bins” argument is used to change the number of bins from the default 30 to 20;\nThe “fill” argument is used to fill the bars with light blue; and\nThe “colour” argument is used to change the outline of the bars to black.\n\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 colour = \"black\",      \n                 fill = \"light blue\")\n\n\n\n\n\nObservation: From the histogram, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50. Also, we can also see more clearly that the score range with the most students is around 75.\n\n\n\n\nThe fill of the histogram is changed using the sub-group of the aesthetic() function, which divides the bars by the “GENDER” attribute.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\")\n\n\n\n\n\nObservation: From the histogram, we can see the distributions of math scores for female and male students. There appears to be less female students who score below 50 compared to male students who score below 50.\n\n\n\n\nThe geom_density() function is used to compute and plot the kernel density estimate, which is a smoothed version of a histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\nObservation: From the kernel density estimate plot, we can see the most ‘dense’/common score is actually slightly above 75.\n\nThe kernel density estimate is then plotted by the “GENDER” attribute using the “colour” argument.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\nObservation: From the kernel density estimate plot, we can see more clearly that there are more female students than male students who score above 50. Conversely, there are more male students than female students who score below 50.\n\nA similar plot can be produced using the “fill” argument.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER,\n           alpha = 0.1)) +\n  geom_density()\n\n\n\n\n\n\n\nThe geom_boxplot() function is used to display a continuous value list. It visualises five summary statistics (minimum, first quartile, median, third quartile, and maximum) and any outliers.\n\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()\n\n\n\n\n\nObservation: From the boxplot, we can see that the median scores for female students and male students are rather similar. There are also outliers for both genders in the lower score range.\n\nThe “notch” argument is used to help visually assess whether the median of distributions differ. If the notches do not overlap, it means that the medians are different.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\nObservation: From the notched plot, we can see clearly that the median scores for female students and male students are different.\n\n\n\n\nThe geom_violin() function is designed for creating a violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they are placed side by side.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\nObservation: From the violin plot, we can see clearly that the distribution of the scores by gender is relatively similarly. A key difference is that the lower scores in the distribution for male students are lower than that for female students.\n\n\n\n\nThe geom_point() function is used to create a scatterplot. The “MATHS” and “ENGLISH” attributes of the dataset are plotted.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point()            \n\n\n\n\n\nObservation: From the scatterplot, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores.\n\n\n\n\nThe code chunk below plots the data points on boxplots and scatterplots using both the geom_boxplot() and geom_point() functions.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position = \"jitter\",\n             size = 0.5)\n\n\n\n\n\nNote: The “position” argument is used to randomly vary the location of the dots, which otherwise would have lined up in the middle of the boxplot.\n\n\n\n\n\nThe statistics functions statistically transform data, usually into some form of summary - e.g., mean, confidence limit.\nThere are two ways to use these functions:\n\nAdd a stat() function and override the default geom, or\nAdd a geom() function and override the default stat.\n\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nThe mean values are added using the stat_summary() function in the ggplot2 package. This overrides the default geom.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour = \"red\",        \n               size = 4)               \n\n\n\n\n\nNote: The “fun” argument is used to insert the mean value as a dot instead of the “fun.y” argument which has been deprecated.\n\n\nObservation: We can see that the mean scores for both gender are below their respective median scores, indicating left-skewed distributions of scores.\n\n\n\n\nThe mean values are added using the geom_point() function. This overrides the default stat.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",        \n             fun = \"mean\",           \n             colour = \"red\",          \n             size = 4)          \n\n\n\n\n\nNote: The “fun” argument is used to insert the mean value as a dot instead of the “fun.y” argument which has been deprecated.\n\n\nObservation: Similarly, we can see that the mean scores for both gender are below their respective median scores, indicating left-skewed distributions of scores.\n\n\n\n\nReverting to the scatterplot on the distribution of the “MATHS” and “ENGLISH” attributes (see section 1.7.9), the interpretability of the plot can be improved with the addition of a best fit curve. The geom_smooth() function is used.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth = 0.5)\n\n\n\n\n\nNote: The “linewidth” argument is used to indicate the width of the grey shaded region of the best fit curve instead of the “size” argument which has been deprecated.\n\n\nObservation: From the best fit curve, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores. Also, there also appears to be an inflection point around Maths score 75 and English score 70.\n\nThe default method is loess, which draws a smooth curve. If the “method” argument is set to “lm”, the plot produces a linear line based on a linear model.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5)\n\n\n\n\n\nNote: The “linewidth” argument is used to indicate the width of the grey shaded region of the best fit curve instead of the “size” argument which has been deprecated.\n\n\n\n\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the dataset. They are an alternative to aesthetics for displaying additional discrete variables. The ggplot2 package supports two types of facets, namely: facet_grid() and facet_wrap().\n\n\nThe facet_wrap() function wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than the facet_grid() function because most displays are roughly rectangular.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\nObservation: Based on the trellis plot, we can see that there are differences in the Maths scores between different classes. Students from classes 3A-F do better than students from classes 3G-I.\n\n\n\n\nThe facet_grid() function forms a matrix of panels defined by row and column facetting variables. It is most useful when there are two discrete variables, and all combinations of the variables exist in the dataset.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\nObservation: Based on the trellis plot, we can also see that there are differences in the Maths scores between different classes. Students from classes 3A-F do better than students from classes 3G-I. However, this plot is more difficult to interpret than the one using the facet_wrap() function.\n\n\n\n\n\nThe coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian() - the default cartesian coordinate systems, where x and y values can be specified (e.g., allows zoom in or out).\ncoord_flip() - a cartesian system with the x and y axes flipped.\ncoord_fixed() - a cartesian system with a “fixed” aspect ratio (e.g., 1.78 for a widescreen” plot).\ncoord_quickmap() - a coordinate system that approximates a good aspect ratio for maps.\n\n\n\nBy default, the geom_bar() function produces a bar chart in vertical form. This can be switched using the coord_flip() function.\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\nObservation: A plot using horizontal bars may be useful when the labels for the vertical axis are long words.\n\n\n\n\nThe scatterplot in section 1.7.9 is slightly misleading because the y-axis and x-axis range are not equal. This can be corrected using the coord_caretesian() function.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\n\n\n\n\nObservation: From the best fit curve, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores. Also, the line is gentler than a y = x line, which means that every one unit increment in Maths scores leads to a lesser than one unit increment in English scores.\n\n\n\n\n\nThemes control elements of the graph that are not related to the data, such as:\n\nBackground colour;\nSize of fonts;\nGrid lines; and\nColour of labels.\n\nThe built-in themes include:\n\ntheme_grey() (default);\ntheme_bw(); and\ntheme_classic().\n\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\nThe default (theme_grey()), theme_bw(),theme_classic(), andtheme_minimal()` functions are used for the horizontal bar charts below.\n\nDefault (theme_grey)theme_bwtheme_classictheme_minimal\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale\n\n~~~ End of Hands-on Exercise 1 ~~~"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608: Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications!\nIn this webpage, I am going to share my visual analytics learning journey.\n\n\n\n\n\nCredit: Prima Consulting UK"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses the p_load() function in the pacman package to check if the tidyverse packages are installed in the computer. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_csv() function in the readr package and stored as the R object, exam_data.\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nThe tibble data frame, exam_data, has 7 columns and 322 rows.\n\nIt consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.\nThe 7 variables/attributes are:\n\nCategorical: ID, CLASS, GENDER, and RACE.\nContinuous: MATHS, ENGLISH, and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#overview-and-learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#overview-and-learning-outcomes",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 1 of the R for Visual Analytics book.\nThe learning outcomes are:\n\nLearn the basic principles and essential components of ggplot2;\nGain hands-on experience on using ggplot2 components to plot statistical graphics based on the principle of Layered Grammar of Graphics; and\nApply the essential graphical elements provided by ggplot2 to create elegant yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The ggplot2 package is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics.\nIt is part of the tidyverse family of packages, and is specially designed for visual exploration and communication.\n\n\nR Graphics is the core graphical functions in Base R. A comparison is made between R Graphics and ggplot by plotting a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nIn the above example, a relatively simple code chunk is used for R Graphics, while more details are added via ggplot2.\nSo why use ggplot2? According to the creator of tidyverse, Hadley Wickham:\n\n“The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.”"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "It is important to understand the principles of the Grammar of Graphics.\nThe Grammar of Graphics is a general scheme for data visualisation which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) through the book - The Grammar of Graphics, published by Springer. It is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, the Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in the Grammar of Graphics:\n\nGraphics is made up of distinct layers of grammatical elements.\nMeaningful plots is achieved through aesthetic mapping.\n\nSo why is it important to have a good grasp of the grammar of graphics?\n\nAllows us to gain insights into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox, 1978).\nProvides a strong foundation for understanding a diverse range of graphics.\nImpart better understanding of what well-formed or correct graphics could look like (although there will still be many grammatically correct but nonsensical graphics).\n\n\n\nThe seven grammars of ggplot2 are:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, e.g., position, colours, size, shape, transparency.\nGeometrics: The visual elements used for the data, e.g., point, bar, line.\nFacets split the data into subsets to create multiple variations of the same graph, e.g., paneling, multiple plots.\nStatistics refer to statistical transformations that summarise data e.g., mean, confidence intervals.\nCoordinates refer to coordinate systems that define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, e.g., main title, sub-title, y-aixs title, legend, background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The ggplot() function in the ggplot2 package is used to initiate a ggplot object. The “data” argument defines the dataset to be used for plotting the graphic.\nIf the dataset is not already a data frame, it will be converted to one via the fortify() function in the ggplot2 package.\n\nggplot(data=exam_data)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Aesthetic mappings take attributes of the data and and use them to influence visual characteristics, e.g., position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function. Each geom layer can have its own aesthetic specification.\nThe code chunk below adds the aesthetic element into the plot. The x-axis and its label are added to the plot.\n\nggplot(data = exam_data, \n       aes(x = MATHS))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The geometric objects are the actual marks put on the plot. A plot must have at least one geom, but may have more.\nSome examples of geom:\n\ngeom_point() for drawing individual points (e.g., a scatter plot);\ngeom_line() for drawing lines (e.g., for a line chart);\ngeom_smooth() for drawing smoothed lines (e.g., for simple trends or approximations);\ngeom_bar() for drawing bars (e.g., for bar chart);\ngeom_histogram() for drawing binned values (e.g. a histogram);\ngeom_polygon() for drawing arbitrary shapes; and\ngeom_map() for drawing polygons in the shape of a map. Can use the map_data() function to access the data used for these maps.\n\n\n\nA bar chat is plotted using the geom_bar() function.\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\nObservation: From the bar chart, we can see that most of the students are Chinese, followed by Malay. A minority of students are Indian or other races.\n\n\n\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and the dots are stacked, with each dot representing one observation.\nA dot plot is plotted using the geom_dotplot() function.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\nThe y-axis for the plot above is misleading. Hence, the scale_y_continuous() function in the ggplot2 package is used to turn off the y-axis. Also, the “binwidth” argument is used to change the bin width to 2.5.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\n\n\nObservation: From the dot plot, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50.\n\n\n\n\nThe geom_histogram() function is used to create a simple histogram using the values in the “MATHS” attribute of the data set.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()    \n\n\n\n\n\nObservation: From the histogram, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50.\n\n\n\n\nSome customisations are done to the histogram:\n\nThe “bins” argument is used to change the number of bins from the default 30 to 20;\nThe “fill” argument is used to fill the bars with light blue; and\nThe “colour” argument is used to change the outline of the bars to black.\n\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 colour = \"black\",      \n                 fill = \"light blue\")\n\n\n\n\n\nObservation: From the histogram, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50. Also, we can also see more clearly that the score range with the most students is around 75.\n\n\n\n\nThe fill of the histogram is changed using the sub-group of the aesthetic() function, which divides the bars by the “GENDER” attribute.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\")\n\n\n\n\n\nObservation: From the histogram, we can see the distributions of math scores for female and male students. There appears to be less female students who score below 50 compared to male students who score below 50.\n\n\n\n\nThe geom_density() function is used to compute and plot the kernel density estimate, which is a smoothed version of a histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\nObservation: From the kernel density estimate plot, we can see the most ‘dense’/common score is actually slightly above 75.\n\nThe kernel density estimate is then plotted by the “GENDER” attribute using the “colour” argument.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\nObservation: From the kernel density estimate plot, we can see more clearly that there are more female students than male students who score above 50. Conversely, there are more male students than female students who score below 50.\n\nA similar plot can be produced using the “fill” argument.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER,\n           alpha = 0.1)) +\n  geom_density()\n\n\n\n\n\n\n\nThe geom_boxplot() function is used to display a continuous value list. It visualises five summary statistics (minimum, first quartile, median, third quartile, and maximum) and any outliers.\n\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()\n\n\n\n\n\nObservation: From the boxplot, we can see that the median scores for female students and male students are rather similar. There are also outliers for both genders in the lower score range.\n\nThe “notch” argument is used to help visually assess whether the median of distributions differ. If the notches do not overlap, it means that the medians are different.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\nObservation: From the notched plot, we can see clearly that the median scores for female students and male students are different.\n\n\n\n\nThe geom_violin() function is designed for creating a violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they are placed side by side.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\nObservation: From the violin plot, we can see clearly that the distribution of the scores by gender is relatively similarly. A key difference is that the lower scores in the distribution for male students are lower than that for female students.\n\n\n\n\nThe geom_point() function is used to create a scatterplot. The “MATHS” and “ENGLISH” attributes of the dataset are plotted.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point()            \n\n\n\n\n\nObservation: From the scatterplot, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores.\n\n\n\n\nThe code chunk below plots the data points on boxplots and scatterplots using both the geom_boxplot() and geom_point() functions.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position = \"jitter\",\n             size = 0.5)\n\n\n\n\n\nNote: The “position” argument is used to randomly vary the location of the dots, which otherwise would have lined up in the middle of the boxplot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The statistics functions statistically transform data, usually into some form of summary - e.g., mean, confidence limit.\nThere are two ways to use these functions:\n\nAdd a stat() function and override the default geom, or\nAdd a geom() function and override the default stat.\n\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nThe mean values are added using the stat_summary() function in the ggplot2 package. This overrides the default geom.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour = \"red\",        \n               size = 4)               \n\n\n\n\n\nNote: The “fun” argument is used to insert the mean value as a dot instead of the “fun.y” argument which has been deprecated.\n\n\nObservation: We can see that the mean scores for both gender are below their respective median scores, indicating left-skewed distributions of scores.\n\n\n\n\nThe mean values are added using the geom_point() function. This overrides the default stat.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",        \n             fun = \"mean\",           \n             colour = \"red\",          \n             size = 4)          \n\n\n\n\n\nNote: The “fun” argument is used to insert the mean value as a dot instead of the “fun.y” argument which has been deprecated.\n\n\nObservation: Similarly, we can see that the mean scores for both gender are below their respective median scores, indicating left-skewed distributions of scores.\n\n\n\n\nReverting to the scatterplot on the distribution of the “MATHS” and “ENGLISH” attributes (see section 1.7.9), the interpretability of the plot can be improved with the addition of a best fit curve. The geom_smooth() function is used.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth = 0.5)\n\n\n\n\n\nNote: The “linewidth” argument is used to indicate the width of the grey shaded region of the best fit curve instead of the “size” argument which has been deprecated.\n\n\nObservation: From the best fit curve, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores. Also, there also appears to be an inflection point around Maths score 75 and English score 70.\n\nThe default method is loess, which draws a smooth curve. If the “method” argument is set to “lm”, the plot produces a linear line based on a linear model.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5)\n\n\n\n\n\nNote: The “linewidth” argument is used to indicate the width of the grey shaded region of the best fit curve instead of the “size” argument which has been deprecated."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the dataset. They are an alternative to aesthetics for displaying additional discrete variables. The ggplot2 package supports two types of facets, namely: facet_grid() and facet_wrap().\n\n\nThe facet_wrap() function wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than the facet_grid() function because most displays are roughly rectangular.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\nObservation: Based on the trellis plot, we can see that there are differences in the Maths scores between different classes. Students from classes 3A-F do better than students from classes 3G-I.\n\n\n\n\nThe facet_grid() function forms a matrix of panels defined by row and column facetting variables. It is most useful when there are two discrete variables, and all combinations of the variables exist in the dataset.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\nObservation: Based on the trellis plot, we can also see that there are differences in the Maths scores between different classes. Students from classes 3A-F do better than students from classes 3G-I. However, this plot is more difficult to interpret than the one using the facet_wrap() function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian() - the default cartesian coordinate systems, where x and y values can be specified (e.g., allows zoom in or out).\ncoord_flip() - a cartesian system with the x and y axes flipped.\ncoord_fixed() - a cartesian system with a “fixed” aspect ratio (e.g., 1.78 for a widescreen” plot).\ncoord_quickmap() - a coordinate system that approximates a good aspect ratio for maps.\n\n\n\nBy default, the geom_bar() function produces a bar chart in vertical form. This can be switched using the coord_flip() function.\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\nObservation: A plot using horizontal bars may be useful when the labels for the vertical axis are long words.\n\n\n\n\nThe scatterplot in section 1.7.9 is slightly misleading because the y-axis and x-axis range are not equal. This can be corrected using the coord_caretesian() function.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\n\n\n\n\nObservation: From the best fit curve, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores. Also, the line is gentler than a y = x line, which means that every one unit increment in Maths scores leads to a lesser than one unit increment in English scores."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Themes control elements of the graph that are not related to the data, such as:\n\nBackground colour;\nSize of fonts;\nGrid lines; and\nColour of labels.\n\nThe built-in themes include:\n\ntheme_grey() (default);\ntheme_bw(); and\ntheme_classic().\n\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\nThe default (theme_grey()), theme_bw(),theme_classic(), andtheme_minimal()` functions are used for the horizontal bar charts below.\n\nDefault (theme_grey)theme_bwtheme_classictheme_minimal\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#references",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Hadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale\n\n~~~ End of Hands-on Exercise 1 ~~~"
  }
]