[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "&lt;Placeholder&gt;"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "This is the in-class exercise 1.\nThe learning outcomes are to load the relevant R packages and import the required dataset into the environment.\n\n\n\nIn this in-class exercise, two R packages will be used. They are:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data; and\nhaven for importing SAS files.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed in the computer. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse, haven)\n\n\n\n\nThe dataset used in this in-class exercise is the PISA 2022 student questionnaire data file, which is in the SAS file format. It is imported into the R environment using the read_sas() function in the havenpackage and stored as the R object, stu_qqq.\n\nstu_qqq = read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nThe tibble data frame, stu_qqq, has 1,279 columns (variables) and 613,7 rows (observations).\nThere are 6,606 rows with the country code “SGP”, which represents Singapore. The filter() function in the dplyr package is used to obtain these rows, and stored as the R object, stu_qqq_SG.\n\nstu_qqq_SG = stu_qqq %&gt;% filter(CNT == \"SGP\")\n\nThe tibble data frame, stu_qqq_SG, is then saved in the rds file format and imported into the R environment.\n\nwrite_rds(stu_qqq_SG, \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG = read_rds(\"data/stu_qqq_SG.rds\")\n\n~~~ End of In-class Exercise 1 ~~~"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#overview-and-learning-outcomes",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#overview-and-learning-outcomes",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "This is the in-class exercise 1.\nThe learning outcomes are to load the relevant R packages and import the required dataset into the environment."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this in-class exercise, two R packages will be used. They are:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data; and\nhaven for importing SAS files.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed in the computer. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-data",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "The dataset used in this in-class exercise is the PISA 2022 student questionnaire data file, which is in the SAS file format. It is imported into the R environment using the read_sas() function in the havenpackage and stored as the R object, stu_qqq.\n\nstu_qqq = read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nThe tibble data frame, stu_qqq, has 1,279 columns (variables) and 613,7 rows (observations).\nThere are 6,606 rows with the country code “SGP”, which represents Singapore. The filter() function in the dplyr package is used to obtain these rows, and stored as the R object, stu_qqq_SG.\n\nstu_qqq_SG = stu_qqq %&gt;% filter(CNT == \"SGP\")\n\nThe tibble data frame, stu_qqq_SG, is then saved in the rds file format and imported into the R environment.\n\nwrite_rds(stu_qqq_SG, \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG = read_rds(\"data/stu_qqq_SG.rds\")\n\n~~~ End of In-class Exercise 1 ~~~"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 1 of the R for Visual Analytics book.\nThe learning outcomes are:\n\nLearn the basic principles and essential components of ggplot2;\nGain hands-on experience on using ggplot2 components to plot statistical graphics based on the principle of Layered Grammar of Graphics; and\nApply the essential graphical elements provided by ggplot2 to create elegant yet functional statistical graphics.\n\n\n\n\n\n\nThe code chunk below uses the p_load() function in the pacman package to check if the tidyverse packages are installed in the computer. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_csv() function in the readr package and stored as the R object, exam_data.\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nThe tibble data frame, exam_data, has 7 columns and 322 rows.\n\nIt consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.\nThe 7 variables/attributes are:\n\nCategorical: ID, CLASS, GENDER, and RACE.\nContinuous: MATHS, ENGLISH, and SCIENCE.\n\n\n\n\n\n\nThe ggplot2 package is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics.\nIt is part of the tidyverse family of packages, and is specially designed for visual exploration and communication.\n\n\nR Graphics is the core graphical functions in Base R. A comparison is made between R Graphics and ggplot by plotting a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nIn the above example, a relatively simple code chunk is used for R Graphics, while more details are added via ggplot2.\nSo why use ggplot2? According to the creator of tidyverse, Hadley Wickham:\n\n“The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.”\n\n\n\n\n\nIt is important to understand the principles of the Grammar of Graphics.\nThe Grammar of Graphics is a general scheme for data visualisation which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) through the book - The Grammar of Graphics, published by Springer. It is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, the Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in the Grammar of Graphics:\n\nGraphics is made up of distinct layers of grammatical elements.\nMeaningful plots is achieved through aesthetic mapping.\n\nSo why is it important to have a good grasp of the grammar of graphics?\n\nAllows us to gain insights into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox, 1978).\nProvides a strong foundation for understanding a diverse range of graphics.\nImpart better understanding of what well-formed or correct graphics could look like (although there will still be many grammatically correct but nonsensical graphics).\n\n\n\nThe seven grammars of ggplot2 are:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, e.g., position, colours, size, shape, transparency.\nGeometrics: The visual elements used for the data, e.g., point, bar, line.\nFacets split the data into subsets to create multiple variations of the same graph, e.g., paneling, multiple plots.\nStatistics refer to statistical transformations that summarise data e.g., mean, confidence intervals.\nCoordinates refer to coordinate systems that define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, e.g., main title, sub-title, y-aixs title, legend, background.\n\n\n\n\n\nThe ggplot() function in the ggplot2 package is used to initiate a ggplot object. The “data” argument defines the dataset to be used for plotting the graphic.\nIf the dataset is not already a data frame, it will be converted to one via the fortify() function in the ggplot2 package.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\nAesthetic mappings take attributes of the data and and use them to influence visual characteristics, e.g., position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function. Each geom layer can have its own aesthetic specification.\nThe code chunk below adds the aesthetic element into the plot. The x-axis and its label are added to the plot.\n\nggplot(data = exam_data, \n       aes(x = MATHS))\n\n\n\n\n\n\n\nThe geometric objects are the actual marks put on the plot. A plot must have at least one geom, but may have more.\nSome examples of geom:\n\ngeom_point() for drawing individual points (e.g., a scatter plot);\ngeom_line() for drawing lines (e.g., for a line chart);\ngeom_smooth() for drawing smoothed lines (e.g., for simple trends or approximations);\ngeom_bar() for drawing bars (e.g., for bar chart);\ngeom_histogram() for drawing binned values (e.g. a histogram);\ngeom_polygon() for drawing arbitrary shapes; and\ngeom_map() for drawing polygons in the shape of a map. Can use the map_data() function to access the data used for these maps.\n\n\n\nA bar chat is plotted using the geom_bar() function.\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\nObservation: From the bar chart, we can see that most of the students are Chinese, followed by Malay. A minority of students are Indian or other races.\n\n\n\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and the dots are stacked, with each dot representing one observation.\nA dot plot is plotted using the geom_dotplot() function.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\nThe y-axis for the plot above is misleading. Hence, the scale_y_continuous() function in the ggplot2 package is used to turn off the y-axis. Also, the “binwidth” argument is used to change the bin width to 2.5.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\n\n\nObservation: From the dot plot, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50.\n\n\n\n\nThe geom_histogram() function is used to create a simple histogram using the values in the “MATHS” attribute of the data set.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()    \n\n\n\n\n\nObservation: From the histogram, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50.\n\n\n\n\nSome customisations are done to the histogram:\n\nThe “bins” argument is used to change the number of bins from the default 30 to 20;\nThe “fill” argument is used to fill the bars with light blue; and\nThe “colour” argument is used to change the outline of the bars to black.\n\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 colour = \"black\",      \n                 fill = \"light blue\")\n\n\n\n\n\nObservation: From the histogram, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50. Also, we can also see more clearly that the score range with the most students is around 75.\n\n\n\n\nThe fill of the histogram is changed using the sub-group of the aesthetic() function, which divides the bars by the “GENDER” attribute.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\")\n\n\n\n\n\nObservation: From the histogram, we can see the distributions of math scores for female and male students. There appears to be less female students who score below 50 compared to male students who score below 50.\n\n\n\n\nThe geom_density() function is used to compute and plot the kernel density estimate, which is a smoothed version of a histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\nObservation: From the kernel density estimate plot, we can see the most ‘dense’/common score is actually slightly above 75.\n\nThe kernel density estimate is then plotted by the “GENDER” attribute using the “colour” argument.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\nObservation: From the kernel density estimate plot, we can see more clearly that there are more female students than male students who score above 50. Conversely, there are more male students than female students who score below 50.\n\nA similar plot can be produced using the “fill” argument.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER,\n           alpha = 0.1)) +\n  geom_density()\n\n\n\n\n\n\n\nThe geom_boxplot() function is used to display a continuous value list. It visualises five summary statistics (minimum, first quartile, median, third quartile, and maximum) and any outliers.\n\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()\n\n\n\n\n\nObservation: From the boxplot, we can see that the median scores for female students and male students are rather similar. There are also outliers for both genders in the lower score range.\n\nThe “notch” argument is used to help visually assess whether the median of distributions differ. If the notches do not overlap, it means that the medians are different.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\nObservation: From the notched plot, we can see clearly that the median scores for female students and male students are different.\n\n\n\n\nThe geom_violin() function is designed for creating a violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they are placed side by side.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\nObservation: From the violin plot, we can see clearly that the distribution of the scores by gender is relatively similarly. A key difference is that the lower scores in the distribution for male students are lower than that for female students.\n\n\n\n\nThe geom_point() function is used to create a scatterplot. The “MATHS” and “ENGLISH” attributes of the dataset are plotted.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point()            \n\n\n\n\n\nObservation: From the scatterplot, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores.\n\n\n\n\nThe code chunk below plots the data points on boxplots and scatterplots using both the geom_boxplot() and geom_point() functions.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position = \"jitter\",\n             size = 0.5)\n\n\n\n\n\nNote: The “position” argument is used to randomly vary the location of the dots, which otherwise would have lined up in the middle of the boxplot.\n\n\n\n\n\nThe statistics functions statistically transform data, usually into some form of summary - e.g., mean, confidence limit.\nThere are two ways to use these functions:\n\nAdd a stat() function and override the default geom, or\nAdd a geom() function and override the default stat.\n\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nThe mean values are added using the stat_summary() function in the ggplot2 package. This overrides the default geom.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour = \"red\",        \n               size = 4)               \n\n\n\n\n\nNote: The “fun” argument is used to insert the mean value as a dot instead of the “fun.y” argument which has been deprecated.\n\n\nObservation: We can see that the mean scores for both gender are below their respective median scores, indicating left-skewed distributions of scores.\n\n\n\n\nThe mean values are added using the geom_point() function. This overrides the default stat.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",        \n             fun = \"mean\",           \n             colour = \"red\",          \n             size = 4)          \n\n\n\n\n\nNote: The “fun” argument is used to insert the mean value as a dot instead of the “fun.y” argument which has been deprecated.\n\n\nObservation: Similarly, we can see that the mean scores for both gender are below their respective median scores, indicating left-skewed distributions of scores.\n\n\n\n\nReverting to the scatterplot on the distribution of the “MATHS” and “ENGLISH” attributes (see section 1.7.9), the interpretability of the plot can be improved with the addition of a best fit curve. The geom_smooth() function is used.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth = 0.5)\n\n\n\n\n\nNote: The “linewidth” argument is used to indicate the width of the grey shaded region of the best fit curve instead of the “size” argument which has been deprecated.\n\n\nObservation: From the best fit curve, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores. Also, there also appears to be an inflection point around Maths score 75 and English score 70.\n\nThe default method is loess, which draws a smooth curve. If the “method” argument is set to “lm”, the plot produces a linear line based on a linear model.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5)\n\n\n\n\n\nNote: The “linewidth” argument is used to indicate the width of the grey shaded region of the best fit curve instead of the “size” argument which has been deprecated.\n\n\n\n\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the dataset. They are an alternative to aesthetics for displaying additional discrete variables. The ggplot2 package supports two types of facets, namely: facet_grid() and facet_wrap().\n\n\nThe facet_wrap() function wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than the facet_grid() function because most displays are roughly rectangular.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\nObservation: Based on the trellis plot, we can see that there are differences in the Maths scores between different classes. Students from classes 3A-F do better than students from classes 3G-I.\n\n\n\n\nThe facet_grid() function forms a matrix of panels defined by row and column facetting variables. It is most useful when there are two discrete variables, and all combinations of the variables exist in the dataset.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\nObservation: Based on the trellis plot, we can also see that there are differences in the Maths scores between different classes. Students from classes 3A-F do better than students from classes 3G-I. However, this plot is more difficult to interpret than the one using the facet_wrap() function.\n\n\n\n\n\nThe coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian() - the default cartesian coordinate systems, where x and y values can be specified (e.g., allows zoom in or out).\ncoord_flip() - a cartesian system with the x and y axes flipped.\ncoord_fixed() - a cartesian system with a “fixed” aspect ratio (e.g., 1.78 for a widescreen” plot).\ncoord_quickmap() - a coordinate system that approximates a good aspect ratio for maps.\n\n\n\nBy default, the geom_bar() function produces a bar chart in vertical form. This can be switched using the coord_flip() function.\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\nObservation: A plot using horizontal bars may be useful when the labels for the vertical axis are long words.\n\n\n\n\nThe scatterplot in section 1.7.9 is slightly misleading because the y-axis and x-axis range are not equal. This can be corrected using the coord_caretesian() function.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\n\n\n\n\nObservation: From the best fit curve, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores. Also, the line is gentler than a y = x line, which means that every one unit increment in Maths scores leads to a lesser than one unit increment in English scores.\n\n\n\n\n\nThemes control elements of the graph that are not related to the data, such as:\n\nBackground colour;\nSize of fonts;\nGrid lines; and\nColour of labels.\n\nThe built-in themes include:\n\ntheme_grey() (default);\ntheme_bw(); and\ntheme_classic().\n\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\nThe default (theme_grey()), theme_bw(),theme_classic(), andtheme_minimal()` functions are used for the horizontal bar charts below.\n\nDefault (theme_grey)theme_bwtheme_classictheme_minimal\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version.\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale\n\n~~~ End of Hands-on Exercise 1 ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#overview-and-learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#overview-and-learning-outcomes",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 1 of the R for Visual Analytics book.\nThe learning outcomes are:\n\nLearn the basic principles and essential components of ggplot2;\nGain hands-on experience on using ggplot2 components to plot statistical graphics based on the principle of Layered Grammar of Graphics; and\nApply the essential graphical elements provided by ggplot2 to create elegant yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses the p_load() function in the pacman package to check if the tidyverse packages are installed in the computer. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_csv() function in the readr package and stored as the R object, exam_data.\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nThe tibble data frame, exam_data, has 7 columns and 322 rows.\n\nIt consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.\nThe 7 variables/attributes are:\n\nCategorical: ID, CLASS, GENDER, and RACE.\nContinuous: MATHS, ENGLISH, and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The ggplot2 package is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics.\nIt is part of the tidyverse family of packages, and is specially designed for visual exploration and communication.\n\n\nR Graphics is the core graphical functions in Base R. A comparison is made between R Graphics and ggplot by plotting a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nIn the above example, a relatively simple code chunk is used for R Graphics, while more details are added via ggplot2.\nSo why use ggplot2? According to the creator of tidyverse, Hadley Wickham:\n\n“The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.”"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "It is important to understand the principles of the Grammar of Graphics.\nThe Grammar of Graphics is a general scheme for data visualisation which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) through the book - The Grammar of Graphics, published by Springer. It is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, the Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in the Grammar of Graphics:\n\nGraphics is made up of distinct layers of grammatical elements.\nMeaningful plots is achieved through aesthetic mapping.\n\nSo why is it important to have a good grasp of the grammar of graphics?\n\nAllows us to gain insights into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox, 1978).\nProvides a strong foundation for understanding a diverse range of graphics.\nImpart better understanding of what well-formed or correct graphics could look like (although there will still be many grammatically correct but nonsensical graphics).\n\n\n\nThe seven grammars of ggplot2 are:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, e.g., position, colours, size, shape, transparency.\nGeometrics: The visual elements used for the data, e.g., point, bar, line.\nFacets split the data into subsets to create multiple variations of the same graph, e.g., paneling, multiple plots.\nStatistics refer to statistical transformations that summarise data e.g., mean, confidence intervals.\nCoordinates refer to coordinate systems that define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, e.g., main title, sub-title, y-aixs title, legend, background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The ggplot() function in the ggplot2 package is used to initiate a ggplot object. The “data” argument defines the dataset to be used for plotting the graphic.\nIf the dataset is not already a data frame, it will be converted to one via the fortify() function in the ggplot2 package.\n\nggplot(data=exam_data)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Aesthetic mappings take attributes of the data and and use them to influence visual characteristics, e.g., position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function. Each geom layer can have its own aesthetic specification.\nThe code chunk below adds the aesthetic element into the plot. The x-axis and its label are added to the plot.\n\nggplot(data = exam_data, \n       aes(x = MATHS))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The geometric objects are the actual marks put on the plot. A plot must have at least one geom, but may have more.\nSome examples of geom:\n\ngeom_point() for drawing individual points (e.g., a scatter plot);\ngeom_line() for drawing lines (e.g., for a line chart);\ngeom_smooth() for drawing smoothed lines (e.g., for simple trends or approximations);\ngeom_bar() for drawing bars (e.g., for bar chart);\ngeom_histogram() for drawing binned values (e.g. a histogram);\ngeom_polygon() for drawing arbitrary shapes; and\ngeom_map() for drawing polygons in the shape of a map. Can use the map_data() function to access the data used for these maps.\n\n\n\nA bar chat is plotted using the geom_bar() function.\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\nObservation: From the bar chart, we can see that most of the students are Chinese, followed by Malay. A minority of students are Indian or other races.\n\n\n\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and the dots are stacked, with each dot representing one observation.\nA dot plot is plotted using the geom_dotplot() function.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\nThe y-axis for the plot above is misleading. Hence, the scale_y_continuous() function in the ggplot2 package is used to turn off the y-axis. Also, the “binwidth” argument is used to change the bin width to 2.5.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\n\n\nObservation: From the dot plot, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50.\n\n\n\n\nThe geom_histogram() function is used to create a simple histogram using the values in the “MATHS” attribute of the data set.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()    \n\n\n\n\n\nObservation: From the histogram, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50.\n\n\n\n\nSome customisations are done to the histogram:\n\nThe “bins” argument is used to change the number of bins from the default 30 to 20;\nThe “fill” argument is used to fill the bars with light blue; and\nThe “colour” argument is used to change the outline of the bars to black.\n\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 colour = \"black\",      \n                 fill = \"light blue\")\n\n\n\n\n\nObservation: From the histogram, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50. Also, we can also see more clearly that the score range with the most students is around 75.\n\n\n\n\nThe fill of the histogram is changed using the sub-group of the aesthetic() function, which divides the bars by the “GENDER” attribute.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\")\n\n\n\n\n\nObservation: From the histogram, we can see the distributions of math scores for female and male students. There appears to be less female students who score below 50 compared to male students who score below 50.\n\n\n\n\nThe geom_density() function is used to compute and plot the kernel density estimate, which is a smoothed version of a histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\nObservation: From the kernel density estimate plot, we can see the most ‘dense’/common score is actually slightly above 75.\n\nThe kernel density estimate is then plotted by the “GENDER” attribute using the “colour” argument.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\nObservation: From the kernel density estimate plot, we can see more clearly that there are more female students than male students who score above 50. Conversely, there are more male students than female students who score below 50.\n\nA similar plot can be produced using the “fill” argument.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER,\n           alpha = 0.1)) +\n  geom_density()\n\n\n\n\n\n\n\nThe geom_boxplot() function is used to display a continuous value list. It visualises five summary statistics (minimum, first quartile, median, third quartile, and maximum) and any outliers.\n\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()\n\n\n\n\n\nObservation: From the boxplot, we can see that the median scores for female students and male students are rather similar. There are also outliers for both genders in the lower score range.\n\nThe “notch” argument is used to help visually assess whether the median of distributions differ. If the notches do not overlap, it means that the medians are different.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\nObservation: From the notched plot, we can see clearly that the median scores for female students and male students are different.\n\n\n\n\nThe geom_violin() function is designed for creating a violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they are placed side by side.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\nObservation: From the violin plot, we can see clearly that the distribution of the scores by gender is relatively similarly. A key difference is that the lower scores in the distribution for male students are lower than that for female students.\n\n\n\n\nThe geom_point() function is used to create a scatterplot. The “MATHS” and “ENGLISH” attributes of the dataset are plotted.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point()            \n\n\n\n\n\nObservation: From the scatterplot, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores.\n\n\n\n\nThe code chunk below plots the data points on boxplots and scatterplots using both the geom_boxplot() and geom_point() functions.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position = \"jitter\",\n             size = 0.5)\n\n\n\n\n\nNote: The “position” argument is used to randomly vary the location of the dots, which otherwise would have lined up in the middle of the boxplot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The statistics functions statistically transform data, usually into some form of summary - e.g., mean, confidence limit.\nThere are two ways to use these functions:\n\nAdd a stat() function and override the default geom, or\nAdd a geom() function and override the default stat.\n\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nThe mean values are added using the stat_summary() function in the ggplot2 package. This overrides the default geom.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour = \"red\",        \n               size = 4)               \n\n\n\n\n\nNote: The “fun” argument is used to insert the mean value as a dot instead of the “fun.y” argument which has been deprecated.\n\n\nObservation: We can see that the mean scores for both gender are below their respective median scores, indicating left-skewed distributions of scores.\n\n\n\n\nThe mean values are added using the geom_point() function. This overrides the default stat.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",        \n             fun = \"mean\",           \n             colour = \"red\",          \n             size = 4)          \n\n\n\n\n\nNote: The “fun” argument is used to insert the mean value as a dot instead of the “fun.y” argument which has been deprecated.\n\n\nObservation: Similarly, we can see that the mean scores for both gender are below their respective median scores, indicating left-skewed distributions of scores.\n\n\n\n\nReverting to the scatterplot on the distribution of the “MATHS” and “ENGLISH” attributes (see section 1.7.9), the interpretability of the plot can be improved with the addition of a best fit curve. The geom_smooth() function is used.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth = 0.5)\n\n\n\n\n\nNote: The “linewidth” argument is used to indicate the width of the grey shaded region of the best fit curve instead of the “size” argument which has been deprecated.\n\n\nObservation: From the best fit curve, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores. Also, there also appears to be an inflection point around Maths score 75 and English score 70.\n\nThe default method is loess, which draws a smooth curve. If the “method” argument is set to “lm”, the plot produces a linear line based on a linear model.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5)\n\n\n\n\n\nNote: The “linewidth” argument is used to indicate the width of the grey shaded region of the best fit curve instead of the “size” argument which has been deprecated."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the dataset. They are an alternative to aesthetics for displaying additional discrete variables. The ggplot2 package supports two types of facets, namely: facet_grid() and facet_wrap().\n\n\nThe facet_wrap() function wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than the facet_grid() function because most displays are roughly rectangular.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\nObservation: Based on the trellis plot, we can see that there are differences in the Maths scores between different classes. Students from classes 3A-F do better than students from classes 3G-I.\n\n\n\n\nThe facet_grid() function forms a matrix of panels defined by row and column facetting variables. It is most useful when there are two discrete variables, and all combinations of the variables exist in the dataset.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\nObservation: Based on the trellis plot, we can also see that there are differences in the Maths scores between different classes. Students from classes 3A-F do better than students from classes 3G-I. However, this plot is more difficult to interpret than the one using the facet_wrap() function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian() - the default cartesian coordinate systems, where x and y values can be specified (e.g., allows zoom in or out).\ncoord_flip() - a cartesian system with the x and y axes flipped.\ncoord_fixed() - a cartesian system with a “fixed” aspect ratio (e.g., 1.78 for a widescreen” plot).\ncoord_quickmap() - a coordinate system that approximates a good aspect ratio for maps.\n\n\n\nBy default, the geom_bar() function produces a bar chart in vertical form. This can be switched using the coord_flip() function.\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\nObservation: A plot using horizontal bars may be useful when the labels for the vertical axis are long words.\n\n\n\n\nThe scatterplot in section 1.7.9 is slightly misleading because the y-axis and x-axis range are not equal. This can be corrected using the coord_caretesian() function.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\n\n\n\n\nObservation: From the best fit curve, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores. Also, the line is gentler than a y = x line, which means that every one unit increment in Maths scores leads to a lesser than one unit increment in English scores."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Themes control elements of the graph that are not related to the data, such as:\n\nBackground colour;\nSize of fonts;\nGrid lines; and\nColour of labels.\n\nThe built-in themes include:\n\ntheme_grey() (default);\ntheme_bw(); and\ntheme_classic().\n\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\nThe default (theme_grey()), theme_bw(),theme_classic(), andtheme_minimal()` functions are used for the horizontal bar charts below.\n\nDefault (theme_grey)theme_bwtheme_classictheme_minimal\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#references",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Hadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version.\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale\n\n~~~ End of Hands-on Exercise 1 ~~~"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608: Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications!\nIn this webpage, I am going to share my visual analytics learning journey.\n\n\n\n\n\nCredit: Prima Consulting UK"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 2 of the R for Visual Analytics book.\nThe learning outcomes are:\n\nControl the placement of annotation on a graph using functions provided in the ggrepel package;\nCreate professional publication quality figures using functions provided in the ggthemes and hrbrthemes packages; and\nPlot composite figures by combining ggplot2 graphs using the patchwork package.\n\n\n\n\n\n\nIn this hands-on exercise, the following R packages are used:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\nggrepel for geoms to repel overlapping text labels for ggplot2;\nggthemes for extra themes, geoms, and scales for ggplot2;\nhrbrthemes for typography-centric themes and theme components for ggplot2; and\npatchwork for preparing composite figures created using ggplot2.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse, ggrepel, \n               ggthemes, hrbrthemes,\n               patchwork)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_csv() function in the readr package and stored as the R object, exam_data.\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nThe tibble data frame, exam_data, has 7 columns and 322 rows.\n\nIt consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.\nThe 7 variables/attributes are:\n\nCategorical: ID, CLASS, GENDER, and RACE.\nContinuous: MATHS, ENGLISH, and SCIENCE.\n\n\n\n\n\n\nA challenge in plotting a statistical graph is annotation, especially with a large number of data points.\nThe scatterplot below shows many overlapping annotations because of the sheer number of dots on it.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nThe ggrepel package is an extension of the ggplot2 package, which provides the geoms for ggplot2 to repel overlapping text as shown in the plot above. This is done by replacing the geom_text() and geom_label() functions in the ggplot2 package with the geom_text_repel() and geom_label_repel() functions respectively in the ggrepel package.\n\n\nThe previous scatterplot is re-plotted by replacing the geom_label() function in the ggplot2 package with the geom_label_repel() function in the ggrepel package.\n\nNote: The annotations avoid the main clusters and labels potential outlier dots.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nThe ggplot2 package comes with eight built-in themes, they are: theme_grey(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\nThe following plot uses the default grey theme for the histogram showing the distribution of Maths scores.\n\nNote: There is no need to explicitly include the theme_grey() function as it is the default theme.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\nThe ggthemes package provides ggplot2 themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, etc. It also provides some extra geoms and scales for ggplot2.\nThe previous plot is re-plotted with The Economist theme below, with the classic light blue background.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\nThe hrbrthemes package has two goals. The first is that it provides a base theme that focuses on typographic elements, such as where various labels are placed and the types of fonts used.\nThe previous plot is re-plotted with the theme_ipsum function below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal of the hrbrthemes package is productivity for a production workflow. A “production workflow” is when the output of the work is to be put into a publication of some kind. While working through the analysis, the visual elements do not need to be perfect but are there to validate/support the work and are more of a starting point for the finished product.\nThe previous plot is re-plotted with the theme_ipsum function below, with the addition of some arguments to customise the elements.\n\nNote: The various arguments are:\n\n“axis_title_size” argument is used to increase the font size of the axis title to 18;\n“base_size” argument is used to increase the default axis label to 15; and\n“grid” argument is used to remove the x-axis grid lines and show only the y-axis grid lines.\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\nOften, multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions that provide functions to compose a figure with multiple graphs. A composite plot is created by combining multiple graphs.\nTo start, three separate statistical graphics are created below, showing the distribution of Maths scores, the distribution of English scores, and the English scores versus Maths scores.\n\nMathsEnglishMaths vs. EnglishCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 = ggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") + \n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 = ggplot(data = exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 = ggplot(data = exam_data, \n             aes(x = MATHS, \n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\nThere are several ggplot2 extension functions that support the preparation of a composite figure by combining several graphs. These functions include: grid.arrange() in the gridExtra package and plot_grid() in the cowplot package.\nThe ggplot2 extension patchwork package is specially designed for combining separate ggplot2 graphs into a single figure. It has a simple syntax to create layouts easily:\n\nTwo-column layout using “+”;\n“()” to create a subplot group; and\nTwo-row layout using “/”.\n\n\n\n\nA composite figure of two histograms showing the distributions of Maths scores and English scores respectively is created using the syntax of the patchwork package.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n\nA more complex composite figure can be plotted using other appropriate operators.\nFor example, the composite figure below is plotted by using:\n\n“|” to stack two ggplot2 graphs;\n“/” to place the plots beside each other; and\n“()” to define the sequence of the plotting.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\nThe patchwork package also allow subplots to be identified in text using its auto-tagging capabilities.\n\nRoman NumeralsArabic NumeralsAlphabetsCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = '1')\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nBesides providing functions to place plots next to each other based on the provided layout, the inset_element() function in the patchwork package can place one or several plots or graphic elements freely on top or below another plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\nUsing both the ggthemes and patchwork packages, a composite figure with The Economist theme is created.\n\nNote: The subplots are tagged with “A”, “B”, and “C” using the plot_annotation() function in the patchwork package. Also, the theme() function in the ggplot2 package is used, with the “plot.title” argument to reduce the size of the titles to fit the composite figure.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\npatchwork = (p1 / p2) | p3\npatchwork & theme_economist() + theme(plot.title = element_text(size=10))\n\n\n\n\n\n\n\n\n\nPatchwork R Package Goes Nerd Viral\nR Packages: ggrepel, ggthemes, hrbrthemes, and patchwork\nggplot Tips: Arranging Plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet\n\n~~~ End of Hands-on Exercise 2 ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview-and-learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview-and-learning-outcomes",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 2 of the R for Visual Analytics book.\nThe learning outcomes are:\n\nControl the placement of annotation on a graph using functions provided in the ggrepel package;\nCreate professional publication quality figures using functions provided in the ggthemes and hrbrthemes packages; and\nPlot composite figures by combining ggplot2 graphs using the patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this hands-on exercise, the following R packages are used:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\nggrepel for geoms to repel overlapping text labels for ggplot2;\nggthemes for extra themes, geoms, and scales for ggplot2;\nhrbrthemes for typography-centric themes and theme components for ggplot2; and\npatchwork for preparing composite figures created using ggplot2.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse, ggrepel, \n               ggthemes, hrbrthemes,\n               patchwork)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_csv() function in the readr package and stored as the R object, exam_data.\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nThe tibble data frame, exam_data, has 7 columns and 322 rows.\n\nIt consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.\nThe 7 variables/attributes are:\n\nCategorical: ID, CLASS, GENDER, and RACE.\nContinuous: MATHS, ENGLISH, and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "A challenge in plotting a statistical graph is annotation, especially with a large number of data points.\nThe scatterplot below shows many overlapping annotations because of the sheer number of dots on it.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nThe ggrepel package is an extension of the ggplot2 package, which provides the geoms for ggplot2 to repel overlapping text as shown in the plot above. This is done by replacing the geom_text() and geom_label() functions in the ggplot2 package with the geom_text_repel() and geom_label_repel() functions respectively in the ggrepel package.\n\n\nThe previous scatterplot is re-plotted by replacing the geom_label() function in the ggplot2 package with the geom_label_repel() function in the ggrepel package.\n\nNote: The annotations avoid the main clusters and labels potential outlier dots.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "The ggplot2 package comes with eight built-in themes, they are: theme_grey(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\nThe following plot uses the default grey theme for the histogram showing the distribution of Maths scores.\n\nNote: There is no need to explicitly include the theme_grey() function as it is the default theme.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\nThe ggthemes package provides ggplot2 themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, etc. It also provides some extra geoms and scales for ggplot2.\nThe previous plot is re-plotted with The Economist theme below, with the classic light blue background.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\nThe hrbrthemes package has two goals. The first is that it provides a base theme that focuses on typographic elements, such as where various labels are placed and the types of fonts used.\nThe previous plot is re-plotted with the theme_ipsum function below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal of the hrbrthemes package is productivity for a production workflow. A “production workflow” is when the output of the work is to be put into a publication of some kind. While working through the analysis, the visual elements do not need to be perfect but are there to validate/support the work and are more of a starting point for the finished product.\nThe previous plot is re-plotted with the theme_ipsum function below, with the addition of some arguments to customise the elements.\n\nNote: The various arguments are:\n\n“axis_title_size” argument is used to increase the font size of the axis title to 18;\n“base_size” argument is used to increase the default axis label to 15; and\n“grid” argument is used to remove the x-axis grid lines and show only the y-axis grid lines.\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Often, multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions that provide functions to compose a figure with multiple graphs. A composite plot is created by combining multiple graphs.\nTo start, three separate statistical graphics are created below, showing the distribution of Maths scores, the distribution of English scores, and the English scores versus Maths scores.\n\nMathsEnglishMaths vs. EnglishCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 = ggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") + \n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 = ggplot(data = exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 = ggplot(data = exam_data, \n             aes(x = MATHS, \n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\nThere are several ggplot2 extension functions that support the preparation of a composite figure by combining several graphs. These functions include: grid.arrange() in the gridExtra package and plot_grid() in the cowplot package.\nThe ggplot2 extension patchwork package is specially designed for combining separate ggplot2 graphs into a single figure. It has a simple syntax to create layouts easily:\n\nTwo-column layout using “+”;\n“()” to create a subplot group; and\nTwo-row layout using “/”.\n\n\n\n\nA composite figure of two histograms showing the distributions of Maths scores and English scores respectively is created using the syntax of the patchwork package.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n\nA more complex composite figure can be plotted using other appropriate operators.\nFor example, the composite figure below is plotted by using:\n\n“|” to stack two ggplot2 graphs;\n“/” to place the plots beside each other; and\n“()” to define the sequence of the plotting.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\nThe patchwork package also allow subplots to be identified in text using its auto-tagging capabilities.\n\nRoman NumeralsArabic NumeralsAlphabetsCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = '1')\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nBesides providing functions to place plots next to each other based on the provided layout, the inset_element() function in the patchwork package can place one or several plots or graphic elements freely on top or below another plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\nUsing both the ggthemes and patchwork packages, a composite figure with The Economist theme is created.\n\nNote: The subplots are tagged with “A”, “B”, and “C” using the plot_annotation() function in the patchwork package. Also, the theme() function in the ggplot2 package is used, with the “plot.title” argument to reduce the size of the titles to fit the composite figure.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\npatchwork = (p1 / p2) | p3\npatchwork & theme_economist() + theme(plot.title = element_text(size=10))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#references",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Patchwork R Package Goes Nerd Viral\nR Packages: ggrepel, ggthemes, hrbrthemes, and patchwork\nggplot Tips: Arranging Plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet\n\n~~~ End of Hands-on Exercise 2 ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 3 of the R for Visual Analytics book.\nThe learning outcome is to create interactive data visualisation using functions in the ggiraph and plotlyr package.\n\n\n\n\n\nIn this hands-on exercise, the following R packages are used:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\npatchwork for preparing composite figures created using ggplot2;\nDT for interfacing with JavaScript library DataTables that create interactive tables on html pages;\nggiraph for making ggplot graphics interactive;\nplotlyr for plotting interactive statistical graphs; and\ncrosstalk for inter-widget interactivity for html widgets.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse, patchwork,\n               DT, ggiraph, plotly,\n               crosstalk)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_csv() function in the readr package and stored as the R object, exam_data.\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nThe tibble data frame, exam_data, has 7 columns and 322 rows.\n\nIt consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.\nThe 7 variables/attributes are:\n\nCategorical: ID, CLASS, GENDER, and RACE.\nContinuous: MATHS, ENGLISH, and SCIENCE.\n\n\n\n\n\n\nThe ggiraph package is an html widget and a ggplot2 extension that allows ggplot graphics to be interactive. This is achieved using the interactive geometries that can understand three arguments:\n\ntooltip: a column of datasets that contain tooltips to be displayed when the mouse is pointing to the elements.;\nonclick: a column of datasets that contain a JavaScript function to be executed when the elements are clicked on; and\ndata_id: a column of datasets that contain an ID to be associated with the elements.\n\nIf used within a Shiny application, the elements associated with an ID (data_id) can be selected and manipulated on the client and server sides.\n\n\nA typical code chunk to plot an interactive statistical graph using functions in the ggiraph package consists of two parts:\n\nAn interactive version of a ggplot object is created using the geom_dotplot_interactive() function; and\nThe girafe() function is then used to generate an interactive svg object to be displayed on the html page.\n\nThe “tooltip” aesthetic argument of the geom_dotplot_interactive() function is used to specify the field that will be displayed in the tooltip.\nIn the plot below, when the mouse pointer hovers over a data point of interest, the student’s ID is displayed.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np1 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\ngirafe(ggobj = p1,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object. A new field, tooltip, was created in the tibble data frame, exam_data. It is populated with information from the ID and CLASS fields. This tooltip is then used in place of ID in the “tooltip” aesthetic argument of the geom_dotplot_interactive() function.\nWhen the mouse pointer hovers over a data point of interest, the student’s ID and class are displayed.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nexam_data$tooltip = c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np2 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p2,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\nThe opts_tooltip() function in the ggiraph package is used to customise the tooltip rendering by adding css declarations.\n\nNote: The background for the tooltip has been changed from black to white colour, and the text colour has been changed from white to black.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip_css = \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\ngirafe(ggobj = p2,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(    #&lt;&lt;\n         opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n      )\n\n\n\n\n\n\n\nDerived statistics can also be displayed in a tooltip. In the example below, a function is used to compute the 90% confidence interval of the mean of Maths scores by RACE are plotted in a bar chart.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip = function(y, ymax, accuracy = .01) {\n  mean = scales::number(y, accuracy = accuracy)\n  sem = scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean Maths Scores:\", mean, \"+/-\", sem)\n}\n\ngg_point = ggplot(data = exam_data, \n                   aes(x = RACE)) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\") +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2)\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\nThe “data_id” aesthetic argument of the geom_dotplot_interactive() function is used to show associated elements of the same designated field.\nIn the plot below, elements of the same CLASS are highlighted when the mouse hovers over any one of them.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np3 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(ggobj = p3,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\nThe highlighting effect can be changed using css codes to show the selected associated elements and fade the non-selected elements.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngirafe(ggobj = p3,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")))\n\n\n\n\n\n\n\nThe tooltip and hover effect can be combined in an interactive statistical graph.\nThe associated elements are highlighted when the mouse hovers over one of them. At the same time, the tooltip will show which CLASS the highlighted elements belong to.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np4 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p4,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")))\n\n\n\n\n\n\n\nFinally, the “onclick” aesthetic argument of the geom_dotplot_interactive() function is used to provide hotlink interactivity on the web.\nUpon clicking one of the elements, the web document link will open.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nexam_data$onclick = sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np5 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p5,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\nThe coordinated multiple views methods can be used to show corresponding data points based on the same ID, with the following steps:\n\nAppropriate interactive functions of the ggiraph package is used to create the multiple views.\nThe patchwork package is used inside the girafe() function to create the interactive coordinated multiple views.\n\n\nNote: The “data_id” aesthetic argument is critical to link observations between plots and the”tooltip” aesthetic argument is optional but nice to have when the mouse hovers over a point.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np6 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim = c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np7 = ggplot(data = exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim = c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p6 + p7), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")))\n\n\n\n\n\n\n\n\nThe plotly package can be used to create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the Grammar of Graphics. Unlike other plotly platforms, plot.R is free and open-source.\nThere are two ways to create an interactive graph using the plotly package:\n\nUsing the plot_ly() function; and\nUsing the ggplotly() function.\n\n\n\nA basic interactive plot is created using the plot_ly() function.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nThe “colour” argument is used to map a qualitative visual variable (e.g. RACE).\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\nA basic interactive plot is created using the gglotly() function.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np8 = ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\nggplotly(p8)\n\n\n\n\n\n\n\nA coordinated linked plot can be created using the plotly package function in three steps:\n\nThe highlight_key() function in the plotly package is used as shared data.\nThe two scatterplots are created by using functions in the ggplot2 package.\nThe subplot() function in the plotly package is used to place the two scatterplots side-by-side.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nd = highlight_key(exam_data)\np9 = ggplot(data = d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\np10 = ggplot(data = d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\nsubplot(ggplotly(p9),\n        ggplotly(p10))\n\n\n\n\n\n\n\n\nThe DT package provides interfacing with JavaScript library DataTables that create interactive tables on html page. Data objects in R can be rendered as HTML tables using the JavaScript library DataTables (typically via R Markdown or Shiny).\n\ndatatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends the package with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\nCoordinated brushing is implemented using:\n\nThe highlight() function in the plotly package sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nThe bscols() function in the crosstalk package makes it easy to put html elements side by side. It is especially designed to work in an R Markdown document.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np11 = ggplot(d,\n             aes(ENGLISH, MATHS)) + \n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\ngg = highlight(ggplotly(p11),\n               \"plotly_selected\")  \n\nbscols(gg, \n       datatable(d), \n       widths = 5)\n\n\n\n\n\n\n\n\n\n\n\nggiraph and example.\nHow to Plot With ggiraph.\nInteractive map of France with ggiraph.\nCustom Interactive Sunbursts with ggplot in R.\n\n\n\n\n\nGetting Started with plotly in R\nA collection of plotly R graphs.\nCarson Sievert (2020) Interactive Web-based Data Visualization with R, plotly, and Shiny, Chapman and Hall/CRC. Online version.\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of plotly’s R API.\ngganimate and example.\nBuilding An Animation Step-by-Step with gganimate.\nCreating A Composite gif with Multiple gganimate Panels.\n\n~~~ End of Hands-on Exercise 2 ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#overview-and-learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#overview-and-learning-outcomes",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 3 of the R for Visual Analytics book.\nThe learning outcome is to create interactive data visualisation using functions in the ggiraph and plotlyr package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#getting-started",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this hands-on exercise, the following R packages are used:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\npatchwork for preparing composite figures created using ggplot2;\nDT for interfacing with JavaScript library DataTables that create interactive tables on html pages;\nggiraph for making ggplot graphics interactive;\nplotlyr for plotting interactive statistical graphs; and\ncrosstalk for inter-widget interactivity for html widgets.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse, patchwork,\n               DT, ggiraph, plotly,\n               crosstalk)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_csv() function in the readr package and stored as the R object, exam_data.\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nThe tibble data frame, exam_data, has 7 columns and 322 rows.\n\nIt consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.\nThe 7 variables/attributes are:\n\nCategorical: ID, CLASS, GENDER, and RACE.\nContinuous: MATHS, ENGLISH, and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "The ggiraph package is an html widget and a ggplot2 extension that allows ggplot graphics to be interactive. This is achieved using the interactive geometries that can understand three arguments:\n\ntooltip: a column of datasets that contain tooltips to be displayed when the mouse is pointing to the elements.;\nonclick: a column of datasets that contain a JavaScript function to be executed when the elements are clicked on; and\ndata_id: a column of datasets that contain an ID to be associated with the elements.\n\nIf used within a Shiny application, the elements associated with an ID (data_id) can be selected and manipulated on the client and server sides.\n\n\nA typical code chunk to plot an interactive statistical graph using functions in the ggiraph package consists of two parts:\n\nAn interactive version of a ggplot object is created using the geom_dotplot_interactive() function; and\nThe girafe() function is then used to generate an interactive svg object to be displayed on the html page.\n\nThe “tooltip” aesthetic argument of the geom_dotplot_interactive() function is used to specify the field that will be displayed in the tooltip.\nIn the plot below, when the mouse pointer hovers over a data point of interest, the student’s ID is displayed.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np1 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\ngirafe(ggobj = p1,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object. A new field, tooltip, was created in the tibble data frame, exam_data. It is populated with information from the ID and CLASS fields. This tooltip is then used in place of ID in the “tooltip” aesthetic argument of the geom_dotplot_interactive() function.\nWhen the mouse pointer hovers over a data point of interest, the student’s ID and class are displayed.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nexam_data$tooltip = c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np2 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p2,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\nThe opts_tooltip() function in the ggiraph package is used to customise the tooltip rendering by adding css declarations.\n\nNote: The background for the tooltip has been changed from black to white colour, and the text colour has been changed from white to black.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip_css = \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\ngirafe(ggobj = p2,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(    #&lt;&lt;\n         opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n      )\n\n\n\n\n\n\n\nDerived statistics can also be displayed in a tooltip. In the example below, a function is used to compute the 90% confidence interval of the mean of Maths scores by RACE are plotted in a bar chart.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip = function(y, ymax, accuracy = .01) {\n  mean = scales::number(y, accuracy = accuracy)\n  sem = scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean Maths Scores:\", mean, \"+/-\", sem)\n}\n\ngg_point = ggplot(data = exam_data, \n                   aes(x = RACE)) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\") +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2)\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\nThe “data_id” aesthetic argument of the geom_dotplot_interactive() function is used to show associated elements of the same designated field.\nIn the plot below, elements of the same CLASS are highlighted when the mouse hovers over any one of them.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np3 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(ggobj = p3,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\nThe highlighting effect can be changed using css codes to show the selected associated elements and fade the non-selected elements.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngirafe(ggobj = p3,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")))\n\n\n\n\n\n\n\nThe tooltip and hover effect can be combined in an interactive statistical graph.\nThe associated elements are highlighted when the mouse hovers over one of them. At the same time, the tooltip will show which CLASS the highlighted elements belong to.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np4 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p4,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")))\n\n\n\n\n\n\n\nFinally, the “onclick” aesthetic argument of the geom_dotplot_interactive() function is used to provide hotlink interactivity on the web.\nUpon clicking one of the elements, the web document link will open.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nexam_data$onclick = sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np5 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p5,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\nThe coordinated multiple views methods can be used to show corresponding data points based on the same ID, with the following steps:\n\nAppropriate interactive functions of the ggiraph package is used to create the multiple views.\nThe patchwork package is used inside the girafe() function to create the interactive coordinated multiple views.\n\n\nNote: The “data_id” aesthetic argument is critical to link observations between plots and the”tooltip” aesthetic argument is optional but nice to have when the mouse hovers over a point.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np6 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim = c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np7 = ggplot(data = exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim = c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p6 + p7), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "The plotly package can be used to create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the Grammar of Graphics. Unlike other plotly platforms, plot.R is free and open-source.\nThere are two ways to create an interactive graph using the plotly package:\n\nUsing the plot_ly() function; and\nUsing the ggplotly() function.\n\n\n\nA basic interactive plot is created using the plot_ly() function.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nThe “colour” argument is used to map a qualitative visual variable (e.g. RACE).\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\nA basic interactive plot is created using the gglotly() function.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np8 = ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\nggplotly(p8)\n\n\n\n\n\n\n\nA coordinated linked plot can be created using the plotly package function in three steps:\n\nThe highlight_key() function in the plotly package is used as shared data.\nThe two scatterplots are created by using functions in the ggplot2 package.\nThe subplot() function in the plotly package is used to place the two scatterplots side-by-side.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nd = highlight_key(exam_data)\np9 = ggplot(data = d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\np10 = ggplot(data = d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\nsubplot(ggplotly(p9),\n        ggplotly(p10))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation---interactive-data-table-using-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation---interactive-data-table-using-dt-package",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "The DT package provides interfacing with JavaScript library DataTables that create interactive tables on html page. Data objects in R can be rendered as HTML tables using the JavaScript library DataTables (typically via R Markdown or Shiny).\n\ndatatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends the package with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\nCoordinated brushing is implemented using:\n\nThe highlight() function in the plotly package sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nThe bscols() function in the crosstalk package makes it easy to put html elements side by side. It is especially designed to work in an R Markdown document.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np11 = ggplot(d,\n             aes(ENGLISH, MATHS)) + \n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\ngg = highlight(ggplotly(p11),\n               \"plotly_selected\")  \n\nbscols(gg, \n       datatable(d), \n       widths = 5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#references",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "ggiraph and example.\nHow to Plot With ggiraph.\nInteractive map of France with ggiraph.\nCustom Interactive Sunbursts with ggplot in R.\n\n\n\n\n\nGetting Started with plotly in R\nA collection of plotly R graphs.\nCarson Sievert (2020) Interactive Web-based Data Visualization with R, plotly, and Shiny, Chapman and Hall/CRC. Online version.\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of plotly’s R API.\ngganimate and example.\nBuilding An Animation Step-by-Step with gganimate.\nCreating A Composite gif with Multiple gganimate Panels.\n\n~~~ End of Hands-on Exercise 2 ~~~"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "&lt;placeholder&gt;\n~~~ End of In-class Exercise 1 ~~~"
  }
]