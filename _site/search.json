[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Singapore has come a long way since gaining independence in 1965. Without natural resources, human capital development through a well-planned education system is a critical part of Singapore’s transformation from third world to first.\nDespite the success, there is still a correlation between socio-economic status and education achievement, as well as ingrained perceptions that some schools are better than others.\nHence, there is a need to use data to analyse the performance of Singapore students across different subjects, and identify any relationships between the performance in various subjects and factors such as gender, socioeconomic status, and type of school.\n\n\n\nIn this take-home exercise, the objective is to use the appropriate Exploratory Data Analysis (EDA) methods and ggplot2 functions (part of the amazing tidyverse ecosystem) to answer the following analytical questions:\n\nWhat is the distribution of Singapore students’ performance in Mathematics, Reading, and Science? What are the similarities and/or differences between the distributions for the three different subjects?\nAre there relationships between the students’ performance in the three subjects and factors such as their gender, socioeconomic status, and school? If yes, what kind of relationships are present?\n\nBased on the analysis and observations, this take-home exercise also briefly suggests the potential insights can be further studied in future research to better inform education policy planning.\n\n\n\n\n\n\nThe R packages used in this take-home exercise are:\n\nhaven for importing SAS files;\ntidyverse (i.e. readr, tidyr, dplyr, ggplot2) for performing data science tasks such as importing, tidying, and wrangling data, as well as creating graphics based on The Grammar of Graphics;\nreshape2 for transforming data between wide and long formats;\nggthemr for aesthetic themes created by user, Ciarán Tobin;\nggridges for creating ridgeline plots;\nggdist for visualising distributions and uncertainty; and\nggpubr for creating publication ready ggplot2 plots.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed in the computer. If yes, they are then loaded into the R environment. If no, they are installed, and then loaded into the R environment.\n\npacman::p_load(haven, tidyverse, reshape2,\n               ggthemr, ggridges, ggdist,\n               ggpubr)\n\nThe ggthemr() function in the ggthemr package is used to set the default theme of this take-home exercise as “solarized”.\n\nggthemr(\"solarized\")\n\n\n\n\nThe OECD Programme for International Student Assessment (PISA) measures how well 15-year-old students in different countries are “prepared to meet the challenges of today’s knowledge societies” by looking at “their ability to use their knowledge and skills to meet real-life challenges”. The PISA surveys take place very three years, the latest being conducted in 2022.\nThe PISA 2022 database contains the full set of responses from individual students, school principals, and parents. There are a total of five data files and their contents are as follows:\n\nStudent questionnaire data file;\nSchool questionnaire data file;\nTeacher questionnaire data file;\nCognitive item data file; and\nQuestionnaire timing data file.\n\nFor the purpose of this take-home exercise, the “Student questionnaire data file” is used.\n\n\n\n\n\n\nThe dataset used in this take-home exercise is the 2022 PISA student questionnaire data file, cy08msp_stu_qqq.sas7bdat, which is in the SAS file format.\nThe file is imported into the R environment using the read_sas() function in the haven package and stored as the R object, stu_qqq.\n\nstu_qqq = read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nThe tibble data frame, stu_qqq, has 1,279 columns (variables) and 613,744 rows (observations).\n\n\n\nThere are 6,606 rows with the country code (i.e., CNT) value of “SGP”, which represents Singapore. This count is cross-verified by the information provided in the “CY08MSP_STU_QQQ” sheet in the codebook. The codebook also stated that Singapore students’ made up 1.0763% of the entire global student population who took part in the 2022 PISA.\nThe filter() function in the dplyr package is used to obtain these rows, and stored as the R object, stu_qqq_SG.\n\nstu_qqq_SG = stu_qqq %&gt;% filter(CNT == \"SGP\")\n\nThe tibble data frame, stu_qqq_SG, is then saved in the rds file format and imported into the R environment.\n\nwrite_rds(stu_qqq_SG, \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG = read_rds(\"data/stu_qqq_SG.rds\")\n\n\n\n\nOf the 1,279 variables (columns), the following 36 are preliminarily selected to answer the analytical questions:\n\nInternational School ID (“CNTSCHID”);\nInternational Student ID (“CNTSTUID”);\nType of School (“STRATUM”);\n\n“SGP01” is Public Secondary School.\n“SGP03” is Private Secondary School.\n\nStudent Gender (“ST004D01T”);\n\n“01” is Female.\n“02” is Male.\n\nIndex of Economic, Social, and Cultural Status (“ESCS”);\nNumber of Books at Home (“ST255Q01JA”);\n\n“01” is no books”.\n“02” is 1-10 books.\n“03” is 11-25 books.\n“04” is 26-100 books.\n“05” is 101-200 books.\n“06” is 201-500 books.\n“07” is more than 500 books.\n\nPlausible Values 1 to 10 in Mathematics (“PV1MATH” to “PV10MATH”);\nPlausible Values 1 to 10 in Reading (“PV1READ” to “PV10READ”); and\nPlausible Values 1 to 10 in Science (“PV1SCIE” to “PV10SCIE”).\n\nAgain, the select() function in the dplyr package is used to obtain these rows, and stored as the R object, stu_qqq_SG_final.\n\nstu_qqq_SG_final = stu_qqq_SG %&gt;% \n  select(\"CNTSCHID\", \"CNTSTUID\", \"STRATUM\", \"ST004D01T\", \"ESCS\", \"ST255Q01JA\",\n           \"PV1MATH\", \"PV2MATH\", \"PV3MATH\", \"PV4MATH\", \"PV5MATH\", \"PV6MATH\", \n           \"PV7MATH\", \"PV8MATH\", \"PV9MATH\", \"PV10MATH\", \"PV1READ\", \"PV2READ\", \n           \"PV3READ\", \"PV4READ\", \"PV5READ\", \"PV6READ\", \"PV7READ\", \"PV8READ\", \n           \"PV9READ\", \"PV10READ\", \"PV1SCIE\", \"PV2SCIE\", \"PV3SCIE\", \"PV4SCIE\", \n           \"PV5SCIE\", \"PV6SCIE\", \"PV7SCIE\", \"PV8SCIE\", \"PV9SCIE\", \"PV10SCIE\")\n\n\n\n\nThe dataset from PISA is expected to be relatively clean. Nevertheless, due diligence checks for duplicates and missing values are still made to confirm the assumption.\nThe duplicated() function in the base package is used to check for duplicates in stu_qqq_SG_final. There are no duplicates in the tibble data frame.\n\nstu_qqq_SG_final[duplicated(stu_qqq_SG_final), ]\n\n# A tibble: 0 × 36\n# ℹ 36 variables: CNTSCHID &lt;dbl&gt;, CNTSTUID &lt;dbl&gt;, STRATUM &lt;chr&gt;,\n#   ST004D01T &lt;dbl&gt;, ESCS &lt;dbl&gt;, ST255Q01JA &lt;dbl&gt;, PV1MATH &lt;dbl&gt;,\n#   PV2MATH &lt;dbl&gt;, PV3MATH &lt;dbl&gt;, PV4MATH &lt;dbl&gt;, PV5MATH &lt;dbl&gt;, PV6MATH &lt;dbl&gt;,\n#   PV7MATH &lt;dbl&gt;, PV8MATH &lt;dbl&gt;, PV9MATH &lt;dbl&gt;, PV10MATH &lt;dbl&gt;, PV1READ &lt;dbl&gt;,\n#   PV2READ &lt;dbl&gt;, PV3READ &lt;dbl&gt;, PV4READ &lt;dbl&gt;, PV5READ &lt;dbl&gt;, PV6READ &lt;dbl&gt;,\n#   PV7READ &lt;dbl&gt;, PV8READ &lt;dbl&gt;, PV9READ &lt;dbl&gt;, PV10READ &lt;dbl&gt;, PV1SCIE &lt;dbl&gt;,\n#   PV2SCIE &lt;dbl&gt;, PV3SCIE &lt;dbl&gt;, PV4SCIE &lt;dbl&gt;, PV5SCIE &lt;dbl&gt;, …\n\n\nThe colSums() function in the base package is used to check for missing values in stu_qqq_SG_final. There are no missing values in the tibble data frame for all most columns except for two:\n\nThe column with the Index of Economic, Social, and Cultural Status (“ESCS”) has 47 rows (observations) with NA values.\nThe column indicating the number of books at home (“ST255Q01JA” has 44 rows (observations) with NA values.\n\nIn total, there are 50 rows with one or more NA values. As this makes up only 0.757% of the 6,606 observations, we will remove them from the subsequent analysis. The na.omit() function in the stats package is used to remove them from stu_qqq_SG_final, which now has 6,556 observations and 36 variables. A confirmatory check is then made with the colSums() function in the base package.\n\ncolSums(is.na(stu_qqq_SG_final))\n\n  CNTSCHID   CNTSTUID    STRATUM  ST004D01T       ESCS ST255Q01JA    PV1MATH \n         0          0          0          0         47         44          0 \n   PV2MATH    PV3MATH    PV4MATH    PV5MATH    PV6MATH    PV7MATH    PV8MATH \n         0          0          0          0          0          0          0 \n   PV9MATH   PV10MATH    PV1READ    PV2READ    PV3READ    PV4READ    PV5READ \n         0          0          0          0          0          0          0 \n   PV6READ    PV7READ    PV8READ    PV9READ   PV10READ    PV1SCIE    PV2SCIE \n         0          0          0          0          0          0          0 \n   PV3SCIE    PV4SCIE    PV5SCIE    PV6SCIE    PV7SCIE    PV8SCIE    PV9SCIE \n         0          0          0          0          0          0          0 \n  PV10SCIE \n         0 \n\n\n\nstu_qqq_SG_final = stu_qqq_SG_final %&gt;%\n  na.omit()\n\n\ncolSums(is.na(stu_qqq_SG_final))\n\n  CNTSCHID   CNTSTUID    STRATUM  ST004D01T       ESCS ST255Q01JA    PV1MATH \n         0          0          0          0          0          0          0 \n   PV2MATH    PV3MATH    PV4MATH    PV5MATH    PV6MATH    PV7MATH    PV8MATH \n         0          0          0          0          0          0          0 \n   PV9MATH   PV10MATH    PV1READ    PV2READ    PV3READ    PV4READ    PV5READ \n         0          0          0          0          0          0          0 \n   PV6READ    PV7READ    PV8READ    PV9READ   PV10READ    PV1SCIE    PV2SCIE \n         0          0          0          0          0          0          0 \n   PV3SCIE    PV4SCIE    PV5SCIE    PV6SCIE    PV7SCIE    PV8SCIE    PV9SCIE \n         0          0          0          0          0          0          0 \n  PV10SCIE \n         0 \n\n\n\n\n\nFor ease of use, the columns are renamed accordingly using the rename() function in the dplyr package.\n\nstu_qqq_SG_final = stu_qqq_SG_final %&gt;%\n  rename(School = \"CNTSCHID\",\n         SchoolType = \"STRATUM\",\n         ID = \"CNTSTUID\",\n         Gender = \"ST004D01T\",\n         SocioeconStatus = \"ESCS\",\n         Books = \"ST255Q01JA\",\n         Math01 = \"PV1MATH\", Math02 = \"PV2MATH\", \n         Math03 = \"PV3MATH\", Math04 = \"PV4MATH\", \n         Math05 = \"PV5MATH\", Math06 = \"PV6MATH\", \n         Math07 = \"PV7MATH\", Math08 = \"PV8MATH\", \n         Math09 = \"PV9MATH\", Math10 = \"PV10MATH\", \n         Read01 = \"PV1READ\", Read02 = \"PV2READ\", \n         Read03 = \"PV3READ\", Read04 = \"PV4READ\", \n         Read05 = \"PV5READ\", Read06 = \"PV6READ\", \n         Read07 = \"PV7READ\", Read08 = \"PV8READ\", \n         Read09 = \"PV9READ\", Read10 = \"PV10READ\", \n         Sci01 = \"PV1SCIE\", Sci02 = \"PV2SCIE\", \n         Sci03 = \"PV3SCIE\", Sci04 = \"PV4SCIE\",\n         Sci05 = \"PV5SCIE\", Sci06 = \"PV6SCIE\", \n         Sci07 = \"PV7SCIE\", Sci08 = \"PV8SCIE\", \n         Sci09 = \"PV9SCIE\", Sci10 = \"PV10SCIE\")\n\nAlso, for the ease of use, the values for Gender, School Type, and Number of Books are replaced with characters using the ifelse() function in the base package.\n\nstu_qqq_SG_final$Gender = ifelse(\n  stu_qqq_SG_final$Gender == 01, \n  \"Female\", \"Male\")\nstu_qqq_SG_final$SchoolType = ifelse(\n  stu_qqq_SG_final$SchoolType == \"SGP01\", \n  \"Public\", \"Private\")\n\nstu_qqq_SG_final = stu_qqq_SG_final %&gt;%\n  mutate(Books = recode(Books, \n                        \"01\" = \"0 Book\",\n                        \"02\" = \"1-10 Books\",\n                        \"03\" = \"11-25 Books\",\n                        \"04\" = \"26-100 Books\",\n                        \"05\" = \"101-200 Books\",\n                        \"06\" = \"201-500 Books\",\n                        \"07\" = \"&gt;500 Books\"))\n\n\n\n\nThere are 10 Plausible Values (PVs) each for Mathematics, Reading, and Science. However, PISA cautions against averaging the PVs at the student level. Instead, it suggests that population statistics should be estimated using each PV separately - e.g., if one is interested in the correlation coefficient between the social index and the reading performance in PISA, 10 correlation coefficients should be computed and then averaged.\nA combination of half-density plot and box plot are plotted for the each of the 10 PVs for each subject. Firstly, the select() function in the dplyr package and the melt() function in the reshape2 package are used to select the relevant columns and transform them into a long table. The variables are then renamed using the rename() function in the dplyr package.\nThe ggplot(), geom_boxplot(), coord_flip() functions in the ggplot2 package, and the stat_halfeye() function in the ggdist package are used to create the plots. The ggtitle() and theme() functions in the ggplot2 package are then used to make aesthetic adjustments to insert the plot title, centre the plot title, and rotate the y-axis label.\n\nMathReadingScience\n\n\n\n\nCode\nmath = stu_qqq_SG_final %&gt;% \n  select(Math01, Math02, Math03, Math04, Math05,\n         Math06, Math07, Math08, Math09, Math10) %&gt;%\n  melt() %&gt;%\n  rename(\"PV\" = \"variable\", \"Score\" = \"value\")\n\nggplot(math, \n       aes(x = PV, \n           y = Score)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .15,\n               outlier.shape = NA) +\n  coord_flip() +\n  ggtitle(\"Distribution of Math Scores for Different PVs\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\n\n\n\n\n\nCode\nread = stu_qqq_SG_final %&gt;% \n  select(Read01, Read02, Read03, Read04, Read05,\n         Read06, Read07, Read08, Read09, Read10) %&gt;%\n  melt() %&gt;%\n  rename(\"PV\" = \"variable\", \"Score\" = \"value\")\n\nggplot(read, \n       aes(x = PV, \n           y = Score)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .15,\n               outlier.shape = NA) +\n  coord_flip() +\n  ggtitle(\"Distribution of Reading Scores for Different PVs\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\n\n\n\n\n\nCode\nsci = stu_qqq_SG_final %&gt;% \n  select(Sci01, Sci02, Sci03, Sci04, Sci05,\n         Sci06, Sci07, Sci08, Sci09, Sci10) %&gt;%\n  melt() %&gt;%\n  rename(\"PV\" = \"variable\", \"Score\" = \"value\")\n\nggplot(sci, \n       aes(x = PV, \n           y = Score)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .15,\n               outlier.shape = NA) +\n  coord_flip() +\n  ggtitle(\"Distribution of Science Scores for Different PVs\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\n\n\n\n\nBased on the plots, the 10 sets of PVs for each subject are broadly similar to one another (similar distributions and similar median values). Hence, for the purposes of this take-home exercise, the PV 1 values for each subject are used.\nThe select() and rename() functions in the dplyr package are used to further narrow down the number of variables chosen to 9 out of the preliminary 36 variables chosen previously, and rename some of the columns for easier identification.\n\nstu_qqq_SG_final = stu_qqq_SG_final %&gt;% \n  select(\"ID\", \"School\", \"SchoolType\", \n            \"Gender\", \"SocioeconStatus\", \n            \"Books\", \n            \"Math01\", \"Read01\", \"Sci01\") %&gt;%\n  rename(\"Mathematics\" = \"Math01\",\n         \"Reading\" = \"Read01\",\n         \"Science\" = \"Sci01\")\n\nThe finalised tibble data frame, stu_qqq_SG_final, is then saved in the rds file format and imported into the R environment.\n\nwrite_rds(stu_qqq_SG_final, \"data/stu_qqq_SG_final.rds\")\n\n\nstu_qqq_SG_final = read_rds(\"data/stu_qqq_SG_final.rds\")\n\n\n\n\n\n\n\nA ridgeline plot is created to visualise the distributions of the Singapore students’ performance for all three subjects within one plot.\nFirstly, the select() function in the dplyr package and the melt() function in the reshape2 package are used to select the relevant columns and transform them into a long table. The variables are then renamed using the rename() function in the dplyr package. The mutate() function in the dplyr package is then used with the “fct_relevel” argument to manually arrange the subjects’ order in the plot.\nThen, the ggplot() and scale_fill_viridis_d() functions in the ggplot2 package, and the stat_density_ridges() function in the ggridges package are used to create the plot. The ggtitle() and theme() functions in the ggplot2 package are then used to make aesthetic adjustments to insert the plot title and subtitle, centre the plot title, and rotate the y-axis label.\n\nPlot 1Code\n\n\n\n\n\n\n\n\n\n\ncomb = stu_qqq_SG_final %&gt;% \n  select(Mathematics, Reading, Science) %&gt;%\n  melt() %&gt;%\n  rename(\"Subject\" = \"variable\", \"Score\" = \"value\") %&gt;%\n  mutate(Subject = fct_relevel(Subject, \n                               \"Mathematics\", \n                               \"Science\", \n                               \"Reading\"))\n\nggplot(comb, \n       aes(x = Score, \n           y = Subject,\n           fill = factor(after_stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\", alpha = 0.8) +\n  ggtitle(label = \"SG Students Generally Perform Better in\\nMathematics than Science & Reading\",\n          subtitle = \"Distribution of Mathematics, Science and Reading Scores\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\nObservation: Based on the plot, we can see that the scores for all three subjects resemble normal distribution. Also, based on the quartile lines, the scores for Mathematics tend to be higher than that for Science and Reading; while the scores of Science tend to be higher than that for Reading. This corresponds to general perceptions that Singapore students tend to be better at technical subjects (such as Mathematics and Science) as compared to subjects related to language skills (such as Reading).\nFuture research in this area may consider the historical trends in the differences between Singapore students’ performance in the three subjects and whether there are societal and economic forces behind such trends.\n\n\n\n\n\nThere is often a stereotype that men are better than women in the areas of science and technology (S&T). In this take-home exercise, we attempt to answer the question: “Are girls weaker than boys at Science in Singapore?” by creating a density plot of the Singapore students’ Science scores by gender.\nFirstly, the filter() function in the dplyr package is used to select the subsets of stu_qqq_SG_final containing the observations for each gender. The mutate() function in the dplyr package is then used with the “fct_relevel” argument to manually arrange the two gender’s order in the plot so that the Female density plot uses the stereotypical/associated colour of pink, while the Male density plot uses the stereotypical/associated colour of blue.\nThen, the ggplot(), geom_density() and geom_vline() functions in the ggplot2 package are used to create the plot and insert vertical lines indicating the median scores for each gender (again, pink for Female, and blue for Male). The ggtitle(), theme(), xlab(), and ylab() functions in the ggplot2 package are then used to make aesthetic adjustments to insert the plot title and subtitle, centre the plot title, rotate the y-axis label, and overwrite the axes’ labels.\n\nPlot 2Code\n\n\n\n\n\n\n\n\n\n\nf = stu_qqq_SG_final %&gt;%\n  filter(Gender == \"Female\")\n\nm = stu_qqq_SG_final %&gt;%\n  filter(Gender == \"Male\")\n\nstu_qqq_SG_final = stu_qqq_SG_final %&gt;%\n  mutate(Gender = fct_relevel(Gender, \n                               \"Male\", \n                               \"Female\"))\n\nggplot(stu_qqq_SG_final,\n       aes(x = Science,\n           fill = Gender)) +\n  geom_density(alpha = 0.5) +\n  geom_vline(aes(xintercept=median(f$Science)),\n             color=\"red\", \n             linetype=\"dashed\", \n             linewidth=1,\n             alpha = 0.5) +\n  geom_vline(aes(xintercept=median(m$Science)),\n             color=\"blue\", \n             linetype=\"dashed\", \n             linewidth=1,\n             alpha = 0.5) +\n  ggtitle(label = \"Girls Are Not Necessarily Weaker in Science\",\n          subtitle= \"Distribution of Science Scores by Gender\") + \n  ylab(\"Density\") + xlab(\"Score\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\nObservation: Based on the plot, the distribution of Science scores for both Male and Female are broadly similar. With slightly more boys than girls on the two ends of the distribution (i.e., either poor or excellent scores), and conversely, more girls than boys in the centre of the distribution (i.e., close to median scores). The median scores for both gender are also very close to each other, with Male slightly higher than Female. This debunks the notion that girls are weaker in Science compared to boys.\nFuture research may consider why a relatively similar distribution in the Science performance of Singapore students at 15-year-old does not translate to a higher proportion of females undertaking S&T endeavours in college and beyond.\n\n\n\nParents in Singapore are often concerned about the type of schools their children enrol in as there is a strong, ingrained belief that some schools (i.e., Private) are better than others (i.e., Public). In this take-home exercise, we attempt to answer the question: “Do students in public schools perform poorer in Mathematics?” by creating a half-eye plot combined with a box plot for the Mathematics scores by type of school.\nFirstly, the filter() function in the dplyr package is used to select the subsets of stu_qqq_SG_final containing the observations for each gender. The mutate() function in the dplyr package is then used with the “fct_relevel” argument to manually arrange the two gender’s order in the plot so that the Female density plot uses the stereotypical/associated colour of pink, while the Male density plot uses the stereotypical/associated colour of blue.\nThe ggplot(), geom_boxplot() and coord_flip() functions in the ggplot2 package are used to create the plot, insert the box plots for each type of school, and change the orientation of the plot. The stat_halfeye() and stat_dots() functions from the ggdist package are used to show the distributions for each type of school. The ggtitle(), theme(), xlab(), and ylab() functions in the ggplot2 package are then used to make aesthetic adjustments to insert the plot title and subtitle, centre the plot title, rotate the y-axis label, and overwrite the axes’ labels.\n\nPlot 3Code\n\n\n\n\n\n\n\n\n\n\nggplot(stu_qqq_SG_final, \n       aes(x = SchoolType, \n           y = Mathematics)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.15,\n               .width = 0,\n               point_colour = NA,\n               scale= 0.55) +\n  geom_boxplot(width = .15,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = 3,\n            dotsize = 0.1) +\n  coord_flip() +\n  ggtitle(label = \"Public Schools Have Both Best and Worst Performing\\n Students in Mathematics\",\n          subtitle= \"Distribution of Mathematics Scores by School Type\") +\n  xlab(\"School\\nType\") + ylab(\"Score\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\nObservation: Based on the plot, the distribution of Mathematics scores for Singapore students in public and private schools differ in the following ways:\n\nThe range of scores in public schools is larger than that in private schools, i.e., public schools have a wider range of student capabilities for Mathematics;\nRelated to above, there is a greater density of students in private schools that perform moderately well (i.e., around the median score for private schools) compared to students from public schools.\nThe median Mathematics score for students in private schools is slightly higher than that for public schools.\n\nIt is important to note from the dot plots that there are a much larger number of students in public schools than private schools, which may mean that the results for private schools may not be representative.\nMore research would need to be conducted to uncover how and why the relationship between the type of school and Mathematics performance are as shown by the various observations. Also, there may be granular differences in Mathematics performance between different public schools.\n\n\n\nResearch has continued to show that socioeconomic status influence academic performance. In this take-home exercise, we attempt to answer the question: “Are Reading scores related to socioeconomic status?” by creating a scatter plot to show the distribution of Reading scores vis-a-vis the Index of Economic, Social, and Cultural Status values.\nThe ggplot(), geom_point() and geom_smooth() functions in the ggplot2 package are used to create the scatter plot, and add a smooth line showing the correlation between the two variables. The stat_cor() function in the ggpubr package is used to generate the correlation coefficient, R, which is 0.41. The ggtitle(), theme(), xlab(), and ylab() functions in the ggplot2 package are then used to make aesthetic adjustments to insert the plot title and subtitle, centre the plot title, rotate the y-axis label, and overwrite the axes’ labels.\n\nPlot 4Code\n\n\n\n\n\n\n\n\n\n\nggplot(data = stu_qqq_SG_final, \n            aes(x = Reading, \n                y = SocioeconStatus)) +   \n  geom_point(alpha = 0.1) +\n  geom_smooth(linewidth = 1, colour = \"pink\") + \n  stat_cor() +\n  ggtitle(label = \"Moderate Positive Correlation between\\nReading Scores and Socioeconomic Status\",\n          subtitle= \"Distribution of Reading Scores vis-a-vis Socioeconomic Status\") +\n  xlab(\"Score\") + ylab(\"Socioeconomic\\nStatus\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\nObservation: Based on the plot, there is no clear linear relationship between Reading scores and socioeconomic status given that the dots are generally well distributed, i.e., there are students with low socioeconomic status (below 0 value) with scores ranging from 200 to 800, as there are students with high socio economic status (above 0 value) with scores ranging from 200 to 800. Nevertheless, there is a higher concentration of students in the 400-600 score range with high socioeconomic status compared to students with low socioeconomic status in the same score range.\nFuture research may consider whether there are better variables that may explain differences in Reading performance.\nFor a start, we consider if a simpler variable such as the number of books may help to explain differences in Reading performance better than the Index of Economic, Social, and Cultural Status values. A ridgeline created to visualise the distributions of the Singapore students’ Reading performance depending on the self-reported number of books at home.\nFirstly, the select() function in the dplyr package and the melt() function in the reshape2 package are used to select the relevant columns and transform them into a long table. The mutate() function in the dplyr package is then used with the “fct_relevel” argument to manually arrange the number of books in ascending order in the plot.\nThen, the ggplot() and scale_fill_viridis_d() functions in the ggplot2 package, and the stat_density_ridges() function in the ggridges package are used to create the plot. The ggtitle() and theme() functions in the ggplot2 package are then used to make aesthetic adjustments to insert the plot title and subtitle, centre the plot title, rotate the y-axis label, and remove the legend.\n\nPlot 5Code\n\n\n\n\n\n\n\n\n\n\nr = stu_qqq_SG_final %&gt;% \n  select(Books, Reading) %&gt;%\n  mutate(Books = fct_relevel(Books, \n                              \"0 Book\", \n                              \"1-10 Books\",\n                              \"11-25 Books\",\n                              \"26-100 Books\",\n                              \"101-200 Books\",\n                              \"201-500 Books\",\n                              \"&gt;500 Books\"))\n                        \nggplot(r, \n       aes(x = Reading, \n           y = Books,\n           fill = factor(after_stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 2,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(alpha = 0.8) +\n  ggtitle(label = \"More Books at Home Generally Correspond\\nto Higher Reading Scores\",\n          subtitle = \"Distribution of Reading Scores vis-a-vis Number of Books at Home\") +\n  xlab(\"Score\") + ylab(\"No.of\\nBooks\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1), \n        legend.position = \"none\")\n\n\n\n\n\n\n\nObservation: Based on the plot, there is a relationship between the number of books at home and the Reading scores. Focusing on the median values for each ridge (as shown by the divider line between the two colours), the values increase as the number of books at home increase. The only exception is the median value of Reading scores for students with more than 500 books at home, which is lower than that for 201-500 books.\nHence, we can see a clearer trend between Reading scores and number of books as compared to that between Reading scores and the Index of Economic, Social, and Cultural Status values. Further analysis can be conducted to determine the correlation coefficient of the relationship and whether the relationship is statistically significant.\n\n\n\n\n\nIn conclusion, the ggplot2 package is a powerful package for exploratory data analysis through visualisation. The PISA performance dataset is interesting and contains useful data for studying Singapore students’ academic performance in the three subjects at age 15. The insights gained from analysing the various questions posed in this take-home exercise provides a preview of the data analyses that can be conducted in further studies to better understand how various factors including gender, type of school, and socioeconomic status affect academic performance, so as to better inform education policy planning in Singapore.\n\n\n\n\nR for Visual Analytics.\nR for Data Science.\nFundamentals of Data Visualisation.\nPISA 2022 Database and Technical Report.\nOECD on Singapore: Rapid Improvement Followed by Strong Performance.\n\n~~~ End of Take-home Exercise 1 ~~~"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#introduction",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#introduction",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Singapore has come a long way since gaining independence in 1965. Without natural resources, human capital development through a well-planned education system is a critical part of Singapore’s transformation from third world to first.\nDespite the success, there is still a correlation between socio-economic status and education achievement, as well as ingrained perceptions that some schools are better than others.\nHence, there is a need to use data to analyse the performance of Singapore students across different subjects, and identify any relationships between the performance in various subjects and factors such as gender, socioeconomic status, and type of school.\n\n\n\nIn this take-home exercise, the objective is to use the appropriate Exploratory Data Analysis (EDA) methods and ggplot2 functions (part of the amazing tidyverse ecosystem) to answer the following analytical questions:\n\nWhat is the distribution of Singapore students’ performance in Mathematics, Reading, and Science? What are the similarities and/or differences between the distributions for the three different subjects?\nAre there relationships between the students’ performance in the three subjects and factors such as their gender, socioeconomic status, and school? If yes, what kind of relationships are present?\n\nBased on the analysis and observations, this take-home exercise also briefly suggests the potential insights can be further studied in future research to better inform education policy planning."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#getting-started",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "The R packages used in this take-home exercise are:\n\nhaven for importing SAS files;\ntidyverse (i.e. readr, tidyr, dplyr, ggplot2) for performing data science tasks such as importing, tidying, and wrangling data, as well as creating graphics based on The Grammar of Graphics;\nreshape2 for transforming data between wide and long formats;\nggthemr for aesthetic themes created by user, Ciarán Tobin;\nggridges for creating ridgeline plots;\nggdist for visualising distributions and uncertainty; and\nggpubr for creating publication ready ggplot2 plots.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed in the computer. If yes, they are then loaded into the R environment. If no, they are installed, and then loaded into the R environment.\n\npacman::p_load(haven, tidyverse, reshape2,\n               ggthemr, ggridges, ggdist,\n               ggpubr)\n\nThe ggthemr() function in the ggthemr package is used to set the default theme of this take-home exercise as “solarized”.\n\nggthemr(\"solarized\")\n\n\n\n\nThe OECD Programme for International Student Assessment (PISA) measures how well 15-year-old students in different countries are “prepared to meet the challenges of today’s knowledge societies” by looking at “their ability to use their knowledge and skills to meet real-life challenges”. The PISA surveys take place very three years, the latest being conducted in 2022.\nThe PISA 2022 database contains the full set of responses from individual students, school principals, and parents. There are a total of five data files and their contents are as follows:\n\nStudent questionnaire data file;\nSchool questionnaire data file;\nTeacher questionnaire data file;\nCognitive item data file; and\nQuestionnaire timing data file.\n\nFor the purpose of this take-home exercise, the “Student questionnaire data file” is used."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-wrangling",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "The dataset used in this take-home exercise is the 2022 PISA student questionnaire data file, cy08msp_stu_qqq.sas7bdat, which is in the SAS file format.\nThe file is imported into the R environment using the read_sas() function in the haven package and stored as the R object, stu_qqq.\n\nstu_qqq = read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nThe tibble data frame, stu_qqq, has 1,279 columns (variables) and 613,744 rows (observations).\n\n\n\nThere are 6,606 rows with the country code (i.e., CNT) value of “SGP”, which represents Singapore. This count is cross-verified by the information provided in the “CY08MSP_STU_QQQ” sheet in the codebook. The codebook also stated that Singapore students’ made up 1.0763% of the entire global student population who took part in the 2022 PISA.\nThe filter() function in the dplyr package is used to obtain these rows, and stored as the R object, stu_qqq_SG.\n\nstu_qqq_SG = stu_qqq %&gt;% filter(CNT == \"SGP\")\n\nThe tibble data frame, stu_qqq_SG, is then saved in the rds file format and imported into the R environment.\n\nwrite_rds(stu_qqq_SG, \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG = read_rds(\"data/stu_qqq_SG.rds\")\n\n\n\n\nOf the 1,279 variables (columns), the following 36 are preliminarily selected to answer the analytical questions:\n\nInternational School ID (“CNTSCHID”);\nInternational Student ID (“CNTSTUID”);\nType of School (“STRATUM”);\n\n“SGP01” is Public Secondary School.\n“SGP03” is Private Secondary School.\n\nStudent Gender (“ST004D01T”);\n\n“01” is Female.\n“02” is Male.\n\nIndex of Economic, Social, and Cultural Status (“ESCS”);\nNumber of Books at Home (“ST255Q01JA”);\n\n“01” is no books”.\n“02” is 1-10 books.\n“03” is 11-25 books.\n“04” is 26-100 books.\n“05” is 101-200 books.\n“06” is 201-500 books.\n“07” is more than 500 books.\n\nPlausible Values 1 to 10 in Mathematics (“PV1MATH” to “PV10MATH”);\nPlausible Values 1 to 10 in Reading (“PV1READ” to “PV10READ”); and\nPlausible Values 1 to 10 in Science (“PV1SCIE” to “PV10SCIE”).\n\nAgain, the select() function in the dplyr package is used to obtain these rows, and stored as the R object, stu_qqq_SG_final.\n\nstu_qqq_SG_final = stu_qqq_SG %&gt;% \n  select(\"CNTSCHID\", \"CNTSTUID\", \"STRATUM\", \"ST004D01T\", \"ESCS\", \"ST255Q01JA\",\n           \"PV1MATH\", \"PV2MATH\", \"PV3MATH\", \"PV4MATH\", \"PV5MATH\", \"PV6MATH\", \n           \"PV7MATH\", \"PV8MATH\", \"PV9MATH\", \"PV10MATH\", \"PV1READ\", \"PV2READ\", \n           \"PV3READ\", \"PV4READ\", \"PV5READ\", \"PV6READ\", \"PV7READ\", \"PV8READ\", \n           \"PV9READ\", \"PV10READ\", \"PV1SCIE\", \"PV2SCIE\", \"PV3SCIE\", \"PV4SCIE\", \n           \"PV5SCIE\", \"PV6SCIE\", \"PV7SCIE\", \"PV8SCIE\", \"PV9SCIE\", \"PV10SCIE\")\n\n\n\n\nThe dataset from PISA is expected to be relatively clean. Nevertheless, due diligence checks for duplicates and missing values are still made to confirm the assumption.\nThe duplicated() function in the base package is used to check for duplicates in stu_qqq_SG_final. There are no duplicates in the tibble data frame.\n\nstu_qqq_SG_final[duplicated(stu_qqq_SG_final), ]\n\n# A tibble: 0 × 36\n# ℹ 36 variables: CNTSCHID &lt;dbl&gt;, CNTSTUID &lt;dbl&gt;, STRATUM &lt;chr&gt;,\n#   ST004D01T &lt;dbl&gt;, ESCS &lt;dbl&gt;, ST255Q01JA &lt;dbl&gt;, PV1MATH &lt;dbl&gt;,\n#   PV2MATH &lt;dbl&gt;, PV3MATH &lt;dbl&gt;, PV4MATH &lt;dbl&gt;, PV5MATH &lt;dbl&gt;, PV6MATH &lt;dbl&gt;,\n#   PV7MATH &lt;dbl&gt;, PV8MATH &lt;dbl&gt;, PV9MATH &lt;dbl&gt;, PV10MATH &lt;dbl&gt;, PV1READ &lt;dbl&gt;,\n#   PV2READ &lt;dbl&gt;, PV3READ &lt;dbl&gt;, PV4READ &lt;dbl&gt;, PV5READ &lt;dbl&gt;, PV6READ &lt;dbl&gt;,\n#   PV7READ &lt;dbl&gt;, PV8READ &lt;dbl&gt;, PV9READ &lt;dbl&gt;, PV10READ &lt;dbl&gt;, PV1SCIE &lt;dbl&gt;,\n#   PV2SCIE &lt;dbl&gt;, PV3SCIE &lt;dbl&gt;, PV4SCIE &lt;dbl&gt;, PV5SCIE &lt;dbl&gt;, …\n\n\nThe colSums() function in the base package is used to check for missing values in stu_qqq_SG_final. There are no missing values in the tibble data frame for all most columns except for two:\n\nThe column with the Index of Economic, Social, and Cultural Status (“ESCS”) has 47 rows (observations) with NA values.\nThe column indicating the number of books at home (“ST255Q01JA” has 44 rows (observations) with NA values.\n\nIn total, there are 50 rows with one or more NA values. As this makes up only 0.757% of the 6,606 observations, we will remove them from the subsequent analysis. The na.omit() function in the stats package is used to remove them from stu_qqq_SG_final, which now has 6,556 observations and 36 variables. A confirmatory check is then made with the colSums() function in the base package.\n\ncolSums(is.na(stu_qqq_SG_final))\n\n  CNTSCHID   CNTSTUID    STRATUM  ST004D01T       ESCS ST255Q01JA    PV1MATH \n         0          0          0          0         47         44          0 \n   PV2MATH    PV3MATH    PV4MATH    PV5MATH    PV6MATH    PV7MATH    PV8MATH \n         0          0          0          0          0          0          0 \n   PV9MATH   PV10MATH    PV1READ    PV2READ    PV3READ    PV4READ    PV5READ \n         0          0          0          0          0          0          0 \n   PV6READ    PV7READ    PV8READ    PV9READ   PV10READ    PV1SCIE    PV2SCIE \n         0          0          0          0          0          0          0 \n   PV3SCIE    PV4SCIE    PV5SCIE    PV6SCIE    PV7SCIE    PV8SCIE    PV9SCIE \n         0          0          0          0          0          0          0 \n  PV10SCIE \n         0 \n\n\n\nstu_qqq_SG_final = stu_qqq_SG_final %&gt;%\n  na.omit()\n\n\ncolSums(is.na(stu_qqq_SG_final))\n\n  CNTSCHID   CNTSTUID    STRATUM  ST004D01T       ESCS ST255Q01JA    PV1MATH \n         0          0          0          0          0          0          0 \n   PV2MATH    PV3MATH    PV4MATH    PV5MATH    PV6MATH    PV7MATH    PV8MATH \n         0          0          0          0          0          0          0 \n   PV9MATH   PV10MATH    PV1READ    PV2READ    PV3READ    PV4READ    PV5READ \n         0          0          0          0          0          0          0 \n   PV6READ    PV7READ    PV8READ    PV9READ   PV10READ    PV1SCIE    PV2SCIE \n         0          0          0          0          0          0          0 \n   PV3SCIE    PV4SCIE    PV5SCIE    PV6SCIE    PV7SCIE    PV8SCIE    PV9SCIE \n         0          0          0          0          0          0          0 \n  PV10SCIE \n         0 \n\n\n\n\n\nFor ease of use, the columns are renamed accordingly using the rename() function in the dplyr package.\n\nstu_qqq_SG_final = stu_qqq_SG_final %&gt;%\n  rename(School = \"CNTSCHID\",\n         SchoolType = \"STRATUM\",\n         ID = \"CNTSTUID\",\n         Gender = \"ST004D01T\",\n         SocioeconStatus = \"ESCS\",\n         Books = \"ST255Q01JA\",\n         Math01 = \"PV1MATH\", Math02 = \"PV2MATH\", \n         Math03 = \"PV3MATH\", Math04 = \"PV4MATH\", \n         Math05 = \"PV5MATH\", Math06 = \"PV6MATH\", \n         Math07 = \"PV7MATH\", Math08 = \"PV8MATH\", \n         Math09 = \"PV9MATH\", Math10 = \"PV10MATH\", \n         Read01 = \"PV1READ\", Read02 = \"PV2READ\", \n         Read03 = \"PV3READ\", Read04 = \"PV4READ\", \n         Read05 = \"PV5READ\", Read06 = \"PV6READ\", \n         Read07 = \"PV7READ\", Read08 = \"PV8READ\", \n         Read09 = \"PV9READ\", Read10 = \"PV10READ\", \n         Sci01 = \"PV1SCIE\", Sci02 = \"PV2SCIE\", \n         Sci03 = \"PV3SCIE\", Sci04 = \"PV4SCIE\",\n         Sci05 = \"PV5SCIE\", Sci06 = \"PV6SCIE\", \n         Sci07 = \"PV7SCIE\", Sci08 = \"PV8SCIE\", \n         Sci09 = \"PV9SCIE\", Sci10 = \"PV10SCIE\")\n\nAlso, for the ease of use, the values for Gender, School Type, and Number of Books are replaced with characters using the ifelse() function in the base package.\n\nstu_qqq_SG_final$Gender = ifelse(\n  stu_qqq_SG_final$Gender == 01, \n  \"Female\", \"Male\")\nstu_qqq_SG_final$SchoolType = ifelse(\n  stu_qqq_SG_final$SchoolType == \"SGP01\", \n  \"Public\", \"Private\")\n\nstu_qqq_SG_final = stu_qqq_SG_final %&gt;%\n  mutate(Books = recode(Books, \n                        \"01\" = \"0 Book\",\n                        \"02\" = \"1-10 Books\",\n                        \"03\" = \"11-25 Books\",\n                        \"04\" = \"26-100 Books\",\n                        \"05\" = \"101-200 Books\",\n                        \"06\" = \"201-500 Books\",\n                        \"07\" = \"&gt;500 Books\"))\n\n\n\n\nThere are 10 Plausible Values (PVs) each for Mathematics, Reading, and Science. However, PISA cautions against averaging the PVs at the student level. Instead, it suggests that population statistics should be estimated using each PV separately - e.g., if one is interested in the correlation coefficient between the social index and the reading performance in PISA, 10 correlation coefficients should be computed and then averaged.\nA combination of half-density plot and box plot are plotted for the each of the 10 PVs for each subject. Firstly, the select() function in the dplyr package and the melt() function in the reshape2 package are used to select the relevant columns and transform them into a long table. The variables are then renamed using the rename() function in the dplyr package.\nThe ggplot(), geom_boxplot(), coord_flip() functions in the ggplot2 package, and the stat_halfeye() function in the ggdist package are used to create the plots. The ggtitle() and theme() functions in the ggplot2 package are then used to make aesthetic adjustments to insert the plot title, centre the plot title, and rotate the y-axis label.\n\nMathReadingScience\n\n\n\n\nCode\nmath = stu_qqq_SG_final %&gt;% \n  select(Math01, Math02, Math03, Math04, Math05,\n         Math06, Math07, Math08, Math09, Math10) %&gt;%\n  melt() %&gt;%\n  rename(\"PV\" = \"variable\", \"Score\" = \"value\")\n\nggplot(math, \n       aes(x = PV, \n           y = Score)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .15,\n               outlier.shape = NA) +\n  coord_flip() +\n  ggtitle(\"Distribution of Math Scores for Different PVs\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\n\n\n\n\n\nCode\nread = stu_qqq_SG_final %&gt;% \n  select(Read01, Read02, Read03, Read04, Read05,\n         Read06, Read07, Read08, Read09, Read10) %&gt;%\n  melt() %&gt;%\n  rename(\"PV\" = \"variable\", \"Score\" = \"value\")\n\nggplot(read, \n       aes(x = PV, \n           y = Score)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .15,\n               outlier.shape = NA) +\n  coord_flip() +\n  ggtitle(\"Distribution of Reading Scores for Different PVs\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\n\n\n\n\n\nCode\nsci = stu_qqq_SG_final %&gt;% \n  select(Sci01, Sci02, Sci03, Sci04, Sci05,\n         Sci06, Sci07, Sci08, Sci09, Sci10) %&gt;%\n  melt() %&gt;%\n  rename(\"PV\" = \"variable\", \"Score\" = \"value\")\n\nggplot(sci, \n       aes(x = PV, \n           y = Score)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .15,\n               outlier.shape = NA) +\n  coord_flip() +\n  ggtitle(\"Distribution of Science Scores for Different PVs\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\n\n\n\n\nBased on the plots, the 10 sets of PVs for each subject are broadly similar to one another (similar distributions and similar median values). Hence, for the purposes of this take-home exercise, the PV 1 values for each subject are used.\nThe select() and rename() functions in the dplyr package are used to further narrow down the number of variables chosen to 9 out of the preliminary 36 variables chosen previously, and rename some of the columns for easier identification.\n\nstu_qqq_SG_final = stu_qqq_SG_final %&gt;% \n  select(\"ID\", \"School\", \"SchoolType\", \n            \"Gender\", \"SocioeconStatus\", \n            \"Books\", \n            \"Math01\", \"Read01\", \"Sci01\") %&gt;%\n  rename(\"Mathematics\" = \"Math01\",\n         \"Reading\" = \"Read01\",\n         \"Science\" = \"Sci01\")\n\nThe finalised tibble data frame, stu_qqq_SG_final, is then saved in the rds file format and imported into the R environment.\n\nwrite_rds(stu_qqq_SG_final, \"data/stu_qqq_SG_final.rds\")\n\n\nstu_qqq_SG_final = read_rds(\"data/stu_qqq_SG_final.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis---computing-visualising-and-deriving-insights-on-singapores-pisa-performance",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis---computing-visualising-and-deriving-insights-on-singapores-pisa-performance",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "A ridgeline plot is created to visualise the distributions of the Singapore students’ performance for all three subjects within one plot.\nFirstly, the select() function in the dplyr package and the melt() function in the reshape2 package are used to select the relevant columns and transform them into a long table. The variables are then renamed using the rename() function in the dplyr package. The mutate() function in the dplyr package is then used with the “fct_relevel” argument to manually arrange the subjects’ order in the plot.\nThen, the ggplot() and scale_fill_viridis_d() functions in the ggplot2 package, and the stat_density_ridges() function in the ggridges package are used to create the plot. The ggtitle() and theme() functions in the ggplot2 package are then used to make aesthetic adjustments to insert the plot title and subtitle, centre the plot title, and rotate the y-axis label.\n\nPlot 1Code\n\n\n\n\n\n\n\n\n\n\ncomb = stu_qqq_SG_final %&gt;% \n  select(Mathematics, Reading, Science) %&gt;%\n  melt() %&gt;%\n  rename(\"Subject\" = \"variable\", \"Score\" = \"value\") %&gt;%\n  mutate(Subject = fct_relevel(Subject, \n                               \"Mathematics\", \n                               \"Science\", \n                               \"Reading\"))\n\nggplot(comb, \n       aes(x = Score, \n           y = Subject,\n           fill = factor(after_stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\", alpha = 0.8) +\n  ggtitle(label = \"SG Students Generally Perform Better in\\nMathematics than Science & Reading\",\n          subtitle = \"Distribution of Mathematics, Science and Reading Scores\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\nObservation: Based on the plot, we can see that the scores for all three subjects resemble normal distribution. Also, based on the quartile lines, the scores for Mathematics tend to be higher than that for Science and Reading; while the scores of Science tend to be higher than that for Reading. This corresponds to general perceptions that Singapore students tend to be better at technical subjects (such as Mathematics and Science) as compared to subjects related to language skills (such as Reading).\nFuture research in this area may consider the historical trends in the differences between Singapore students’ performance in the three subjects and whether there are societal and economic forces behind such trends.\n\n\n\n\n\nThere is often a stereotype that men are better than women in the areas of science and technology (S&T). In this take-home exercise, we attempt to answer the question: “Are girls weaker than boys at Science in Singapore?” by creating a density plot of the Singapore students’ Science scores by gender.\nFirstly, the filter() function in the dplyr package is used to select the subsets of stu_qqq_SG_final containing the observations for each gender. The mutate() function in the dplyr package is then used with the “fct_relevel” argument to manually arrange the two gender’s order in the plot so that the Female density plot uses the stereotypical/associated colour of pink, while the Male density plot uses the stereotypical/associated colour of blue.\nThen, the ggplot(), geom_density() and geom_vline() functions in the ggplot2 package are used to create the plot and insert vertical lines indicating the median scores for each gender (again, pink for Female, and blue for Male). The ggtitle(), theme(), xlab(), and ylab() functions in the ggplot2 package are then used to make aesthetic adjustments to insert the plot title and subtitle, centre the plot title, rotate the y-axis label, and overwrite the axes’ labels.\n\nPlot 2Code\n\n\n\n\n\n\n\n\n\n\nf = stu_qqq_SG_final %&gt;%\n  filter(Gender == \"Female\")\n\nm = stu_qqq_SG_final %&gt;%\n  filter(Gender == \"Male\")\n\nstu_qqq_SG_final = stu_qqq_SG_final %&gt;%\n  mutate(Gender = fct_relevel(Gender, \n                               \"Male\", \n                               \"Female\"))\n\nggplot(stu_qqq_SG_final,\n       aes(x = Science,\n           fill = Gender)) +\n  geom_density(alpha = 0.5) +\n  geom_vline(aes(xintercept=median(f$Science)),\n             color=\"red\", \n             linetype=\"dashed\", \n             linewidth=1,\n             alpha = 0.5) +\n  geom_vline(aes(xintercept=median(m$Science)),\n             color=\"blue\", \n             linetype=\"dashed\", \n             linewidth=1,\n             alpha = 0.5) +\n  ggtitle(label = \"Girls Are Not Necessarily Weaker in Science\",\n          subtitle= \"Distribution of Science Scores by Gender\") + \n  ylab(\"Density\") + xlab(\"Score\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\nObservation: Based on the plot, the distribution of Science scores for both Male and Female are broadly similar. With slightly more boys than girls on the two ends of the distribution (i.e., either poor or excellent scores), and conversely, more girls than boys in the centre of the distribution (i.e., close to median scores). The median scores for both gender are also very close to each other, with Male slightly higher than Female. This debunks the notion that girls are weaker in Science compared to boys.\nFuture research may consider why a relatively similar distribution in the Science performance of Singapore students at 15-year-old does not translate to a higher proportion of females undertaking S&T endeavours in college and beyond.\n\n\n\nParents in Singapore are often concerned about the type of schools their children enrol in as there is a strong, ingrained belief that some schools (i.e., Private) are better than others (i.e., Public). In this take-home exercise, we attempt to answer the question: “Do students in public schools perform poorer in Mathematics?” by creating a half-eye plot combined with a box plot for the Mathematics scores by type of school.\nFirstly, the filter() function in the dplyr package is used to select the subsets of stu_qqq_SG_final containing the observations for each gender. The mutate() function in the dplyr package is then used with the “fct_relevel” argument to manually arrange the two gender’s order in the plot so that the Female density plot uses the stereotypical/associated colour of pink, while the Male density plot uses the stereotypical/associated colour of blue.\nThe ggplot(), geom_boxplot() and coord_flip() functions in the ggplot2 package are used to create the plot, insert the box plots for each type of school, and change the orientation of the plot. The stat_halfeye() and stat_dots() functions from the ggdist package are used to show the distributions for each type of school. The ggtitle(), theme(), xlab(), and ylab() functions in the ggplot2 package are then used to make aesthetic adjustments to insert the plot title and subtitle, centre the plot title, rotate the y-axis label, and overwrite the axes’ labels.\n\nPlot 3Code\n\n\n\n\n\n\n\n\n\n\nggplot(stu_qqq_SG_final, \n       aes(x = SchoolType, \n           y = Mathematics)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.15,\n               .width = 0,\n               point_colour = NA,\n               scale= 0.55) +\n  geom_boxplot(width = .15,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = 3,\n            dotsize = 0.1) +\n  coord_flip() +\n  ggtitle(label = \"Public Schools Have Both Best and Worst Performing\\n Students in Mathematics\",\n          subtitle= \"Distribution of Mathematics Scores by School Type\") +\n  xlab(\"School\\nType\") + ylab(\"Score\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\nObservation: Based on the plot, the distribution of Mathematics scores for Singapore students in public and private schools differ in the following ways:\n\nThe range of scores in public schools is larger than that in private schools, i.e., public schools have a wider range of student capabilities for Mathematics;\nRelated to above, there is a greater density of students in private schools that perform moderately well (i.e., around the median score for private schools) compared to students from public schools.\nThe median Mathematics score for students in private schools is slightly higher than that for public schools.\n\nIt is important to note from the dot plots that there are a much larger number of students in public schools than private schools, which may mean that the results for private schools may not be representative.\nMore research would need to be conducted to uncover how and why the relationship between the type of school and Mathematics performance are as shown by the various observations. Also, there may be granular differences in Mathematics performance between different public schools.\n\n\n\nResearch has continued to show that socioeconomic status influence academic performance. In this take-home exercise, we attempt to answer the question: “Are Reading scores related to socioeconomic status?” by creating a scatter plot to show the distribution of Reading scores vis-a-vis the Index of Economic, Social, and Cultural Status values.\nThe ggplot(), geom_point() and geom_smooth() functions in the ggplot2 package are used to create the scatter plot, and add a smooth line showing the correlation between the two variables. The stat_cor() function in the ggpubr package is used to generate the correlation coefficient, R, which is 0.41. The ggtitle(), theme(), xlab(), and ylab() functions in the ggplot2 package are then used to make aesthetic adjustments to insert the plot title and subtitle, centre the plot title, rotate the y-axis label, and overwrite the axes’ labels.\n\nPlot 4Code\n\n\n\n\n\n\n\n\n\n\nggplot(data = stu_qqq_SG_final, \n            aes(x = Reading, \n                y = SocioeconStatus)) +   \n  geom_point(alpha = 0.1) +\n  geom_smooth(linewidth = 1, colour = \"pink\") + \n  stat_cor() +\n  ggtitle(label = \"Moderate Positive Correlation between\\nReading Scores and Socioeconomic Status\",\n          subtitle= \"Distribution of Reading Scores vis-a-vis Socioeconomic Status\") +\n  xlab(\"Score\") + ylab(\"Socioeconomic\\nStatus\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\nObservation: Based on the plot, there is no clear linear relationship between Reading scores and socioeconomic status given that the dots are generally well distributed, i.e., there are students with low socioeconomic status (below 0 value) with scores ranging from 200 to 800, as there are students with high socio economic status (above 0 value) with scores ranging from 200 to 800. Nevertheless, there is a higher concentration of students in the 400-600 score range with high socioeconomic status compared to students with low socioeconomic status in the same score range.\nFuture research may consider whether there are better variables that may explain differences in Reading performance.\nFor a start, we consider if a simpler variable such as the number of books may help to explain differences in Reading performance better than the Index of Economic, Social, and Cultural Status values. A ridgeline created to visualise the distributions of the Singapore students’ Reading performance depending on the self-reported number of books at home.\nFirstly, the select() function in the dplyr package and the melt() function in the reshape2 package are used to select the relevant columns and transform them into a long table. The mutate() function in the dplyr package is then used with the “fct_relevel” argument to manually arrange the number of books in ascending order in the plot.\nThen, the ggplot() and scale_fill_viridis_d() functions in the ggplot2 package, and the stat_density_ridges() function in the ggridges package are used to create the plot. The ggtitle() and theme() functions in the ggplot2 package are then used to make aesthetic adjustments to insert the plot title and subtitle, centre the plot title, rotate the y-axis label, and remove the legend.\n\nPlot 5Code\n\n\n\n\n\n\n\n\n\n\nr = stu_qqq_SG_final %&gt;% \n  select(Books, Reading) %&gt;%\n  mutate(Books = fct_relevel(Books, \n                              \"0 Book\", \n                              \"1-10 Books\",\n                              \"11-25 Books\",\n                              \"26-100 Books\",\n                              \"101-200 Books\",\n                              \"201-500 Books\",\n                              \"&gt;500 Books\"))\n                        \nggplot(r, \n       aes(x = Reading, \n           y = Books,\n           fill = factor(after_stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 2,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(alpha = 0.8) +\n  ggtitle(label = \"More Books at Home Generally Correspond\\nto Higher Reading Scores\",\n          subtitle = \"Distribution of Reading Scores vis-a-vis Number of Books at Home\") +\n  xlab(\"Score\") + ylab(\"No.of\\nBooks\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1), \n        legend.position = \"none\")\n\n\n\n\n\n\n\nObservation: Based on the plot, there is a relationship between the number of books at home and the Reading scores. Focusing on the median values for each ridge (as shown by the divider line between the two colours), the values increase as the number of books at home increase. The only exception is the median value of Reading scores for students with more than 500 books at home, which is lower than that for 201-500 books.\nHence, we can see a clearer trend between Reading scores and number of books as compared to that between Reading scores and the Index of Economic, Social, and Cultural Status values. Further analysis can be conducted to determine the correlation coefficient of the relationship and whether the relationship is statistically significant."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "In conclusion, the ggplot2 package is a powerful package for exploratory data analysis through visualisation. The PISA performance dataset is interesting and contains useful data for studying Singapore students’ academic performance in the three subjects at age 15. The insights gained from analysing the various questions posed in this take-home exercise provides a preview of the data analyses that can be conducted in further studies to better understand how various factors including gender, type of school, and socioeconomic status affect academic performance, so as to better inform education policy planning in Singapore."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#key-references",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#key-references",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "R for Visual Analytics.\nR for Data Science.\nFundamentals of Data Visualisation.\nPISA 2022 Database and Technical Report.\nOECD on Singapore: Rapid Improvement Followed by Strong Performance.\n\n~~~ End of Take-home Exercise 1 ~~~"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "&lt;placeholder&gt;\n~~~ End of In-class Exercise 4 ~~~"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "Note: Updated on 18 January 2024 to make editorial edits."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#overview-and-learning-outcomes",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#overview-and-learning-outcomes",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "1 Overview and Learning Outcomes",
    "text": "1 Overview and Learning Outcomes\nThis is the in-class exercise 1.\nThe learning outcomes are to load the relevant R packages and import the required dataset into the environment."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "2 Loading R Packages",
    "text": "2 Loading R Packages\nIn this in-class exercise, two R packages will be used. They are:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data; and\nhaven for importing SAS files.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed in the computer. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-data",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "3 Importing Data",
    "text": "3 Importing Data\nThe dataset used in this in-class exercise is the PISA 2022 student questionnaire data file, which is in the SAS file format. It is imported into the R environment using the read_sas() function in the haven package and stored as the R object, stu_qqq.\n\nstu_qqq = read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nThe tibble data frame, stu_qqq, has 1,279 columns (variables) and 613,744 rows (observations).\nThere are 6,606 rows with the country code “SGP”, which represents Singapore. The filter() function in the dplyr package is used to obtain these rows, and stored as the R object, stu_qqq_SG.\n\nstu_qqq_SG = stu_qqq %&gt;% filter(CNT == \"SGP\")\n\nThe tibble data frame, stu_qqq_SG, is then saved in the rds file format and imported into the R environment.\n\nwrite_rds(stu_qqq_SG, \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG = read_rds(\"data/stu_qqq_SG.rds\")\n\n~~~ End of In-class Exercise 1 ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 3 of the R for Visual Analytics book.\nThe learning outcome is to create interactive data visualisation using functions in the ggiraph and plotlyr package.\n\n\n\n\n\nIn this hands-on exercise, the following R packages are used:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\npatchwork for preparing composite figures created using ggplot2;\nDT for interfacing with JavaScript library DataTables that create interactive tables on html pages;\nggiraph for making ggplot graphics interactive;\nplotlyr for plotting interactive statistical graphs; and\ncrosstalk for inter-widget interactivity for html widgets.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse, patchwork,\n               DT, ggiraph, plotly,\n               crosstalk)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_csv() function in the readr package and stored as the R object, exam_data.\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nThe tibble data frame, exam_data, has 7 columns and 322 rows.\n\nIt consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.\nThe 7 variables/attributes are:\n\nCategorical: ID, CLASS, GENDER, and RACE.\nContinuous: MATHS, ENGLISH, and SCIENCE.\n\n\n\n\n\n\nThe ggiraph package is an html widget and a ggplot2 extension that allows ggplot graphics to be interactive. This is achieved using the interactive geometries that can understand three arguments:\n\ntooltip: a column of datasets that contain tooltips to be displayed when the mouse is pointing to the elements.;\nonclick: a column of datasets that contain a JavaScript function to be executed when the elements are clicked on; and\ndata_id: a column of datasets that contain an ID to be associated with the elements.\n\nIf used within a Shiny application, the elements associated with an ID (data_id) can be selected and manipulated on the client and server sides.\n\n\nA typical code chunk to plot an interactive statistical graph using functions in the ggiraph package consists of two parts:\n\nAn interactive version of a ggplot object is created using the geom_dotplot_interactive() function; and\nThe girafe() function is then used to generate an interactive svg object to be displayed on the html page.\n\nThe “tooltip” aesthetic argument of the geom_dotplot_interactive() function is used to specify the field that will be displayed in the tooltip.\nIn the plot below, when the mouse pointer hovers over a data point of interest, the student’s ID is displayed.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np1 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\ngirafe(ggobj = p1,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object. A new field, tooltip, was created in the tibble data frame, exam_data. It is populated with information from the ID and CLASS fields. This tooltip is then used in place of ID in the “tooltip” aesthetic argument of the geom_dotplot_interactive() function.\nWhen the mouse pointer hovers over a data point of interest, the student’s ID and class are displayed.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nexam_data$tooltip = c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np2 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p2,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\nThe opts_tooltip() function in the ggiraph package is used to customise the tooltip rendering by adding css declarations.\n\nNote: The background for the tooltip has been changed from black to white colour, and the text colour has been changed from white to black.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip_css = \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\ngirafe(ggobj = p2,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(    #&lt;&lt;\n         opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n      )\n\n\n\n\n\n\n\nDerived statistics can also be displayed in a tooltip. In the example below, a function is used to compute the 90% confidence interval of the mean of Maths scores by RACE are plotted in a bar chart.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip = function(y, ymax, accuracy = .01) {\n  mean = scales::number(y, accuracy = accuracy)\n  sem = scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean Maths Scores:\", mean, \"+/-\", sem)\n}\n\ngg_point = ggplot(data = exam_data, \n                   aes(x = RACE)) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\") +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2)\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\nThe “data_id” aesthetic argument of the geom_dotplot_interactive() function is used to show associated elements of the same designated field.\nIn the plot below, elements of the same CLASS are highlighted when the mouse hovers over any one of them.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np3 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(ggobj = p3,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\nThe highlighting effect can be changed using css codes to show the selected associated elements and fade the non-selected elements.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngirafe(ggobj = p3,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")))\n\n\n\n\n\n\n\nThe tooltip and hover effect can be combined in an interactive statistical graph.\nThe associated elements are highlighted when the mouse hovers over one of them. At the same time, the tooltip will show which CLASS the highlighted elements belong to.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np4 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p4,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")))\n\n\n\n\n\n\n\nFinally, the “onclick” aesthetic argument of the geom_dotplot_interactive() function is used to provide hotlink interactivity on the web.\nUpon clicking one of the elements, the web document link will open.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nexam_data$onclick = sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np5 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p5,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\nThe coordinated multiple views methods can be used to show corresponding data points based on the same ID, with the following steps:\n\nAppropriate interactive functions of the ggiraph package is used to create the multiple views.\nThe patchwork package is used inside the girafe() function to create the interactive coordinated multiple views.\n\n\nNote: The “data_id” aesthetic argument is critical to link observations between plots and the”tooltip” aesthetic argument is optional but nice to have when the mouse hovers over a point.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np6 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim = c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np7 = ggplot(data = exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim = c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p6 + p7), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")))\n\n\n\n\n\n\n\n\nThe plotly package can be used to create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the Grammar of Graphics. Unlike other plotly platforms, plot.R is free and open-source.\nThere are two ways to create an interactive graph using the plotly package:\n\nUsing the plot_ly() function; and\nUsing the ggplotly() function.\n\n\n\nA basic interactive plot is created using the plot_ly() function.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nThe “colour” argument is used to map a qualitative visual variable (e.g. RACE).\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\nA basic interactive plot is created using the gglotly() function.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np8 = ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\nggplotly(p8)\n\n\n\n\n\n\n\nA coordinated linked plot can be created using the plotly package function in three steps:\n\nThe highlight_key() function in the plotly package is used as shared data.\nThe two scatterplots are created by using functions in the ggplot2 package.\nThe subplot() function in the plotly package is used to place the two scatterplots side-by-side.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nd = highlight_key(exam_data)\np9 = ggplot(data = d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\np10 = ggplot(data = d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\nsubplot(ggplotly(p9),\n        ggplotly(p10))\n\n\n\n\n\n\n\n\nThe DT package provides interfacing with JavaScript library DataTables that create interactive tables on html page. Data objects in R can be rendered as HTML tables using the JavaScript library DataTables (typically via R Markdown or Shiny).\n\ndatatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends the package with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\nCoordinated brushing is implemented using:\n\nThe highlight() function in the plotly package sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nThe bscols() function in the crosstalk package makes it easy to put html elements side by side. It is especially designed to work in an R Markdown document.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np11 = ggplot(d,\n             aes(ENGLISH, MATHS)) + \n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\ngg = highlight(ggplotly(p11),\n               \"plotly_selected\")  \n\nbscols(gg, \n       datatable(d), \n       widths = 5)\n\n\n\n\n\n\n\n\n\n\n\nggiraph and example.\nHow to Plot With ggiraph.\nInteractive map of France with ggiraph.\nCustom Interactive Sunbursts with ggplot in R.\n\n\n\n\n\nGetting Started with plotly in R\nA collection of plotly R graphs.\nCarson Sievert (2020) Interactive Web-based Data Visualization with R, plotly, and Shiny, Chapman and Hall/CRC. Online version.\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of plotly’s R API.\ngganimate and example.\nBuilding An Animation Step-by-Step with gganimate.\nCreating A Composite gif with Multiple gganimate Panels.\n\n~~~ End of Hands-on Exercise 3A ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#overview-and-learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#overview-and-learning-outcomes",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 3 of the R for Visual Analytics book.\nThe learning outcome is to create interactive data visualisation using functions in the ggiraph and plotlyr package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#getting-started",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this hands-on exercise, the following R packages are used:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\npatchwork for preparing composite figures created using ggplot2;\nDT for interfacing with JavaScript library DataTables that create interactive tables on html pages;\nggiraph for making ggplot graphics interactive;\nplotlyr for plotting interactive statistical graphs; and\ncrosstalk for inter-widget interactivity for html widgets.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse, patchwork,\n               DT, ggiraph, plotly,\n               crosstalk)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_csv() function in the readr package and stored as the R object, exam_data.\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nThe tibble data frame, exam_data, has 7 columns and 322 rows.\n\nIt consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.\nThe 7 variables/attributes are:\n\nCategorical: ID, CLASS, GENDER, and RACE.\nContinuous: MATHS, ENGLISH, and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation-ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation-ggiraph-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "The ggiraph package is an html widget and a ggplot2 extension that allows ggplot graphics to be interactive. This is achieved using the interactive geometries that can understand three arguments:\n\ntooltip: a column of datasets that contain tooltips to be displayed when the mouse is pointing to the elements.;\nonclick: a column of datasets that contain a JavaScript function to be executed when the elements are clicked on; and\ndata_id: a column of datasets that contain an ID to be associated with the elements.\n\nIf used within a Shiny application, the elements associated with an ID (data_id) can be selected and manipulated on the client and server sides.\n\n\nA typical code chunk to plot an interactive statistical graph using functions in the ggiraph package consists of two parts:\n\nAn interactive version of a ggplot object is created using the geom_dotplot_interactive() function; and\nThe girafe() function is then used to generate an interactive svg object to be displayed on the html page.\n\nThe “tooltip” aesthetic argument of the geom_dotplot_interactive() function is used to specify the field that will be displayed in the tooltip.\nIn the plot below, when the mouse pointer hovers over a data point of interest, the student’s ID is displayed.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np1 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\ngirafe(ggobj = p1,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object. A new field, tooltip, was created in the tibble data frame, exam_data. It is populated with information from the ID and CLASS fields. This tooltip is then used in place of ID in the “tooltip” aesthetic argument of the geom_dotplot_interactive() function.\nWhen the mouse pointer hovers over a data point of interest, the student’s ID and class are displayed.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nexam_data$tooltip = c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np2 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p2,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\nThe opts_tooltip() function in the ggiraph package is used to customise the tooltip rendering by adding css declarations.\n\nNote: The background for the tooltip has been changed from black to white colour, and the text colour has been changed from white to black.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip_css = \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\ngirafe(ggobj = p2,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(    #&lt;&lt;\n         opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n      )\n\n\n\n\n\n\n\nDerived statistics can also be displayed in a tooltip. In the example below, a function is used to compute the 90% confidence interval of the mean of Maths scores by RACE are plotted in a bar chart.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip = function(y, ymax, accuracy = .01) {\n  mean = scales::number(y, accuracy = accuracy)\n  sem = scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean Maths Scores:\", mean, \"+/-\", sem)\n}\n\ngg_point = ggplot(data = exam_data, \n                   aes(x = RACE)) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\") +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2)\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\nThe “data_id” aesthetic argument of the geom_dotplot_interactive() function is used to show associated elements of the same designated field.\nIn the plot below, elements of the same CLASS are highlighted when the mouse hovers over any one of them.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np3 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(ggobj = p3,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\nThe highlighting effect can be changed using css codes to show the selected associated elements and fade the non-selected elements.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngirafe(ggobj = p3,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")))\n\n\n\n\n\n\n\nThe tooltip and hover effect can be combined in an interactive statistical graph.\nThe associated elements are highlighted when the mouse hovers over one of them. At the same time, the tooltip will show which CLASS the highlighted elements belong to.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np4 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p4,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")))\n\n\n\n\n\n\n\nFinally, the “onclick” aesthetic argument of the geom_dotplot_interactive() function is used to provide hotlink interactivity on the web.\nUpon clicking one of the elements, the web document link will open.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nexam_data$onclick = sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np5 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p5,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\nThe coordinated multiple views methods can be used to show corresponding data points based on the same ID, with the following steps:\n\nAppropriate interactive functions of the ggiraph package is used to create the multiple views.\nThe patchwork package is used inside the girafe() function to create the interactive coordinated multiple views.\n\n\nNote: The “data_id” aesthetic argument is critical to link observations between plots and the”tooltip” aesthetic argument is optional but nice to have when the mouse hovers over a point.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np6 = ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim = c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np7 = ggplot(data = exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim = c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p6 + p7), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation-plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation-plotly-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "The plotly package can be used to create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the Grammar of Graphics. Unlike other plotly platforms, plot.R is free and open-source.\nThere are two ways to create an interactive graph using the plotly package:\n\nUsing the plot_ly() function; and\nUsing the ggplotly() function.\n\n\n\nA basic interactive plot is created using the plot_ly() function.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nThe “colour” argument is used to map a qualitative visual variable (e.g. RACE).\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\nA basic interactive plot is created using the gglotly() function.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np8 = ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\nggplotly(p8)\n\n\n\n\n\n\n\nA coordinated linked plot can be created using the plotly package function in three steps:\n\nThe highlight_key() function in the plotly package is used as shared data.\nThe two scatterplots are created by using functions in the ggplot2 package.\nThe subplot() function in the plotly package is used to place the two scatterplots side-by-side.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nd = highlight_key(exam_data)\np9 = ggplot(data = d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\np10 = ggplot(data = d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\nsubplot(ggplotly(p9),\n        ggplotly(p10))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation-interactive-data-table-using-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation-interactive-data-table-using-dt-package",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "The DT package provides interfacing with JavaScript library DataTables that create interactive tables on html page. Data objects in R can be rendered as HTML tables using the JavaScript library DataTables (typically via R Markdown or Shiny).\n\ndatatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation-crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation-crosstalk-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends the package with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\nCoordinated brushing is implemented using:\n\nThe highlight() function in the plotly package sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nThe bscols() function in the crosstalk package makes it easy to put html elements side by side. It is especially designed to work in an R Markdown document.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np11 = ggplot(d,\n             aes(ENGLISH, MATHS)) + \n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\ngg = highlight(ggplotly(p11),\n               \"plotly_selected\")  \n\nbscols(gg, \n       datatable(d), \n       widths = 5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#references",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "ggiraph and example.\nHow to Plot With ggiraph.\nInteractive map of France with ggiraph.\nCustom Interactive Sunbursts with ggplot in R.\n\n\n\n\n\nGetting Started with plotly in R\nA collection of plotly R graphs.\nCarson Sievert (2020) Interactive Web-based Data Visualization with R, plotly, and Shiny, Chapman and Hall/CRC. Online version.\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of plotly’s R API.\ngganimate and example.\nBuilding An Animation Step-by-Step with gganimate.\nCreating A Composite gif with Multiple gganimate Panels.\n\n~~~ End of Hands-on Exercise 3A ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 1 of the R for Visual Analytics book.\nThe learning outcomes are:\n\nLearn the basic principles and essential components of ggplot2;\nGain hands-on experience on using ggplot2 components to plot statistical graphics based on the principle of Layered Grammar of Graphics; and\nApply the essential graphical elements provided by ggplot2 to create elegant yet functional statistical graphics.\n\n\n\n\n\n\nThe code chunk below uses the p_load() function in the pacman package to check if the tidyverse packages are installed in the computer. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_csv() function in the readr package and stored as the R object, exam_data.\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nThe tibble data frame, exam_data, has 7 columns and 322 rows.\n\nIt consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.\nThe 7 variables/attributes are:\n\nCategorical: ID, CLASS, GENDER, and RACE.\nContinuous: MATHS, ENGLISH, and SCIENCE.\n\n\n\n\n\n\nThe ggplot2 package is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics.\nIt is part of the tidyverse family of packages, and is specially designed for visual exploration and communication.\n\n\nR Graphics is the core graphical functions in Base R. A comparison is made between R Graphics and ggplot by plotting a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nIn the above example, a relatively simple code chunk is used for R Graphics, while more details are added via ggplot2.\nSo why use ggplot2? According to the creator of tidyverse, Hadley Wickham:\n\n“The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.”\n\n\n\n\n\nIt is important to understand the principles of the Grammar of Graphics.\nThe Grammar of Graphics is a general scheme for data visualisation which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) through the book - The Grammar of Graphics, published by Springer. It is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, the Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in the Grammar of Graphics:\n\nGraphics is made up of distinct layers of grammatical elements.\nMeaningful plots is achieved through aesthetic mapping.\n\nSo why is it important to have a good grasp of the grammar of graphics?\n\nAllows us to gain insights into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox, 1978).\nProvides a strong foundation for understanding a diverse range of graphics.\nImpart better understanding of what well-formed or correct graphics could look like (although there will still be many grammatically correct but nonsensical graphics).\n\n\n\nThe seven grammars of ggplot2 are:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, e.g., position, colours, size, shape, transparency.\nGeometrics: The visual elements used for the data, e.g., point, bar, line.\nFacets split the data into subsets to create multiple variations of the same graph, e.g., paneling, multiple plots.\nStatistics refer to statistical transformations that summarise data e.g., mean, confidence intervals.\nCoordinates refer to coordinate systems that define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, e.g., main title, sub-title, y-aixs title, legend, background.\n\n\n\n\n\nThe ggplot() function in the ggplot2 package is used to initiate a ggplot object. The “data” argument defines the dataset to be used for plotting the graphic.\nIf the dataset is not already a data frame, it will be converted to one via the fortify() function in the ggplot2 package.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\nAesthetic mappings take attributes of the data and and use them to influence visual characteristics, e.g., position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function. Each geom layer can have its own aesthetic specification.\nThe code chunk below adds the aesthetic element into the plot. The x-axis and its label are added to the plot.\n\nggplot(data = exam_data, \n       aes(x = MATHS))\n\n\n\n\n\n\n\nThe geometric objects are the actual marks put on the plot. A plot must have at least one geom, but may have more.\nSome examples of geom:\n\ngeom_point() for drawing individual points (e.g., a scatter plot);\ngeom_line() for drawing lines (e.g., for a line chart);\ngeom_smooth() for drawing smoothed lines (e.g., for simple trends or approximations);\ngeom_bar() for drawing bars (e.g., for bar chart);\ngeom_histogram() for drawing binned values (e.g. a histogram);\ngeom_polygon() for drawing arbitrary shapes; and\ngeom_map() for drawing polygons in the shape of a map. Can use the map_data() function to access the data used for these maps.\n\n\n\nA bar chat is plotted using the geom_bar() function.\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\nObservation: From the bar chart, we can see that most of the students are Chinese, followed by Malay. A minority of students are Indian or other races.\n\n\n\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and the dots are stacked, with each dot representing one observation.\nA dot plot is plotted using the geom_dotplot() function.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\nThe y-axis for the plot above is misleading. Hence, the scale_y_continuous() function in the ggplot2 package is used to turn off the y-axis. Also, the “binwidth” argument is used to change the bin width to 2.5.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\n\n\nObservation: From the dot plot, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50.\n\n\n\n\nThe geom_histogram() function is used to create a simple histogram using the values in the “MATHS” attribute of the data set.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()    \n\n\n\n\n\nObservation: From the histogram, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50.\n\n\n\n\nSome customisations are done to the histogram:\n\nThe “bins” argument is used to change the number of bins from the default 30 to 20;\nThe “fill” argument is used to fill the bars with light blue; and\nThe “colour” argument is used to change the outline of the bars to black.\n\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 colour = \"black\",      \n                 fill = \"light blue\")\n\n\n\n\n\nObservation: From the histogram, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50. Also, we can also see more clearly that the score range with the most students is around 75.\n\n\n\n\nThe fill of the histogram is changed using the sub-group of the aesthetic() function, which divides the bars by the “GENDER” attribute.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\")\n\n\n\n\n\nObservation: From the histogram, we can see the distributions of math scores for female and male students. There appears to be less female students who score below 50 compared to male students who score below 50.\n\n\n\n\nThe geom_density() function is used to compute and plot the kernel density estimate, which is a smoothed version of a histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\nObservation: From the kernel density estimate plot, we can see the most ‘dense’/common score is actually slightly above 75.\n\nThe kernel density estimate is then plotted by the “GENDER” attribute using the “colour” argument.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\nObservation: From the kernel density estimate plot, we can see more clearly that there are more female students than male students who score above 50. Conversely, there are more male students than female students who score below 50.\n\nA similar plot can be produced using the “fill” argument.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER,\n           alpha = 0.1)) +\n  geom_density()\n\n\n\n\n\n\n\nThe geom_boxplot() function is used to display a continuous value list. It visualises five summary statistics (minimum, first quartile, median, third quartile, and maximum) and any outliers.\n\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()\n\n\n\n\n\nObservation: From the boxplot, we can see that the median scores for female students and male students are rather similar. There are also outliers for both genders in the lower score range.\n\nThe “notch” argument is used to help visually assess whether the median of distributions differ. If the notches do not overlap, it means that the medians are different.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\nObservation: From the notched plot, we can see clearly that the median scores for female students and male students are different.\n\n\n\n\nThe geom_violin() function is designed for creating a violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they are placed side by side.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\nObservation: From the violin plot, we can see clearly that the distribution of the scores by gender is relatively similarly. A key difference is that the lower scores in the distribution for male students are lower than that for female students.\n\n\n\n\nThe geom_point() function is used to create a scatterplot. The “MATHS” and “ENGLISH” attributes of the dataset are plotted.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point()            \n\n\n\n\n\nObservation: From the scatterplot, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores.\n\n\n\n\nThe code chunk below plots the data points on boxplots and scatterplots using both the geom_boxplot() and geom_point() functions.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position = \"jitter\",\n             size = 0.5)\n\n\n\n\n\nNote: The “position” argument is used to randomly vary the location of the dots, which otherwise would have lined up in the middle of the boxplot.\n\n\n\n\n\nThe statistics functions statistically transform data, usually into some form of summary - e.g., mean, confidence limit.\nThere are two ways to use these functions:\n\nAdd a stat() function and override the default geom, or\nAdd a geom() function and override the default stat.\n\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nThe mean values are added using the stat_summary() function in the ggplot2 package. This overrides the default geom.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour = \"red\",        \n               size = 4)               \n\n\n\n\n\nNote: The “fun” argument is used to insert the mean value as a dot instead of the “fun.y” argument which has been deprecated.\n\n\nObservation: We can see that the mean scores for both gender are below their respective median scores, indicating left-skewed distributions of scores.\n\n\n\n\nThe mean values are added using the geom_point() function. This overrides the default stat.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",        \n             fun = \"mean\",           \n             colour = \"red\",          \n             size = 4)          \n\n\n\n\n\nNote: The “fun” argument is used to insert the mean value as a dot instead of the “fun.y” argument which has been deprecated.\n\n\nObservation: Similarly, we can see that the mean scores for both gender are below their respective median scores, indicating left-skewed distributions of scores.\n\n\n\n\nReverting to the scatterplot on the distribution of the “MATHS” and “ENGLISH” attributes (see section 1.7.9), the interpretability of the plot can be improved with the addition of a best fit curve. The geom_smooth() function is used.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth = 0.5)\n\n\n\n\n\nNote: The “linewidth” argument is used to indicate the width of the grey shaded region of the best fit curve instead of the “size” argument which has been deprecated.\n\n\nObservation: From the best fit curve, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores. Also, there also appears to be an inflection point around Maths score 75 and English score 70.\n\nThe default method is loess, which draws a smooth curve. If the “method” argument is set to “lm”, the plot produces a linear line based on a linear model.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5)\n\n\n\n\n\nNote: The “linewidth” argument is used to indicate the width of the grey shaded region of the best fit curve instead of the “size” argument which has been deprecated.\n\n\n\n\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the dataset. They are an alternative to aesthetics for displaying additional discrete variables. The ggplot2 package supports two types of facets, namely: facet_grid() and facet_wrap().\n\n\nThe facet_wrap() function wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than the facet_grid() function because most displays are roughly rectangular.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\nObservation: Based on the trellis plot, we can see that there are differences in the Maths scores between different classes. Students from classes 3A-F do better than students from classes 3G-I.\n\n\n\n\nThe facet_grid() function forms a matrix of panels defined by row and column facetting variables. It is most useful when there are two discrete variables, and all combinations of the variables exist in the dataset.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\nObservation: Based on the trellis plot, we can also see that there are differences in the Maths scores between different classes. Students from classes 3A-F do better than students from classes 3G-I. However, this plot is more difficult to interpret than the one using the facet_wrap() function.\n\n\n\n\n\nThe coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian() - the default cartesian coordinate systems, where x and y values can be specified (e.g., allows zoom in or out).\ncoord_flip() - a cartesian system with the x and y axes flipped.\ncoord_fixed() - a cartesian system with a “fixed” aspect ratio (e.g., 1.78 for a widescreen” plot).\ncoord_quickmap() - a coordinate system that approximates a good aspect ratio for maps.\n\n\n\nBy default, the geom_bar() function produces a bar chart in vertical form. This can be switched using the coord_flip() function.\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\nObservation: A plot using horizontal bars may be useful when the labels for the vertical axis are long words.\n\n\n\n\nThe scatterplot in section 1.7.9 is slightly misleading because the y-axis and x-axis range are not equal. This can be corrected using the coord_caretesian() function.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\n\n\n\n\nObservation: From the best fit curve, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores. Also, the line is gentler than a y = x line, which means that every one unit increment in Maths scores leads to a lesser than one unit increment in English scores.\n\n\n\n\n\nThemes control elements of the graph that are not related to the data, such as:\n\nBackground colour;\nSize of fonts;\nGrid lines; and\nColour of labels.\n\nThe built-in themes include:\n\ntheme_grey() (default);\ntheme_bw(); and\ntheme_classic().\n\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\nThe default (theme_grey()), theme_bw(),theme_classic(), andtheme_minimal()` functions are used for the horizontal bar charts below.\n\nDefault (theme_grey)theme_bwtheme_classictheme_minimal\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version.\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale\n\n~~~ End of Hands-on Exercise 1 ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#overview-and-learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#overview-and-learning-outcomes",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 1 of the R for Visual Analytics book.\nThe learning outcomes are:\n\nLearn the basic principles and essential components of ggplot2;\nGain hands-on experience on using ggplot2 components to plot statistical graphics based on the principle of Layered Grammar of Graphics; and\nApply the essential graphical elements provided by ggplot2 to create elegant yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses the p_load() function in the pacman package to check if the tidyverse packages are installed in the computer. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_csv() function in the readr package and stored as the R object, exam_data.\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nThe tibble data frame, exam_data, has 7 columns and 322 rows.\n\nIt consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.\nThe 7 variables/attributes are:\n\nCategorical: ID, CLASS, GENDER, and RACE.\nContinuous: MATHS, ENGLISH, and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The ggplot2 package is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics.\nIt is part of the tidyverse family of packages, and is specially designed for visual exploration and communication.\n\n\nR Graphics is the core graphical functions in Base R. A comparison is made between R Graphics and ggplot by plotting a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nIn the above example, a relatively simple code chunk is used for R Graphics, while more details are added via ggplot2.\nSo why use ggplot2? According to the creator of tidyverse, Hadley Wickham:\n\n“The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.”"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "It is important to understand the principles of the Grammar of Graphics.\nThe Grammar of Graphics is a general scheme for data visualisation which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) through the book - The Grammar of Graphics, published by Springer. It is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, the Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in the Grammar of Graphics:\n\nGraphics is made up of distinct layers of grammatical elements.\nMeaningful plots is achieved through aesthetic mapping.\n\nSo why is it important to have a good grasp of the grammar of graphics?\n\nAllows us to gain insights into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox, 1978).\nProvides a strong foundation for understanding a diverse range of graphics.\nImpart better understanding of what well-formed or correct graphics could look like (although there will still be many grammatically correct but nonsensical graphics).\n\n\n\nThe seven grammars of ggplot2 are:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, e.g., position, colours, size, shape, transparency.\nGeometrics: The visual elements used for the data, e.g., point, bar, line.\nFacets split the data into subsets to create multiple variations of the same graph, e.g., paneling, multiple plots.\nStatistics refer to statistical transformations that summarise data e.g., mean, confidence intervals.\nCoordinates refer to coordinate systems that define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, e.g., main title, sub-title, y-aixs title, legend, background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The ggplot() function in the ggplot2 package is used to initiate a ggplot object. The “data” argument defines the dataset to be used for plotting the graphic.\nIf the dataset is not already a data frame, it will be converted to one via the fortify() function in the ggplot2 package.\n\nggplot(data=exam_data)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Aesthetic mappings take attributes of the data and and use them to influence visual characteristics, e.g., position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function. Each geom layer can have its own aesthetic specification.\nThe code chunk below adds the aesthetic element into the plot. The x-axis and its label are added to the plot.\n\nggplot(data = exam_data, \n       aes(x = MATHS))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The geometric objects are the actual marks put on the plot. A plot must have at least one geom, but may have more.\nSome examples of geom:\n\ngeom_point() for drawing individual points (e.g., a scatter plot);\ngeom_line() for drawing lines (e.g., for a line chart);\ngeom_smooth() for drawing smoothed lines (e.g., for simple trends or approximations);\ngeom_bar() for drawing bars (e.g., for bar chart);\ngeom_histogram() for drawing binned values (e.g. a histogram);\ngeom_polygon() for drawing arbitrary shapes; and\ngeom_map() for drawing polygons in the shape of a map. Can use the map_data() function to access the data used for these maps.\n\n\n\nA bar chat is plotted using the geom_bar() function.\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\nObservation: From the bar chart, we can see that most of the students are Chinese, followed by Malay. A minority of students are Indian or other races.\n\n\n\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and the dots are stacked, with each dot representing one observation.\nA dot plot is plotted using the geom_dotplot() function.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\nThe y-axis for the plot above is misleading. Hence, the scale_y_continuous() function in the ggplot2 package is used to turn off the y-axis. Also, the “binwidth” argument is used to change the bin width to 2.5.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\n\n\nObservation: From the dot plot, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50.\n\n\n\n\nThe geom_histogram() function is used to create a simple histogram using the values in the “MATHS” attribute of the data set.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()    \n\n\n\n\n\nObservation: From the histogram, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50.\n\n\n\n\nSome customisations are done to the histogram:\n\nThe “bins” argument is used to change the number of bins from the default 30 to 20;\nThe “fill” argument is used to fill the bars with light blue; and\nThe “colour” argument is used to change the outline of the bars to black.\n\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 colour = \"black\",      \n                 fill = \"light blue\")\n\n\n\n\n\nObservation: From the histogram, we can see that the maths scores are left-skewed, with more students scoring above 50 than below 50. Also, we can also see more clearly that the score range with the most students is around 75.\n\n\n\n\nThe fill of the histogram is changed using the sub-group of the aesthetic() function, which divides the bars by the “GENDER” attribute.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\")\n\n\n\n\n\nObservation: From the histogram, we can see the distributions of math scores for female and male students. There appears to be less female students who score below 50 compared to male students who score below 50.\n\n\n\n\nThe geom_density() function is used to compute and plot the kernel density estimate, which is a smoothed version of a histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\nObservation: From the kernel density estimate plot, we can see the most ‘dense’/common score is actually slightly above 75.\n\nThe kernel density estimate is then plotted by the “GENDER” attribute using the “colour” argument.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\nObservation: From the kernel density estimate plot, we can see more clearly that there are more female students than male students who score above 50. Conversely, there are more male students than female students who score below 50.\n\nA similar plot can be produced using the “fill” argument.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER,\n           alpha = 0.1)) +\n  geom_density()\n\n\n\n\n\n\n\nThe geom_boxplot() function is used to display a continuous value list. It visualises five summary statistics (minimum, first quartile, median, third quartile, and maximum) and any outliers.\n\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()\n\n\n\n\n\nObservation: From the boxplot, we can see that the median scores for female students and male students are rather similar. There are also outliers for both genders in the lower score range.\n\nThe “notch” argument is used to help visually assess whether the median of distributions differ. If the notches do not overlap, it means that the medians are different.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\nObservation: From the notched plot, we can see clearly that the median scores for female students and male students are different.\n\n\n\n\nThe geom_violin() function is designed for creating a violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they are placed side by side.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\nObservation: From the violin plot, we can see clearly that the distribution of the scores by gender is relatively similarly. A key difference is that the lower scores in the distribution for male students are lower than that for female students.\n\n\n\n\nThe geom_point() function is used to create a scatterplot. The “MATHS” and “ENGLISH” attributes of the dataset are plotted.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point()            \n\n\n\n\n\nObservation: From the scatterplot, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores.\n\n\n\n\nThe code chunk below plots the data points on boxplots and scatterplots using both the geom_boxplot() and geom_point() functions.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position = \"jitter\",\n             size = 0.5)\n\n\n\n\n\nNote: The “position” argument is used to randomly vary the location of the dots, which otherwise would have lined up in the middle of the boxplot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The statistics functions statistically transform data, usually into some form of summary - e.g., mean, confidence limit.\nThere are two ways to use these functions:\n\nAdd a stat() function and override the default geom, or\nAdd a geom() function and override the default stat.\n\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nThe mean values are added using the stat_summary() function in the ggplot2 package. This overrides the default geom.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour = \"red\",        \n               size = 4)               \n\n\n\n\n\nNote: The “fun” argument is used to insert the mean value as a dot instead of the “fun.y” argument which has been deprecated.\n\n\nObservation: We can see that the mean scores for both gender are below their respective median scores, indicating left-skewed distributions of scores.\n\n\n\n\nThe mean values are added using the geom_point() function. This overrides the default stat.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",        \n             fun = \"mean\",           \n             colour = \"red\",          \n             size = 4)          \n\n\n\n\n\nNote: The “fun” argument is used to insert the mean value as a dot instead of the “fun.y” argument which has been deprecated.\n\n\nObservation: Similarly, we can see that the mean scores for both gender are below their respective median scores, indicating left-skewed distributions of scores.\n\n\n\n\nReverting to the scatterplot on the distribution of the “MATHS” and “ENGLISH” attributes (see section 1.7.9), the interpretability of the plot can be improved with the addition of a best fit curve. The geom_smooth() function is used.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth = 0.5)\n\n\n\n\n\nNote: The “linewidth” argument is used to indicate the width of the grey shaded region of the best fit curve instead of the “size” argument which has been deprecated.\n\n\nObservation: From the best fit curve, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores. Also, there also appears to be an inflection point around Maths score 75 and English score 70.\n\nThe default method is loess, which draws a smooth curve. If the “method” argument is set to “lm”, the plot produces a linear line based on a linear model.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5)\n\n\n\n\n\nNote: The “linewidth” argument is used to indicate the width of the grey shaded region of the best fit curve instead of the “size” argument which has been deprecated."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the dataset. They are an alternative to aesthetics for displaying additional discrete variables. The ggplot2 package supports two types of facets, namely: facet_grid() and facet_wrap().\n\n\nThe facet_wrap() function wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than the facet_grid() function because most displays are roughly rectangular.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\nObservation: Based on the trellis plot, we can see that there are differences in the Maths scores between different classes. Students from classes 3A-F do better than students from classes 3G-I.\n\n\n\n\nThe facet_grid() function forms a matrix of panels defined by row and column facetting variables. It is most useful when there are two discrete variables, and all combinations of the variables exist in the dataset.\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\nObservation: Based on the trellis plot, we can also see that there are differences in the Maths scores between different classes. Students from classes 3A-F do better than students from classes 3G-I. However, this plot is more difficult to interpret than the one using the facet_wrap() function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian() - the default cartesian coordinate systems, where x and y values can be specified (e.g., allows zoom in or out).\ncoord_flip() - a cartesian system with the x and y axes flipped.\ncoord_fixed() - a cartesian system with a “fixed” aspect ratio (e.g., 1.78 for a widescreen” plot).\ncoord_quickmap() - a coordinate system that approximates a good aspect ratio for maps.\n\n\n\nBy default, the geom_bar() function produces a bar chart in vertical form. This can be switched using the coord_flip() function.\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\nObservation: A plot using horizontal bars may be useful when the labels for the vertical axis are long words.\n\n\n\n\nThe scatterplot in section 1.7.9 is slightly misleading because the y-axis and x-axis range are not equal. This can be corrected using the coord_caretesian() function.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\n\n\n\n\nObservation: From the best fit curve, we can see that there appears to be a positive correlation between English and Maths scores, i.e., students with higher English scores also tend to have higher Maths scores. Also, the line is gentler than a y = x line, which means that every one unit increment in Maths scores leads to a lesser than one unit increment in English scores."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Themes control elements of the graph that are not related to the data, such as:\n\nBackground colour;\nSize of fonts;\nGrid lines; and\nColour of labels.\n\nThe built-in themes include:\n\ntheme_grey() (default);\ntheme_bw(); and\ntheme_classic().\n\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\nThe default (theme_grey()), theme_bw(),theme_classic(), andtheme_minimal()` functions are used for the horizontal bar charts below.\n\nDefault (theme_grey)theme_bwtheme_classictheme_minimal\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#references",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Hadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version.\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale\n\n~~~ End of Hands-on Exercise 1 ~~~"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 2 of the R for Visual Analytics book.\nThe learning outcomes are:\n\nControl the placement of annotation on a graph using functions provided in the ggrepel package;\nCreate professional publication quality figures using functions provided in the ggthemes and hrbrthemes packages; and\nPlot composite figures by combining ggplot2 graphs using the patchwork package.\n\n\n\n\n\n\nIn this hands-on exercise, the following R packages are used:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\nggrepel for geoms to repel overlapping text labels for ggplot2;\nggthemes for extra themes, geoms, and scales for ggplot2;\nhrbrthemes for typography-centric themes and theme components for ggplot2; and\npatchwork for preparing composite figures created using ggplot2.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse, ggrepel, \n               ggthemes, hrbrthemes,\n               patchwork)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_csv() function in the readr package and stored as the R object, exam_data.\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nThe tibble data frame, exam_data, has 7 columns and 322 rows.\n\nIt consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.\nThe 7 variables/attributes are:\n\nCategorical: ID, CLASS, GENDER, and RACE.\nContinuous: MATHS, ENGLISH, and SCIENCE.\n\n\n\n\n\n\nA challenge in plotting a statistical graph is annotation, especially with a large number of data points.\nThe scatterplot below shows many overlapping annotations because of the sheer number of dots on it.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nThe ggrepel package is an extension of the ggplot2 package, which provides the geoms for ggplot2 to repel overlapping text as shown in the plot above. This is done by replacing the geom_text() and geom_label() functions in the ggplot2 package with the geom_text_repel() and geom_label_repel() functions respectively in the ggrepel package.\n\n\nThe previous scatterplot is re-plotted by replacing the geom_label() function in the ggplot2 package with the geom_label_repel() function in the ggrepel package.\n\nNote: The annotations avoid the main clusters and labels potential outlier dots.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nThe ggplot2 package comes with eight built-in themes, they are: theme_grey(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\nThe following plot uses the default grey theme for the histogram showing the distribution of Maths scores.\n\nNote: There is no need to explicitly include the theme_grey() function as it is the default theme.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\nThe ggthemes package provides ggplot2 themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, etc. It also provides some extra geoms and scales for ggplot2.\nThe previous plot is re-plotted with The Economist theme below, with the classic light blue background.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\nThe hrbrthemes package has two goals. The first is that it provides a base theme that focuses on typographic elements, such as where various labels are placed and the types of fonts used.\nThe previous plot is re-plotted with the theme_ipsum function below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal of the hrbrthemes package is productivity for a production workflow. A “production workflow” is when the output of the work is to be put into a publication of some kind. While working through the analysis, the visual elements do not need to be perfect but are there to validate/support the work and are more of a starting point for the finished product.\nThe previous plot is re-plotted with the theme_ipsum function below, with the addition of some arguments to customise the elements.\n\nNote: The various arguments are:\n\n“axis_title_size” argument is used to increase the font size of the axis title to 18;\n“base_size” argument is used to increase the default axis label to 15; and\n“grid” argument is used to remove the x-axis grid lines and show only the y-axis grid lines.\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\nOften, multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions that provide functions to compose a figure with multiple graphs. A composite plot is created by combining multiple graphs.\nTo start, three separate statistical graphics are created below, showing the distribution of Maths scores, the distribution of English scores, and the English scores versus Maths scores.\n\nMathsEnglishMaths vs. EnglishCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 = ggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") + \n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 = ggplot(data = exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 = ggplot(data = exam_data, \n             aes(x = MATHS, \n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\nThere are several ggplot2 extension functions that support the preparation of a composite figure by combining several graphs. These functions include: grid.arrange() in the gridExtra package and plot_grid() in the cowplot package.\nThe ggplot2 extension patchwork package is specially designed for combining separate ggplot2 graphs into a single figure. It has a simple syntax to create layouts easily:\n\nTwo-column layout using “+”;\n“()” to create a subplot group; and\nTwo-row layout using “/”.\n\n\n\n\nA composite figure of two histograms showing the distributions of Maths scores and English scores respectively is created using the syntax of the patchwork package.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n\nA more complex composite figure can be plotted using other appropriate operators.\nFor example, the composite figure below is plotted by using:\n\n“/” to stack two ggplot2 graphs;\n“|” to place the plots beside each other; and\n“()” to define the sequence of the plotting.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\nThe patchwork package also allow subplots to be identified in text using its auto-tagging capabilities.\n\nRoman NumeralsArabic NumeralsAlphabetsCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = '1')\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A')\n\n\n\n\n\n\n\nBesides providing functions to place plots next to each other based on the provided layout, the inset_element() function in the patchwork package can place one or several plots or graphic elements freely on top or below another plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\nUsing both the ggthemes and patchwork packages, a composite figure with The Economist theme is created.\n\nNote: The subplots are tagged with “A”, “B”, and “C” using the plot_annotation() function in the patchwork package. Also, the theme() function in the ggplot2 package is used with the “plot.title” argument to reduce the size of the titles to fit the composite figure.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\npatchwork = (p1 / p2) | p3\npatchwork & theme_economist() + theme(plot.title = element_text(size=10))\n\n\n\n\n\n\n\n\n\nPatchwork R Package Goes Nerd Viral\nR Packages: ggrepel, ggthemes, hrbrthemes, and patchwork\nggplot Tips: Arranging Plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet\n\n~~~ End of Hands-on Exercise 2 ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview-and-learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview-and-learning-outcomes",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 2 of the R for Visual Analytics book.\nThe learning outcomes are:\n\nControl the placement of annotation on a graph using functions provided in the ggrepel package;\nCreate professional publication quality figures using functions provided in the ggthemes and hrbrthemes packages; and\nPlot composite figures by combining ggplot2 graphs using the patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this hands-on exercise, the following R packages are used:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\nggrepel for geoms to repel overlapping text labels for ggplot2;\nggthemes for extra themes, geoms, and scales for ggplot2;\nhrbrthemes for typography-centric themes and theme components for ggplot2; and\npatchwork for preparing composite figures created using ggplot2.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse, ggrepel, \n               ggthemes, hrbrthemes,\n               patchwork)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_csv() function in the readr package and stored as the R object, exam_data.\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nThe tibble data frame, exam_data, has 7 columns and 322 rows.\n\nIt consists of the year-end examination grades of a cohort of 322 Primary 3 students from a local school.\nThe 7 variables/attributes are:\n\nCategorical: ID, CLASS, GENDER, and RACE.\nContinuous: MATHS, ENGLISH, and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "A challenge in plotting a statistical graph is annotation, especially with a large number of data points.\nThe scatterplot below shows many overlapping annotations because of the sheer number of dots on it.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nThe ggrepel package is an extension of the ggplot2 package, which provides the geoms for ggplot2 to repel overlapping text as shown in the plot above. This is done by replacing the geom_text() and geom_label() functions in the ggplot2 package with the geom_text_repel() and geom_label_repel() functions respectively in the ggrepel package.\n\n\nThe previous scatterplot is re-plotted by replacing the geom_label() function in the ggplot2 package with the geom_label_repel() function in the ggrepel package.\n\nNote: The annotations avoid the main clusters and labels potential outlier dots.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "The ggplot2 package comes with eight built-in themes, they are: theme_grey(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\nThe following plot uses the default grey theme for the histogram showing the distribution of Maths scores.\n\nNote: There is no need to explicitly include the theme_grey() function as it is the default theme.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\nThe ggthemes package provides ggplot2 themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, etc. It also provides some extra geoms and scales for ggplot2.\nThe previous plot is re-plotted with The Economist theme below, with the classic light blue background.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\nThe hrbrthemes package has two goals. The first is that it provides a base theme that focuses on typographic elements, such as where various labels are placed and the types of fonts used.\nThe previous plot is re-plotted with the theme_ipsum function below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal of the hrbrthemes package is productivity for a production workflow. A “production workflow” is when the output of the work is to be put into a publication of some kind. While working through the analysis, the visual elements do not need to be perfect but are there to validate/support the work and are more of a starting point for the finished product.\nThe previous plot is re-plotted with the theme_ipsum function below, with the addition of some arguments to customise the elements.\n\nNote: The various arguments are:\n\n“axis_title_size” argument is used to increase the font size of the axis title to 18;\n“base_size” argument is used to increase the default axis label to 15; and\n“grid” argument is used to remove the x-axis grid lines and show only the y-axis grid lines.\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Often, multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions that provide functions to compose a figure with multiple graphs. A composite plot is created by combining multiple graphs.\nTo start, three separate statistical graphics are created below, showing the distribution of Maths scores, the distribution of English scores, and the English scores versus Maths scores.\n\nMathsEnglishMaths vs. EnglishCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 = ggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") + \n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 = ggplot(data = exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 = ggplot(data = exam_data, \n             aes(x = MATHS, \n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\nThere are several ggplot2 extension functions that support the preparation of a composite figure by combining several graphs. These functions include: grid.arrange() in the gridExtra package and plot_grid() in the cowplot package.\nThe ggplot2 extension patchwork package is specially designed for combining separate ggplot2 graphs into a single figure. It has a simple syntax to create layouts easily:\n\nTwo-column layout using “+”;\n“()” to create a subplot group; and\nTwo-row layout using “/”.\n\n\n\n\nA composite figure of two histograms showing the distributions of Maths scores and English scores respectively is created using the syntax of the patchwork package.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n\nA more complex composite figure can be plotted using other appropriate operators.\nFor example, the composite figure below is plotted by using:\n\n“/” to stack two ggplot2 graphs;\n“|” to place the plots beside each other; and\n“()” to define the sequence of the plotting.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\nThe patchwork package also allow subplots to be identified in text using its auto-tagging capabilities.\n\nRoman NumeralsArabic NumeralsAlphabetsCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = '1')\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A')\n\n\n\n\n\n\n\nBesides providing functions to place plots next to each other based on the provided layout, the inset_element() function in the patchwork package can place one or several plots or graphic elements freely on top or below another plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\nUsing both the ggthemes and patchwork packages, a composite figure with The Economist theme is created.\n\nNote: The subplots are tagged with “A”, “B”, and “C” using the plot_annotation() function in the patchwork package. Also, the theme() function in the ggplot2 package is used with the “plot.title” argument to reduce the size of the titles to fit the composite figure.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\npatchwork = (p1 / p2) | p3\npatchwork & theme_economist() + theme(plot.title = element_text(size=10))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#references",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Patchwork R Package Goes Nerd Viral\nR Packages: ggrepel, ggthemes, hrbrthemes, and patchwork\nggplot Tips: Arranging Plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet\n\n~~~ End of Hands-on Exercise 2 ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html",
    "href": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 4 of the R for Visual Analytics book.\nThe learning outcomes are:\n\nLearn how to create animated data visualisation using the gganimate and plotly packages; and\nLearn how to reshape data using the tidyr package, and process, wrangle, and transform data using the dplyr package.\n\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data (e.g., subsets based on time variable). The subset drives the flow of the animation when stitched back together.\n\n\n\n\n\n\n\n\nThe key concepts and terminology related to this type of animated data visualisation are:\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, one can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nIn this hands-on exercise, the following R packages are used:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\nplotly for plotting interactive statistical graphs;\ngganimate (ggplot extension) for creating animated statistical graphs.\ngifski for converting video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder fpr providing data available at Gapminder.org. The country_colors scheme is relevant.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse, readxl,\n               plotly, gganimate, \n               gifski, gapminder)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_xls() function in the readxl package and stored as the R object, globalPop.\nThe mutate_each_() function in the dplyr package is used to convert all character data type into factor data type, and the mutate() function in the dplyr package is used to convert the data values for the Year field into integer data type.\n\ncol = c(\"Country\", \"Continent\")\n\nglobalPop = read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\nHowever, the mutate_each_() function was deprecated in dplyr 0.7.0. and the funs() function was deprecated in dplyr 0.8.0. In view of this, the code chunk is rewritten using the mutate_at() function in the dplyr package.\n\ncol = c(\"Country\", \"Continent\")\n\nglobalPop = read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nAlternatively, the across() function in the dplyr package can be used with the mutate() function to obtain the same output.\n\ncol = c(\"Country\", \"Continent\")\n\nglobalPop = read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\nThe tibble data frame, globalPop, has 6 columns and 6,204 rows.\n\nIt consists of the populations of 222 countries, across 6 continents.\nIt also shows the percentages of the Old and Young subsets of the populations.\n\n\nn_distinct(globalPop$Country)\n\n[1] 222\n\nn_distinct(globalPop$Continent)\n\n[1] 6\n\n\n\n\n\n\nThe gganimate package extends the Grammar of Graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object to customise how it should change with time:\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nA static population bubble plot is created using basic ggplot2 functions.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\nTo create an animated population bubble plot, the transition_time() function in the gganimate package is used to create transition through distinct states in time (i.e. Year), and the ease_aes() function in the gganimate package is used to control the easing of aesthetics. The default is ‘linear’. Other easing methods are quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')\n\n\n\n\n\n\n\n\nBoth the plot_ly() and ggplotly() functions in the plotly package can be used to support key frame animations through the “frame” aesthetic argument. They also support the “ids” aesthetic argument to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nAn animated population bubble plot is created using the ggplotly() function to convert the static graphic object into an animated svg object.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngg = ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\nAlthough the “show.legend” argument was set as FALSE, the legend still appeared on the plot. To overcome this problem, the theme() function with the “legend.position” argument set to none is used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngg = ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nAn animated population bubble plot is created using the plot_ly() function.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nbp = globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers') %&gt;%\n  layout(showlegend = FALSE)\n\nbp\n\n\n\n\n\n\n\n\n\ngganimate and example.\nBuilding An Animation Step-by-Step with gganimate.\nCreating A Composite gif with Multiple gganimate Panels.\n\n~~~ End of Hands-on Exercise 3B ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#overview-and-learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#overview-and-learning-outcomes",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "This hands-on exercise is based on Chapter 4 of the R for Visual Analytics book.\nThe learning outcomes are:\n\nLearn how to create animated data visualisation using the gganimate and plotly packages; and\nLearn how to reshape data using the tidyr package, and process, wrangle, and transform data using the dplyr package.\n\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data (e.g., subsets based on time variable). The subset drives the flow of the animation when stitched back together.\n\n\n\n\n\n\n\n\nThe key concepts and terminology related to this type of animated data visualisation are:\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, one can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#getting-started",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "In this hands-on exercise, the following R packages are used:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\nplotly for plotting interactive statistical graphs;\ngganimate (ggplot extension) for creating animated statistical graphs.\ngifski for converting video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder fpr providing data available at Gapminder.org. The country_colors scheme is relevant.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed. If yes, they are then loaded into the R environment. If no, they are installed, then loaded into the R environment.\n\npacman::p_load(tidyverse, readxl,\n               plotly, gganimate, \n               gifski, gapminder)\n\n\n\n\nThe dataset for this hands-on exercise is imported into the R environment using the read_xls() function in the readxl package and stored as the R object, globalPop.\nThe mutate_each_() function in the dplyr package is used to convert all character data type into factor data type, and the mutate() function in the dplyr package is used to convert the data values for the Year field into integer data type.\n\ncol = c(\"Country\", \"Continent\")\n\nglobalPop = read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\nHowever, the mutate_each_() function was deprecated in dplyr 0.7.0. and the funs() function was deprecated in dplyr 0.8.0. In view of this, the code chunk is rewritten using the mutate_at() function in the dplyr package.\n\ncol = c(\"Country\", \"Continent\")\n\nglobalPop = read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nAlternatively, the across() function in the dplyr package can be used with the mutate() function to obtain the same output.\n\ncol = c(\"Country\", \"Continent\")\n\nglobalPop = read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\nThe tibble data frame, globalPop, has 6 columns and 6,204 rows.\n\nIt consists of the populations of 222 countries, across 6 continents.\nIt also shows the percentages of the Old and Young subsets of the populations.\n\n\nn_distinct(globalPop$Country)\n\n[1] 222\n\nn_distinct(globalPop$Continent)\n\n[1] 6"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "The gganimate package extends the Grammar of Graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object to customise how it should change with time:\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nA static population bubble plot is created using basic ggplot2 functions.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\nTo create an animated population bubble plot, the transition_time() function in the gganimate package is used to create transition through distinct states in time (i.e. Year), and the ease_aes() function in the gganimate package is used to control the easing of aesthetics. The default is ‘linear’. Other easing methods are quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "Both the plot_ly() and ggplotly() functions in the plotly package can be used to support key frame animations through the “frame” aesthetic argument. They also support the “ids” aesthetic argument to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nAn animated population bubble plot is created using the ggplotly() function to convert the static graphic object into an animated svg object.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngg = ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\nAlthough the “show.legend” argument was set as FALSE, the legend still appeared on the plot. To overcome this problem, the theme() function with the “legend.position” argument set to none is used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngg = ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nAn animated population bubble plot is created using the plot_ly() function.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nbp = globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers') %&gt;%\n  layout(showlegend = FALSE)\n\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#references",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "gganimate and example.\nBuilding An Animation Step-by-Step with gganimate.\nCreating A Composite gif with Multiple gganimate Panels.\n\n~~~ End of Hands-on Exercise 3B ~~~"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "&lt;placeholder&gt;\n~~~ End of In-class Exercise 3 ~~~"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608: Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications!\nIn this webpage, I am going to share my visual analytics learning journey.\n\n\n\n\n\nCredit: Prima Consulting UK"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#animated-data-visualisation-plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#animated-data-visualisation-plotly-methods",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "Both the plot_ly() and ggplotly() functions in the plotly package can be used to support key frame animations through the “frame” aesthetic argument. They also support the “ids” aesthetic argument to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nAn animated population bubble plot is created using the ggplotly() function to convert the static graphic object into an animated svg object.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngg = ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\nAlthough the “show.legend” argument was set as FALSE, the legend still appeared on the plot. To overcome this problem, the theme() function with the “legend.position” argument set to none is used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngg = ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nAn animated population bubble plot is created using the plot_ly() function.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nbp = globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers') %&gt;%\n  layout(showlegend = FALSE)\n\nbp"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Singapore has come a long way since gaining independence in 1965. Without natural resources, human capital development through a well-planned education system is a critical part of Singapore’s transformation from third world to first.\nDespite the success, there is still a correlation between socio-economic status and education achievement, as well as ingrained perceptions that some schools are better than others.\nHence, there is a need to use data to analyse the performance of Singapore students across different subjects, and identify any relationships between the performance in various subjects and factors such as gender, socioeconomic status, and type of school.\n\n\n\nIn this take-home exercise, the objective is to improve on an original visualisation by a fellow course-mate by focusing on what works, what does not work, why they do not work, and how to make it better.\nThe specific tasks are:\n\nSelect a Take-home Exercise 1 prepared by a course-mate;\nCritic the submission in terms of clarity and aesthetics;\nPrepare a sketch for the alternative design using the data visualisation design principles and best practices from Lesson 1 and Lesson 2; and\nRemake the original design using ggplot2, ggplot2 extensions, and tidyverse packages.\n\n\n\n\n\n\n\nThe R packages used in this take-home exercise are:\n\nhaven for importing SAS files;\ntidyverse (i.e. readr, tidyr, dplyr, ggplot2) for performing data science tasks such as importing, tidying, and wrangling data, as well as creating graphics based on The Grammar of Graphics;\nreshape2 for transforming data between wide and long formats;\nggthemes for extra themes, geoms, and scales for ggplot2;\nggridges for creating ridgeline plots;\nggdist for visualising distributions and uncertainty; and\nggpubr for creating publication ready ggplot2 plots.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed in the computer. If yes, they are then loaded into the R environment. If no, they are installed, and then loaded into the R environment.\n\npacman::p_load(haven, tidyverse, reshape2,\n               ggthemes, ggridges, ggdist,\n               ggpubr)\n\n\n\n\nThe OECD Programme for International Student Assessment (PISA) measures how well 15-year-old students in different countries are “prepared to meet the challenges of today’s knowledge societies” by looking at “their ability to use their knowledge and skills to meet real-life challenges”. The PISA surveys take place very three years, the latest being conducted in 2022.\nThe PISA 2022 database contains the full set of responses from individual students, school principals, and parents. There are a total of five data files and their contents are as follows:\n\nStudent questionnaire data file;\nSchool questionnaire data file;\nTeacher questionnaire data file;\nCognitive item data file; and\nQuestionnaire timing data file.\n\nFor the purpose of this take-home exercise, the “Student questionnaire data file” is used.\n\n\n\n\n\n\nThe dataset used in this take-home exercise is the 2022 PISA student questionnaire data file, cy08msp_stu_qqq.sas7bdat, which is in the SAS file format.\nThe file is imported into the R environment using the read_sas() function in the haven package and stored as the R object, stu_qqq.\n\nstu_qqq = read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nThe tibble data frame, stu_qqq, has 1,279 columns (variables) and 613,744 rows (observations).\n\n\n\nThere are 6,606 rows with the country code (i.e., CNT) value of “SGP”, which represents Singapore. This count is cross-verified by the information provided in the “CY08MSP_STU_QQQ” sheet in the codebook. The codebook also stated that Singapore students’ made up 1.0763% of the entire global student population who took part in the 2022 PISA.\nThe filter() function in the dplyr package is used to obtain these rows, and stored as the R object, stu_qqq_SG.\n\nstu_qqq_SG = stu_qqq %&gt;% filter(CNT == \"SGP\")\n\nThe tibble data frame, stu_qqq_SG, is then saved in the rds file format and imported into the R environment.\n\nwrite_rds(stu_qqq_SG, \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG = read_rds(\"data/stu_qqq_SG.rds\")\n\n\n\n\nUsing the chosen submission, the dataset is prepared according to the original submission.\n\n#  PREPARE MAIN DATA-FRAME\nstudent_columns &lt;- \"CNTSTUID\"\ngender_columns &lt;- \"ST004D01T\"\nschool_columns &lt;- \"CNTSCHID\"\n\neducation_column_mother &lt;- \"ST005Q01JA\"\neducation_column_father &lt;- \"ST007Q01JA\"\n\ntraining_column_mother &lt;- \"ST006Q01JA\"\ntraining_column_father &lt;- \"ST008Q01JA\"\npossession_room_column &lt;- \"ST250Q01JA\"\npossession_computer_column &lt;- \"ST250Q02JA\"\npossession_software_column &lt;- \"ST250Q03JA\"\npossession_phone_column &lt;- \"ST250Q04JA\"\npossession_internet_column &lt;- \"ST250Q05JA\"\npossession_book_column &lt;- \"ST255Q01JA\"\n\nmath_columns &lt;- c(\"PV1MATH\", \"PV2MATH\", \"PV3MATH\", \"PV4MATH\", \"PV5MATH\", \"PV6MATH\", \"PV7MATH\", \"PV8MATH\", \"PV9MATH\", \"PV10MATH\")\nreading_columns &lt;- c(\"PV1READ\", \"PV2READ\", \"PV3READ\", \"PV4READ\", \"PV5READ\", \"PV6READ\", \"PV7READ\", \"PV8READ\", \"PV9READ\", \"PV10READ\")\nscience_columns &lt;- c(\"PV1SCIE\", \"PV2SCIE\", \"PV3SCIE\", \"PV4SCIE\", \"PV5SCIE\", \"PV6SCIE\", \"PV7SCIE\", \"PV8SCIE\", \"PV9SCIE\", \"PV10SCIE\")\n\nstudent_ID &lt;- stu_qqq_SG[, student_columns, drop = FALSE]\ngender &lt;- stu_qqq_SG[, gender_columns, drop = FALSE]\nschool_ID &lt;- stu_qqq_SG[, school_columns, drop = FALSE]\neducation_mother &lt;- stu_qqq_SG[, education_column_mother, drop = FALSE]\neducation_father &lt;- stu_qqq_SG[, education_column_father, drop = FALSE]\n\ntraining_mother &lt;- stu_qqq_SG[, training_column_mother, drop = FALSE]\ntraining_father &lt;- stu_qqq_SG[, training_column_father, drop = FALSE]\npossession_room &lt;- stu_qqq_SG[, possession_room_column, drop = FALSE]\npossession_computer &lt;- stu_qqq_SG[, possession_computer_column, drop = FALSE]\npossession_software &lt;- stu_qqq_SG[, possession_software_column, drop = FALSE]\npossession_phone &lt;- stu_qqq_SG[, possession_phone_column, drop = FALSE]\npossession_internet &lt;- stu_qqq_SG[, possession_internet_column, drop = FALSE]\npossession_book &lt;- stu_qqq_SG[, possession_book_column, drop = FALSE]\n\nmath_avg &lt;- rowMeans(stu_qqq_SG[, math_columns, drop = FALSE])\nreading_avg &lt;- rowMeans(stu_qqq_SG[, reading_columns, drop = FALSE])\nscience_avg &lt;- rowMeans(stu_qqq_SG[, science_columns, drop = FALSE])\n\nstu_df &lt;- data.frame(Student_ID = student_ID,\n  Gender = gender,\n  School_ID = school_ID,\n  Education_mother = education_mother,\n  Education_father = education_father,\n \n#  Training_mother = training_mother,\n#  Training_father = training_father,\n  Possession_room = possession_room,\n  Possession_computer = possession_computer,\n  Possession_software = possession_software,\n  Possession_phone = possession_phone,\n  Possession_internet = possession_internet,\n  Possession_book = possession_book,\n  \n  Math_Average = round(math_avg,digits=2),\n  Reading_Average = round(reading_avg,digits=2),\n  Science_Average = round(science_avg,digits=2),\nAverage_score=round(((math_avg+reading_avg+science_avg)/3),digits=2))\n\nnames(stu_df) &lt;- c(\"Student_ID\",\"Gender\",\"School_ID\",\"Education_mother\",\n                   \"Education_father\",\"Possession_room\",\"Possession_computer\",\n                   \"Possession_software\",\"Possession_phone\",\n                   \"Possession_internet\",\"Possession_book\",\"Math_Average\",\n                   \"Reading_Average\",\"Science_Average\",\"Average_Score\")\n\nThe finalised tibble data frames, stu_df, and Score_by_School are then saved in the rds file format and imported into the R environment.\n\nwrite_rds(stu_df, \"data/stu_df.rds\")\n\n\nstu_df = read_rds(\"data/stu_df.rds\")\n\n\n\n\n\n\n\n\n\nThe original visualisation at Section 3 (Distribution of Singapore Students’ Performance) of the submission is reproduced below. The plot on the average score (not specific subjects) is chosen.\n\n\n\n\n\nThe observation made:\n\n“In this case, all the histogram are left skewed. The left-skewed (negative skewness) nature of the histogram indicates that there is a concentration of scores towards the higher end, with a tail extending towards lower scores. The mean is influenced by these lower scores, pulling it towards the left. The median, being less sensitive to extreme values, is positioned higher in the distribution.”\n\n\n\n\nClarity\n\nRight Visualisation. The use of a histogram provides a clear representation of the distribution of the average scores among the students, and the use of the mean and median vertical dashed lines shows the left-skewness of the distribution.\nMissing Key Message in Title. However, the key message stated in the observation is not included in the title (which is factual). Stating the key message in the title would help the reader zoom in on the intended message of the plot.\n\nAesthetics\n\nGraphical Integrity Maintained. The y-axis starts from zero, ensuring that the histogram is not distorted.\nSimple Colours/Font Used. The plot uses an easy-to-read font and colour. However, this can be enhanced by using a professional theme.\nOvercrowding of Details. The x-axis labels use values that are too detailed (not rounded up). Also, each column of the histogram is labelled with the corresponding frequency for that range of scores. These details may be overwhelming and distract from the intended message. The placement of the mean and median values can also be better adjusted to avoid overlapping with the histogram. The decimal values in the mean and median may also be removed to improve readability given that the differences in the two values is more than 1 point.\nOrientation of Label. The y-axis title can be rotated for easier reading.\n\n\n\n\n\n\n\nAn improved plot is made by making the following changes:\n\n\n\n\nImproved PlotCode\n\n\n\n\n\n\n\n\n\n\naverage_sci = mean(stu_df$Average_Score, na.rm = TRUE)\nmedian_sci = median(stu_df$Average_Score, na.rm = TRUE)\n\nggplot(stu_df, aes(x = Average_Score)) +\n  geom_histogram(bins = 20, \n                 fill = \"cadetblue3\", \n                 color = \"grey95\") +\n  labs(title = \"More Students Score Above Mean Average Score\",\n       subtitle = \"Distribution of Average Scores\",\n       x = \"Average Score\",\n       y = \"Frequency\") +\n  theme_economist() +\n  scale_x_continuous(n.breaks = 20) +\n  scale_y_continuous(n.breaks = 8) +\n  geom_vline(xintercept = average_sci, color = \"navy\", linetype = \"dashed\", size = 1) +\n  geom_text(aes(x = average_sci-60, y = 900, label = paste(\"Mean:\", round(average_sci))), vjust = 2, color = \"navy\",size =4) +\n  geom_vline(xintercept = median_sci, color = \"maroon\", linetype = \"dashed\", size = 1) +\n  geom_text(aes(x = median_sci+100, y = 900, label = paste(\"Median:\", round(median_sci))), vjust = 2, color = \"maroon\",size=4) +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\n\n\n\n\n\n\nThe original visualisation at Section 4.1 (Performance by Gender) of the submission is reproduced below. Again, the plot on the average score (not specific subjects) is chosen.\n\n\n\n\n\nThe relevant observations made:\n\n“From the above violin plots, we can conclude:\n\nMale plot is more spread out, which indicates greater variability in scores within the male group\nFemale group and male group have similar average performance.\nAlmost all the distribution are left skewed, indicating a concentration of students with relatively higher scores, but a few students have much lower scores.”\n\n\n\n\n\nClarity\n\n(Almost) Right Visualisation. The use of two violin plots shows the distributions of the average scores for female and male students. The use of the box plots in the middle of the violin plots shows the median average scores. However, as the two violin plots do not overlap, the comparison of average scores based on gender is more difficult to make visually. A density plot grouped by gender, with vertical lines added to show the median average scores, may be more appropriate for comparison purposes.\nMissing Key Message in Title. However, the key message stated in the observation is not included in the title (which is factual). Stating the key message in the title would help the reader zoom in on the intended message of the plot.\n\nAesthetics\n\nSimple Colours/Font Used. The plot uses an easy-to-read font and the stereotypical colours associated with each gender (pink for female; blue for male). However, this can be enhanced by using a simpler/minimalist theme for the background to keep the focus on the coloured density plots.\nRedundant Legend. The legend is redundant given that the x-axis is labelled. Hence, it can be removed.\nUnclear Labels for Mean and Median Values. The subtitle states the colours corresponding to the mean and median values for each gender which requires the reader to read and match, and reconfirm each time he/she views the plot. This is less intuitive then putting the labels together with the values.\nOrientation of Label. The y-axis title can be rotated for easier reading.\nMis-titled Y-axis. The y-axis title was mistakenly labelled as “Reading Score” instead of “Average Score”.\n\n\n\n\n\n\n\n\nImproved PlotCode\n\n\n\n\n\n\n\n\n\n\nstu_df$Gender = ifelse(\n  stu_df$Gender == 1, \n  \"Female\", \"Male\")\n\nf = stu_df %&gt;%\n  filter(Gender == \"Female\")\n\nm = stu_df %&gt;%\n  filter(Gender == \"Male\")\n\nstu_df = stu_df %&gt;%\n  mutate(Gender = fct_relevel(Gender, \n                               \"Female\", \n                               \"Male\"))\n\nggplot(stu_df,\n       aes(x = Average_Score,\n           fill = Gender)) +\n  geom_density(alpha = 0.5) +\n  geom_vline(aes(xintercept=median(f$Average_Score)),\n             color=\"red\", \n             linetype=\"dashed\", \n             linewidth=1,\n             alpha = 0.5) +\n  geom_vline(aes(xintercept=median(m$Average_Score)),\n             color=\"blue\", \n             linetype=\"dashed\", \n             linewidth=1,\n             alpha = 0.5) +\n  ggtitle(label = \"On Average, Boys and Girls Perform Similarly\",\n          subtitle= \"Distribution of Average Scores by Gender\") + \n  ylab(\"Density\") + xlab(\"Average Score\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1)) +\n  theme_minimal() +\n  geom_vline(aes(xintercept=median(f$Average_Score)),\n             color=\"#CC3366\", \n             linetype=\"dashed\", \n             linewidth=1,\n             alpha = 0.5) +\n  geom_vline(aes(xintercept=median(m$Average_Score)),\n             color=\"#033336\", \n             linetype=\"dashed\", \n             linewidth=1,\n             alpha = 0.5) +\n  geom_text(aes(x = 690, y = 0.0045, label = paste(\"Median:\", round(median(m$Average_Score)))), vjust = 2, color = \"#033336\",size =4) +\n  geom_text(aes(x = 480, y = 0.0045, label = paste(\"Median:\", round(median(f$Average_Score)))), vjust = 2, color = \"#CC3366\",size=4) +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\n\nNote: The same makeover approach is also applicable to Section 4.3.3 (Performance Distribution by Internet Access) as it also uses violin plots.\n\n\n\n\n\n\n\nThe original visualisation at Section 4.3.2 (Distribution of by Number of Book in Students’ Home) of the submission is reproduced below. The plot on the reading score is chosen.\n\n\n\n\n\nThe observation made:\n\n“From the density plot, we can interpret that:\n\nFor students with no books in their homes, the density plot is right-skewed. This suggests that a lack of books is associated with a concentration of lower academic scores. The right skewness indicates that the majority of students in this group may have below-average scores.\nAs the number of books in the home increases, the density plot becomes more left-skewed. This trend suggests a positive correlation between the abundance of books and higher academic performance. The left skewness indicates a concentration of higher scores, with more students performing above the average.\nThe observation that the mean score of students increases as the number of books in the home increases aligns with the general trend of a left-skewed density plot. This indicates that, on average, students with access to a greater number of books tend to achieve higher academic scores.\nA notable deviation from the general trend occurs for students whose homes have “more than 500 books.” In this category, the mean score decreases, contrary to the overall positive relationship observed. This suggests that there may be diminishing returns in terms of academic performance when the number of books surpasses a certain threshold.\n\nIn summary, the density plot illustrates a positive association between the number of books in the home and student performance. However, the deviation observed for the “more than 500 books” category suggests a nuanced relationship, highlighting the need to consider optimal conditions for leveraging the positive influence of books on academic outcomes.”\n\n\n\n\nClarity\n\n(Almost) Right Visualisation. The use of density plots, with vertical lines showing the median reading scores, is useful for comparing the distributions of reading scores based on the number of books at home. However, this can be further enhanced with the use of a ridgelines plot.\nMissing Key Message in Title. However, the key message stated in the observation is not included in the title (which is factual). Stating the key message in the title would help the reader zoom in on the intended message of the plot.\nDifficult to Compare Distributions. Given that there are many categories, it is difficult to compare the distributions. It may be useful to showcase the quartile cut-offs to allow for better comparisons across different density plots.\n\nAesthetics\n\nUnclear Colours Used. The plot uses an easy-to-read font. However, the choice of gradient colours is not appropriate as it does not allow distinction between the distinct categories of answers to the question in the questionnaire on the number of books at home.\nLack of Labels for Categories. The categories representing different ranges of the number of books at home requires a separate table for interpretation. This inconveniences the reader. Hence, it would be better to label each density plot directly for easier identification.\nNo Labels for Mean Values. The values of the dashed vertical lines are not labelled. It may be useful to label some of them to allow for direct comparison. Alternatively, overall mean and overall median lines could be added for broad comparisons.\nOrientation of Label. The y-axis title can be rotated for easier reading.\n\n\n\n\n\n\n\n\nImproved PlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote: The same makeover approach is also applicable to Section 4.3.1 (Performance Distribution by Highest Level of Schooling of Parents) as it also uses density plots.\n\n\n\n\n\n\nIn conclusion, the ggplot2 package is a powerful package for exploratory data analysis through visualisation. However, it is insufficient if effort is not made to select, clean, categorise, and moderate the data properly, and the visualisation process does not take into account information design, visual encoding, and interface design.\nThe step-by-step process of a data visualisation makeover in this take-home exercise highlights the importance of paying attention to details when making a plot. The personal checklist of important points to consider elucidated from the makeover attempts above are summarised as follows:\n\n\n\n\n\n\n\nR for Visual Analytics.\nR for Data Science.\nFundamentals of Data Visualisation.\nPISA 2022 Database and Technical Report.\n\n~~~ End of Take-home Exercise 2 ~~~"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#introduction",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#introduction",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Singapore has come a long way since gaining independence in 1965. Without natural resources, human capital development through a well-planned education system is a critical part of Singapore’s transformation from third world to first.\nDespite the success, there is still a correlation between socio-economic status and education achievement, as well as ingrained perceptions that some schools are better than others.\nHence, there is a need to use data to analyse the performance of Singapore students across different subjects, and identify any relationships between the performance in various subjects and factors such as gender, socioeconomic status, and type of school.\n\n\n\nIn this take-home exercise, the objective is to improve on an original visualisation by a fellow course-mate by focusing on what works, what does not work, why they do not work, and how to make it better.\nThe specific tasks are:\n\nSelect a Take-home Exercise 1 prepared by a course-mate;\nCritic the submission in terms of clarity and aesthetics;\nPrepare a sketch for the alternative design using the data visualisation design principles and best practices from Lesson 1 and Lesson 2; and\nRemake the original design using ggplot2, ggplot2 extensions, and tidyverse packages."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getting-started",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "The R packages used in this take-home exercise are:\n\nhaven for importing SAS files;\ntidyverse (i.e. readr, tidyr, dplyr, ggplot2) for performing data science tasks such as importing, tidying, and wrangling data, as well as creating graphics based on The Grammar of Graphics;\nreshape2 for transforming data between wide and long formats;\nggthemes for extra themes, geoms, and scales for ggplot2;\nggridges for creating ridgeline plots;\nggdist for visualising distributions and uncertainty; and\nggpubr for creating publication ready ggplot2 plots.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed in the computer. If yes, they are then loaded into the R environment. If no, they are installed, and then loaded into the R environment.\n\npacman::p_load(haven, tidyverse, reshape2,\n               ggthemes, ggridges, ggdist,\n               ggpubr)\n\n\n\n\nThe OECD Programme for International Student Assessment (PISA) measures how well 15-year-old students in different countries are “prepared to meet the challenges of today’s knowledge societies” by looking at “their ability to use their knowledge and skills to meet real-life challenges”. The PISA surveys take place very three years, the latest being conducted in 2022.\nThe PISA 2022 database contains the full set of responses from individual students, school principals, and parents. There are a total of five data files and their contents are as follows:\n\nStudent questionnaire data file;\nSchool questionnaire data file;\nTeacher questionnaire data file;\nCognitive item data file; and\nQuestionnaire timing data file.\n\nFor the purpose of this take-home exercise, the “Student questionnaire data file” is used."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-wrangling",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "The dataset used in this take-home exercise is the 2022 PISA student questionnaire data file, cy08msp_stu_qqq.sas7bdat, which is in the SAS file format.\nThe file is imported into the R environment using the read_sas() function in the haven package and stored as the R object, stu_qqq.\n\nstu_qqq = read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nThe tibble data frame, stu_qqq, has 1,279 columns (variables) and 613,744 rows (observations).\n\n\n\nThere are 6,606 rows with the country code (i.e., CNT) value of “SGP”, which represents Singapore. This count is cross-verified by the information provided in the “CY08MSP_STU_QQQ” sheet in the codebook. The codebook also stated that Singapore students’ made up 1.0763% of the entire global student population who took part in the 2022 PISA.\nThe filter() function in the dplyr package is used to obtain these rows, and stored as the R object, stu_qqq_SG.\n\nstu_qqq_SG = stu_qqq %&gt;% filter(CNT == \"SGP\")\n\nThe tibble data frame, stu_qqq_SG, is then saved in the rds file format and imported into the R environment.\n\nwrite_rds(stu_qqq_SG, \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG = read_rds(\"data/stu_qqq_SG.rds\")\n\n\n\n\nUsing the chosen submission, the dataset is prepared according to the original submission.\n\n#  PREPARE MAIN DATA-FRAME\nstudent_columns &lt;- \"CNTSTUID\"\ngender_columns &lt;- \"ST004D01T\"\nschool_columns &lt;- \"CNTSCHID\"\n\neducation_column_mother &lt;- \"ST005Q01JA\"\neducation_column_father &lt;- \"ST007Q01JA\"\n\ntraining_column_mother &lt;- \"ST006Q01JA\"\ntraining_column_father &lt;- \"ST008Q01JA\"\npossession_room_column &lt;- \"ST250Q01JA\"\npossession_computer_column &lt;- \"ST250Q02JA\"\npossession_software_column &lt;- \"ST250Q03JA\"\npossession_phone_column &lt;- \"ST250Q04JA\"\npossession_internet_column &lt;- \"ST250Q05JA\"\npossession_book_column &lt;- \"ST255Q01JA\"\n\nmath_columns &lt;- c(\"PV1MATH\", \"PV2MATH\", \"PV3MATH\", \"PV4MATH\", \"PV5MATH\", \"PV6MATH\", \"PV7MATH\", \"PV8MATH\", \"PV9MATH\", \"PV10MATH\")\nreading_columns &lt;- c(\"PV1READ\", \"PV2READ\", \"PV3READ\", \"PV4READ\", \"PV5READ\", \"PV6READ\", \"PV7READ\", \"PV8READ\", \"PV9READ\", \"PV10READ\")\nscience_columns &lt;- c(\"PV1SCIE\", \"PV2SCIE\", \"PV3SCIE\", \"PV4SCIE\", \"PV5SCIE\", \"PV6SCIE\", \"PV7SCIE\", \"PV8SCIE\", \"PV9SCIE\", \"PV10SCIE\")\n\nstudent_ID &lt;- stu_qqq_SG[, student_columns, drop = FALSE]\ngender &lt;- stu_qqq_SG[, gender_columns, drop = FALSE]\nschool_ID &lt;- stu_qqq_SG[, school_columns, drop = FALSE]\neducation_mother &lt;- stu_qqq_SG[, education_column_mother, drop = FALSE]\neducation_father &lt;- stu_qqq_SG[, education_column_father, drop = FALSE]\n\ntraining_mother &lt;- stu_qqq_SG[, training_column_mother, drop = FALSE]\ntraining_father &lt;- stu_qqq_SG[, training_column_father, drop = FALSE]\npossession_room &lt;- stu_qqq_SG[, possession_room_column, drop = FALSE]\npossession_computer &lt;- stu_qqq_SG[, possession_computer_column, drop = FALSE]\npossession_software &lt;- stu_qqq_SG[, possession_software_column, drop = FALSE]\npossession_phone &lt;- stu_qqq_SG[, possession_phone_column, drop = FALSE]\npossession_internet &lt;- stu_qqq_SG[, possession_internet_column, drop = FALSE]\npossession_book &lt;- stu_qqq_SG[, possession_book_column, drop = FALSE]\n\nmath_avg &lt;- rowMeans(stu_qqq_SG[, math_columns, drop = FALSE])\nreading_avg &lt;- rowMeans(stu_qqq_SG[, reading_columns, drop = FALSE])\nscience_avg &lt;- rowMeans(stu_qqq_SG[, science_columns, drop = FALSE])\n\nstu_df &lt;- data.frame(Student_ID = student_ID,\n  Gender = gender,\n  School_ID = school_ID,\n  Education_mother = education_mother,\n  Education_father = education_father,\n \n#  Training_mother = training_mother,\n#  Training_father = training_father,\n  Possession_room = possession_room,\n  Possession_computer = possession_computer,\n  Possession_software = possession_software,\n  Possession_phone = possession_phone,\n  Possession_internet = possession_internet,\n  Possession_book = possession_book,\n  \n  Math_Average = round(math_avg,digits=2),\n  Reading_Average = round(reading_avg,digits=2),\n  Science_Average = round(science_avg,digits=2),\nAverage_score=round(((math_avg+reading_avg+science_avg)/3),digits=2))\n\nnames(stu_df) &lt;- c(\"Student_ID\",\"Gender\",\"School_ID\",\"Education_mother\",\n                   \"Education_father\",\"Possession_room\",\"Possession_computer\",\n                   \"Possession_software\",\"Possession_phone\",\n                   \"Possession_internet\",\"Possession_book\",\"Math_Average\",\n                   \"Reading_Average\",\"Science_Average\",\"Average_Score\")\n\nThe finalised tibble data frames, stu_df, and Score_by_School are then saved in the rds file format and imported into the R environment.\n\nwrite_rds(stu_df, \"data/stu_df.rds\")\n\n\nstu_df = read_rds(\"data/stu_df.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-visualisation-makeover",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-visualisation-makeover",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "The original visualisation at Section 3 (Distribution of Singapore Students’ Performance) of the submission is reproduced below. The plot on the average score (not specific subjects) is chosen.\n\n\n\n\n\nThe observation made:\n\n“In this case, all the histogram are left skewed. The left-skewed (negative skewness) nature of the histogram indicates that there is a concentration of scores towards the higher end, with a tail extending towards lower scores. The mean is influenced by these lower scores, pulling it towards the left. The median, being less sensitive to extreme values, is positioned higher in the distribution.”\n\n\n\n\nClarity\n\nRight Visualisation. The use of a histogram provides a clear representation of the distribution of the average scores among the students, and the use of the mean and median vertical dashed lines shows the left-skewness of the distribution.\nMissing Key Message in Title. However, the key message stated in the observation is not included in the title (which is factual). Stating the key message in the title would help the reader zoom in on the intended message of the plot.\n\nAesthetics\n\nGraphical Integrity Maintained. The y-axis starts from zero, ensuring that the histogram is not distorted.\nSimple Colours/Font Used. The plot uses an easy-to-read font and colour. However, this can be enhanced by using a professional theme.\nOvercrowding of Details. The x-axis labels use values that are too detailed (not rounded up). Also, each column of the histogram is labelled with the corresponding frequency for that range of scores. These details may be overwhelming and distract from the intended message. The placement of the mean and median values can also be better adjusted to avoid overlapping with the histogram. The decimal values in the mean and median may also be removed to improve readability given that the differences in the two values is more than 1 point.\nOrientation of Label. The y-axis title can be rotated for easier reading.\n\n\n\n\n\n\n\nAn improved plot is made by making the following changes:\n\n\n\n\nImproved PlotCode\n\n\n\n\n\n\n\n\n\n\naverage_sci = mean(stu_df$Average_Score, na.rm = TRUE)\nmedian_sci = median(stu_df$Average_Score, na.rm = TRUE)\n\nggplot(stu_df, aes(x = Average_Score)) +\n  geom_histogram(bins = 20, \n                 fill = \"cadetblue3\", \n                 color = \"grey95\") +\n  labs(title = \"More Students Score Above Mean Average Score\",\n       subtitle = \"Distribution of Average Scores\",\n       x = \"Average Score\",\n       y = \"Frequency\") +\n  theme_economist() +\n  scale_x_continuous(n.breaks = 20) +\n  scale_y_continuous(n.breaks = 8) +\n  geom_vline(xintercept = average_sci, color = \"navy\", linetype = \"dashed\", size = 1) +\n  geom_text(aes(x = average_sci-60, y = 900, label = paste(\"Mean:\", round(average_sci))), vjust = 2, color = \"navy\",size =4) +\n  geom_vline(xintercept = median_sci, color = \"maroon\", linetype = \"dashed\", size = 1) +\n  geom_text(aes(x = median_sci+100, y = 900, label = paste(\"Median:\", round(median_sci))), vjust = 2, color = \"maroon\",size=4) +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\n\n\n\n\n\n\nThe original visualisation at Section 4.1 (Performance by Gender) of the submission is reproduced below. Again, the plot on the average score (not specific subjects) is chosen.\n\n\n\n\n\nThe relevant observations made:\n\n“From the above violin plots, we can conclude:\n\nMale plot is more spread out, which indicates greater variability in scores within the male group\nFemale group and male group have similar average performance.\nAlmost all the distribution are left skewed, indicating a concentration of students with relatively higher scores, but a few students have much lower scores.”\n\n\n\n\n\nClarity\n\n(Almost) Right Visualisation. The use of two violin plots shows the distributions of the average scores for female and male students. The use of the box plots in the middle of the violin plots shows the median average scores. However, as the two violin plots do not overlap, the comparison of average scores based on gender is more difficult to make visually. A density plot grouped by gender, with vertical lines added to show the median average scores, may be more appropriate for comparison purposes.\nMissing Key Message in Title. However, the key message stated in the observation is not included in the title (which is factual). Stating the key message in the title would help the reader zoom in on the intended message of the plot.\n\nAesthetics\n\nSimple Colours/Font Used. The plot uses an easy-to-read font and the stereotypical colours associated with each gender (pink for female; blue for male). However, this can be enhanced by using a simpler/minimalist theme for the background to keep the focus on the coloured density plots.\nRedundant Legend. The legend is redundant given that the x-axis is labelled. Hence, it can be removed.\nUnclear Labels for Mean and Median Values. The subtitle states the colours corresponding to the mean and median values for each gender which requires the reader to read and match, and reconfirm each time he/she views the plot. This is less intuitive then putting the labels together with the values.\nOrientation of Label. The y-axis title can be rotated for easier reading.\nMis-titled Y-axis. The y-axis title was mistakenly labelled as “Reading Score” instead of “Average Score”.\n\n\n\n\n\n\n\n\nImproved PlotCode\n\n\n\n\n\n\n\n\n\n\nstu_df$Gender = ifelse(\n  stu_df$Gender == 1, \n  \"Female\", \"Male\")\n\nf = stu_df %&gt;%\n  filter(Gender == \"Female\")\n\nm = stu_df %&gt;%\n  filter(Gender == \"Male\")\n\nstu_df = stu_df %&gt;%\n  mutate(Gender = fct_relevel(Gender, \n                               \"Female\", \n                               \"Male\"))\n\nggplot(stu_df,\n       aes(x = Average_Score,\n           fill = Gender)) +\n  geom_density(alpha = 0.5) +\n  geom_vline(aes(xintercept=median(f$Average_Score)),\n             color=\"red\", \n             linetype=\"dashed\", \n             linewidth=1,\n             alpha = 0.5) +\n  geom_vline(aes(xintercept=median(m$Average_Score)),\n             color=\"blue\", \n             linetype=\"dashed\", \n             linewidth=1,\n             alpha = 0.5) +\n  ggtitle(label = \"On Average, Boys and Girls Perform Similarly\",\n          subtitle= \"Distribution of Average Scores by Gender\") + \n  ylab(\"Density\") + xlab(\"Average Score\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1)) +\n  theme_minimal() +\n  geom_vline(aes(xintercept=median(f$Average_Score)),\n             color=\"#CC3366\", \n             linetype=\"dashed\", \n             linewidth=1,\n             alpha = 0.5) +\n  geom_vline(aes(xintercept=median(m$Average_Score)),\n             color=\"#033336\", \n             linetype=\"dashed\", \n             linewidth=1,\n             alpha = 0.5) +\n  geom_text(aes(x = 690, y = 0.0045, label = paste(\"Median:\", round(median(m$Average_Score)))), vjust = 2, color = \"#033336\",size =4) +\n  geom_text(aes(x = 480, y = 0.0045, label = paste(\"Median:\", round(median(f$Average_Score)))), vjust = 2, color = \"#CC3366\",size=4) +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_text(angle=360, \n                                    vjust=.5, hjust=1))\n\n\n\n\n\nNote: The same makeover approach is also applicable to Section 4.3.3 (Performance Distribution by Internet Access) as it also uses violin plots.\n\n\n\n\n\n\n\nThe original visualisation at Section 4.3.2 (Distribution of by Number of Book in Students’ Home) of the submission is reproduced below. The plot on the reading score is chosen.\n\n\n\n\n\nThe observation made:\n\n“From the density plot, we can interpret that:\n\nFor students with no books in their homes, the density plot is right-skewed. This suggests that a lack of books is associated with a concentration of lower academic scores. The right skewness indicates that the majority of students in this group may have below-average scores.\nAs the number of books in the home increases, the density plot becomes more left-skewed. This trend suggests a positive correlation between the abundance of books and higher academic performance. The left skewness indicates a concentration of higher scores, with more students performing above the average.\nThe observation that the mean score of students increases as the number of books in the home increases aligns with the general trend of a left-skewed density plot. This indicates that, on average, students with access to a greater number of books tend to achieve higher academic scores.\nA notable deviation from the general trend occurs for students whose homes have “more than 500 books.” In this category, the mean score decreases, contrary to the overall positive relationship observed. This suggests that there may be diminishing returns in terms of academic performance when the number of books surpasses a certain threshold.\n\nIn summary, the density plot illustrates a positive association between the number of books in the home and student performance. However, the deviation observed for the “more than 500 books” category suggests a nuanced relationship, highlighting the need to consider optimal conditions for leveraging the positive influence of books on academic outcomes.”\n\n\n\n\nClarity\n\n(Almost) Right Visualisation. The use of density plots, with vertical lines showing the median reading scores, is useful for comparing the distributions of reading scores based on the number of books at home. However, this can be further enhanced with the use of a ridgelines plot.\nMissing Key Message in Title. However, the key message stated in the observation is not included in the title (which is factual). Stating the key message in the title would help the reader zoom in on the intended message of the plot.\nDifficult to Compare Distributions. Given that there are many categories, it is difficult to compare the distributions. It may be useful to showcase the quartile cut-offs to allow for better comparisons across different density plots.\n\nAesthetics\n\nUnclear Colours Used. The plot uses an easy-to-read font. However, the choice of gradient colours is not appropriate as it does not allow distinction between the distinct categories of answers to the question in the questionnaire on the number of books at home.\nLack of Labels for Categories. The categories representing different ranges of the number of books at home requires a separate table for interpretation. This inconveniences the reader. Hence, it would be better to label each density plot directly for easier identification.\nNo Labels for Mean Values. The values of the dashed vertical lines are not labelled. It may be useful to label some of them to allow for direct comparison. Alternatively, overall mean and overall median lines could be added for broad comparisons.\nOrientation of Label. The y-axis title can be rotated for easier reading.\n\n\n\n\n\n\n\n\nImproved PlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote: The same makeover approach is also applicable to Section 4.3.1 (Performance Distribution by Highest Level of Schooling of Parents) as it also uses density plots."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#conclusion",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "In conclusion, the ggplot2 package is a powerful package for exploratory data analysis through visualisation. However, it is insufficient if effort is not made to select, clean, categorise, and moderate the data properly, and the visualisation process does not take into account information design, visual encoding, and interface design.\nThe step-by-step process of a data visualisation makeover in this take-home exercise highlights the importance of paying attention to details when making a plot. The personal checklist of important points to consider elucidated from the makeover attempts above are summarised as follows:"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#key-references",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#key-references",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "R for Visual Analytics.\nR for Data Science.\nFundamentals of Data Visualisation.\nPISA 2022 Database and Technical Report.\n\n~~~ End of Take-home Exercise 2 ~~~"
  }
]